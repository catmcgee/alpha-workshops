{"noir_version":"0.25.0+d1ed549202e5a840845298c931418e173eb5437c","name":"Uniswap","functions":[{"name":"_assert_token_is_same","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":37}],"token":[{"start":37,"end":38}],"token_bridge":[{"start":38,"end":39}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"","debug_symbols":""},{"name":"swap_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"input_asset","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_unshield_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":42,"end":43}],"input_amount":[{"start":35,"end":36}],"input_asset":[{"start":33,"end":34}],"input_asset_bridge":[{"start":34,"end":35}],"inputs":[{"start":0,"end":33}],"minimum_output_amount":[{"start":39,"end":40}],"nonce_for_unshield_approval":[{"start":37,"end":38}],"output_asset_bridge":[{"start":36,"end":37}],"secret_hash_for_L1_to_l2_message":[{"start":41,"end":42}],"secret_hash_for_redeeming_minted_notes":[{"start":40,"end":41}],"uniswap_fee_tier":[{"start":38,"end":39}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885]},"bytecode":"","debug_symbols":""},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inner_hash":[{"start":37,"end":38}],"inputs":[{"start":0,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YzU7DMAyA0x/W/zJgsPIn9chxlXbYsQ/BC0yjErtsaC08PqLeYtXNGBfcg6VZipKmafLZSRM7ljrIY5ssXXbadKGOBd+XOp/9TwrGvmZDclpCOG0hnA4jJ7BN1LDr1B3ArtyMFwIYRwIYPQGMvgDGQABjKIAxEsAYC2BMBDCmAhgvBTCOBTBeCWC8FsB4I4BxIoDxVgDjnQDGKSOjRRhdXc7adN+mB3WI2Re63ledlFwM82IFPjsOnqm+gG9i44Pb1TnITeqQ3yZ1eMfguJ0OI3YdZnPo1+PuV8cKGbG/y2//hU/sxMg+lE32axbXIsakHnlGWwW6zHi3UtCxLZ0CMqbSc4TlKWmL7dAeuK6RHfxHXJvBH9+5xncpaTP6Rf9S8ervGTyewQxzEOsy+CCZ29nFZOO894J+Q/5+e3PuGnMSknps86zzsa6L+edhHqn+fow6UylJOSa2j/h5ioH03M9povv6Vrx7SGrYyjdslZI2CbFfOoD9LDIu9k05QM7MZ+ZTzJHq/+NYR99jbhu6UH8K2wfqeD9hVQgHpA6fpeHgHWyocJDAgeap7tAIibKJBoYLA9hs4bCBgBICNgiIIOAAh35Kxjjl5FJHGOVJ5y86f31f1/lqu2l2y1WTv22rOt9sm/yzrvKP3fpr2VTwXNXqB8Nw3LryGgAA","debug_symbols":"ndBNCoAgFATgu8xaIqJfrxItXmUgiIVaEOLdU6ID5O7NG77NeKh9ISd3bcE9yqKqwUcPe5BOD+vIOPCqbxiEXuM1lIFhk0qA10OYWDJNhmkzTJdh+n8mhouMpFmJtEjqTr18A8Xo7uNtwgM="},{"name":"_approve_bridge_and_exit_input_asset_to_L1","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":39,"end":40}],"inputs":[{"start":0,"end":37}],"token":[{"start":37,"end":38}],"token_bridge":[{"start":38,"end":39}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241]},"bytecode":"","debug_symbols":""},{"name":"swap_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":46,"end":47}],"input_amount":[{"start":39,"end":40}],"input_asset_bridge":[{"start":38,"end":39}],"inputs":[{"start":0,"end":37}],"minimum_output_amount":[{"start":43,"end":44}],"nonce_for_swap_approval":[{"start":47,"end":48}],"nonce_for_transfer_approval":[{"start":41,"end":42}],"output_asset_bridge":[{"start":40,"end":41}],"recipient":[{"start":44,"end":45}],"secret_hash_for_L1_to_l2_message":[{"start":45,"end":46}],"sender":[{"start":37,"end":38}],"uniswap_fee_tier":[{"start":42,"end":43}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249]},"bytecode":"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","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::PublicContext;\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n}\n\nstruct TokenBridge {\n  address: AztecAddress,\n}\n\nimpl TokenBridge {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn token(self: Self, context: &mut PublicContext) -> AztecAddress {\n        let return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"get_token()\"),\n            []\n        );\n        AztecAddress::from_field(return_values[0])\n    }\n\n    pub fn exit_to_l1_public(\n        self: Self,\n        context: &mut PublicContext,\n        recipient: EthAddress,\n        amount: Field,\n        callerOnL1: EthAddress,\n        nonce: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"exit_to_l1_public((Field),Field,(Field),Field)\"),\n            [recipient.to_field(), amount, callerOnL1.to_field(), nonce]\n        );\n    }\n}","path":"/Users/catmcgee/Documents/Work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/interfaces.nr"},"48":{"source":"use dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// This method computes the L2 to L1 message content hash for the public\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_public_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    aztec_recipient: AztecAddress,\n    secret_hash_for_L1_to_l2_message: Field,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes = [0; 260]; // 8 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let aztec_recipient_bytes = aztec_recipient.to_field().to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0xf18186d8 keccak256(\"swap_public(address,uint256,uint24,address,uint256,bytes32,bytes32,address)\")\n    hash_bytes[0] = 0xf1;\n    hash_bytes[1] = 0x81;\n    hash_bytes[2] = 0x86;\n    hash_bytes[3] = 0xd8;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = aztec_recipient_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = caller_on_L1_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n\n// This method computes the L2 to L1 message content hash for the private\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_private_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    secret_hash_for_redeeming_minted_notes: Field,\n    secret_hash_for_L1_to_l2_message: Field,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes = [0; 260]; // 8 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let secret_hash_for_redeeming_minted_notes_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0x16f416eb keccak256(\"swap_private(address,uint256,uint24,address,uint256,bytes32,bytes32,address)\")\n    hash_bytes[0] = 0x16;\n    hash_bytes[1] = 0xf4;\n    hash_bytes[2] = 0x16;\n    hash_bytes[3] = 0xeb;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = secret_hash_for_redeeming_minted_notes_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = caller_on_L1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}","path":"/Users/catmcgee/Documents/Work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/util.nr"},"49":{"source":"mod interfaces;\nmod util;\n\n// Demonstrates how to use portal contracts to swap on L1 Uniswap with funds on L2\n// Has two separate flows for private and public respectively\n// Uses the token bridge contract, which tells which input token we need to talk to and handles the exit funds to L1\ncontract Uniswap {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, Map, PublicMutable};\n    use dep::aztec::oracle::context::get_portal_address;\n\n    use dep::authwit::auth::{\n        IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_call_authwit_hash,\n        compute_outer_authwit_hash\n    };\n\n    use crate::interfaces::{Token, TokenBridge};\n    use crate::util::{compute_swap_private_content_hash, compute_swap_public_content_hash};\n\n    struct Storage {\n        // like with account contracts, stores the approval message on a slot and tracks if they are active\n        approved_action: Map<Field, PublicMutable<bool>>,\n        // tracks the nonce used to create the approval message for burning funds\n        // gets incremented each time after use to prevent replay attacks\n        nonce_for_burn_approval: PublicMutable<Field>,\n    }\n\n    // Since the token bridge burns funds on behalf of this contract, this contract has to tell the token contract if the signature is valid\n    // implementation is similar to how account contracts validate public approvals.\n    // if valid, it returns the IS_VALID selector which is expected by token contract\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        let message_hash = compute_outer_authwit_hash(context.msg_sender(), inner_hash);\n        let value = storage.approved_action.at(message_hash).read();\n        if (value) {\n            context.push_new_nullifier(message_hash, 0);\n            IS_VALID_SELECTOR\n        } else {\n            0\n        }\n    }\n\n    // This helper method approves the bridge to burn this contract's funds and exits the input asset to L1\n    // Assumes contract already has funds.\n    // Assume `token` relates to `token_bridge` (ie token_bridge.token == token)\n    // Note that private can't read public return values so created an internal public that handles everything\n    // this method is used for both private and public swaps.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _approve_bridge_and_exit_input_asset_to_L1(token: AztecAddress, token_bridge: AztecAddress, amount: Field) {\n        // approve bridge to burn this contract's funds (required when exiting on L1, as it burns funds on L2):\n        let nonce_for_burn_approval = storage.nonce_for_burn_approval.read();\n        let selector = FunctionSelector::from_signature(\"burn_public((Field),Field,Field)\");\n        let message_hash = compute_call_authwit_hash(\n            token_bridge,\n            token,\n            selector,\n            [context.this_address().to_field(), amount, nonce_for_burn_approval]\n        );\n        storage.approved_action.at(message_hash).write(true);\n\n        // increment nonce_for_burn_approval so it won't be used again\n        storage.nonce_for_burn_approval.write(nonce_for_burn_approval + 1);\n\n        // Exit to L1 Uniswap Portal !\n        TokenBridge::at(token_bridge).exit_to_l1_public(\n            &mut context,\n            context.this_portal_address(),\n            amount,\n            context.this_portal_address(),\n            nonce_for_burn_approval\n        );\n    }\n    #[aztec(public)]\n    fn swap_public(\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the transfer approval\n        nonce_for_transfer_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        // params for the depositing output_asset back to Aztec\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        // nonce for someone to call swap on sender's behalf\n        nonce_for_swap_approval: Field\n    ) {\n        if (!sender.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, sender);\n        }\n\n        let input_asset = TokenBridge::at(input_asset_bridge).token(&mut context);\n\n        // Transfer funds to this contract\n        Token::at(input_asset).transfer_public(\n            &mut context,\n            sender,\n            context.this_address(),\n            input_amount,\n            nonce_for_transfer_approval\n        );\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        let _void = context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.to_field(), input_asset_bridge.to_field(), input_amount]\n        );\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n        // ensure portal exists - else funds might be lost\n        assert(\n            !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n        );\n        assert(\n            !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n        );\n\n        let content_hash = compute_swap_public_content_hash(\n            input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            recipient,\n            secret_hash_for_L1_to_l2_message,\n            caller_on_L1\n        );\n        context.message_portal(context.this_portal_address(), content_hash);\n    }\n\n    #[aztec(private)]\n    fn swap_private(\n        input_asset: AztecAddress, // since private, we pass here and later assert that this is as expected by input_bridge\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        // params for using the unshield approval\n        nonce_for_unshield_approval: Field,\n        // params for the swap\n        uniswap_fee_tier: Field,// which uniswap tier to use (eg 3000 for 0.3% fee)\n        minimum_output_amount: Field, // minimum output amount to receive (slippage protection for the swap)\n        // params for the depositing output_asset back to Aztec\n        secret_hash_for_redeeming_minted_notes: Field,// secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        secret_hash_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        caller_on_L1: EthAddress // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n    ) {\n        // Assert that user provided token address is same as expected by token bridge.\n        // we can't directly use `input_asset_bridge.token` because that is a public method and public can't return data to private\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_token_is_same((Field),(Field))\"),\n            [input_asset.to_field(), input_asset_bridge.to_field()]\n        );\n\n        // Transfer funds to this contract\n        Token::at(input_asset).unshield(\n            &mut context,\n            context.msg_sender(),\n            context.this_address(),\n            input_amount,\n            nonce_for_unshield_approval\n        );\n\n        // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n            [input_asset.to_field(), input_asset_bridge.to_field(), input_amount]\n        );\n\n        // Create swap message and send to Outbox for Uniswap Portal\n        // this ensures the integrity of what the user originally intends to do on L1.\n        let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n        let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n        // ensure portal exists - else funds might be lost\n        assert(\n            !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n        );\n        assert(\n            !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n        );\n\n        let content_hash = compute_swap_private_content_hash(\n            input_asset_bridge_portal_address,\n            input_amount,\n            uniswap_fee_tier,\n            output_asset_bridge_portal_address,\n            minimum_output_amount,\n            secret_hash_for_redeeming_minted_notes,\n            secret_hash_for_L1_to_l2_message,\n            caller_on_L1\n        );\n        context.message_portal(context.this_portal_address(), content_hash);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_token_is_same(token: AztecAddress, token_bridge: AztecAddress) {\n        assert(\n            token.eq(TokenBridge::at(token_bridge).token(&mut context)), \"input_asset address is not the same as seen in the bridge contract\"\n        );\n    }\n}","path":"/Users/catmcgee/Documents/Work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/main.nr"},"51":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER},\n    hash::{hash_args, pedersen_hash}\n};\nuse dep::aztec::context::{PrivateContext, PublicContext, Context};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_private_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_private_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_public_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_public_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(caller: AztecAddress, consumer: AztecAddress, selector: FunctionSelector, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_outer_authwit_hash(consumer: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [consumer.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/authwit/src/auth.nr"},"74":{"source":"use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"76":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"80":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"81":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"83":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"84":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"86":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"87":{"source":"use dep::protocol_types::address::{AztecAddress, EthAddress};\n\n#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: AztecAddress) -> EthAddress {}\n\nunconstrained pub fn get_portal_address(contract_address: AztecAddress) -> EthAddress {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/context.nr"},"103":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context.nr"},"118":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"120":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"125":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/hasher.nr"},"131":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"132":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"133":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x134b57e317f1554b9c4f547e617338fcc8ff04c6d96a278f1752b26a462c5d25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"136":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"137":{"source":"use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"138":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"139":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"150":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"159":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"163":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"165":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"167":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"175":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"201":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"203":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"207":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"208":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<1> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<1> for U128 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"209":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"211":{"source":"use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"213":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"214":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"218":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"219":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"222":{"source":"use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr"},"223":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"225":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"}}}
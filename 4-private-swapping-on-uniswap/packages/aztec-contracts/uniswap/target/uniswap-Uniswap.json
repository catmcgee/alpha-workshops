{"noir_version":"0.26.0+bdc49d8e1897105afd5ee87ac62b5afb93744d61","name":"Uniswap","functions":[{"name":"swap_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"input_asset","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_unshield_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":39,"end":40}],"input_amount":[{"start":32,"end":33}],"input_asset":[{"start":30,"end":31}],"input_asset_bridge":[{"start":31,"end":32}],"inputs":[{"start":0,"end":30}],"minimum_output_amount":[{"start":36,"end":37}],"nonce_for_unshield_approval":[{"start":34,"end":35}],"output_asset_bridge":[{"start":33,"end":34}],"secret_hash_for_L1_to_l2_message":[{"start":38,"end":39}],"secret_hash_for_redeeming_minted_notes":[{"start":37,"end":38}],"uniswap_fee_tier":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YzW7CMAyA0xL6B+3+2PiZtPW4YytxmHbqQ+wFEKs0LjDRbo8/rYZYNWHsMvdgCUtR0jQ4n+2SOHHUXu6b4ph2ryl9dSz4vjB19j/JGXVlXXI6QjhdIZw9Rk5gG6luv1PdgV+5GfsCGD0BjL4AxkAAYyiAMRLAOBDAOBTAGAtgTAQwXghgvBTAeCWA8VoA440AxpEAxlsBjHcCGMeMjA5h1KY9acq0KTO1P7O/mP5AtVJwMczzJeTsOPlEHQrkJi4+6Lavh9ykD/ld0od3DD3d2uCx25DNQa/PrdfkZuh3j/jEs2ICc89In2a3MX8OiD/Z9Gad+W73baN/8Ozqk2f0VWjajHcwOZ3bMSUkcyoTI2xPyVgch/5wSYxBIM/E+Id//E5bv0vIGO8X+wvFa79v8fgWc98wgUCuMtGtX2w2zvsx0Bvx6z2IubZiEpF+HPNo6kvTN+SPw5yuH4rYTKUg7SHx/YCfJ+/Izl1MY6PrW/GuIYnlq8DyVULGxMR/SQf+c8i8qJtygJyZz8ynmAfq8D+OffQ91q5lC827cHyojtcTVoNwQpoYOgYO3sGCChsJbGi+ajeNiBgbG2C4WIDFFjYbOHjCwQ4OTnAwgcR/TOY4lQzThBnlwdRPpn59X1XpcrOut4tlnb5tyipdb+r0syrTj+3qa1GX8FxW6ge2C+5aGhsAAA==","debug_symbols":"ndBNCoUgFAXgvZyxPKTXn24lGtzKQBCLtCDEvadEC6jZPffwTU6AWUbyerEOMoD/ihqyC3Ar2fxwnjYPWbQVg7JTugSPDLM2CrIUsWfZNB9M+8GI9+bP35kUDto0DUblRXK32/EZKEV/rncTLw=="},{"name":"_assert_token_is_same","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"token":[{"start":34,"end":35}],"token_bridge":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233]},"bytecode":"","debug_symbols":""},{"name":"_approve_bridge_and_exit_input_asset_to_L1","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":36,"end":37}],"inputs":[{"start":0,"end":34}],"token":[{"start":34,"end":35}],"token_bridge":[{"start":35,"end":36}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234]},"bytecode":"","debug_symbols":"5f3djiTJkqWHvsu+HhyYqKr86LzKAS+a5BAYYNBDcJoEiMG8Oz3JjKja6KgdZrvSvlridtXV3e6uIukpSzQsvrXyv//tv/zX/+Vf/u0//9d//W9/+4///W/H/2/Y/Nt//P//97/9t//9X/71x//lv/3bv/wf//a3/3j8h7/9p3/9X1//83/8h7/9b//5v/ynv/3Htf/H//Qf/t83rKtv8KtviKtvyKtvqKtv2BffMI6rb7DTb/gP/+5llR8vrPLPlw6zjw8fd374vPPD150f7nd+eNz54Xnnh9edH75v/PB53Pnhd07ovHNC550TOu+c0Pln/p6//lDnz1e+/nN9vthsfnx83frxy/7Ux/tvH/+7P5zfffy49+PnvR+/7v14v/fj496Pz3s/vu79+H3rx/tx78ffO7V+p9L7nUrvdyq933kX8zvvYn7nXczvvIv5nXexuPMuFnfexeLOCY249coR916Y8l7pzXulN++9MOW9F6a898KU916Y8t4LU957Ycp7L0x574Wp7p3a+lNTuz5e+Ppx6fOlnx897vvoed9H/6lJHUd8fPbrh+uv/rz93o+Pez8+7/34uvfj960fv497P97u/fhx78fPez/+3qnd907tvndq971Tu++d2n3r1M7juPfj7d6PH/d+/Lz349e9H+/3fnzc+/F578fXvR9/79TavVNr906t3Tu1du/U2r1Ta/dOrd07tXbv1Nq9U2v3Tu24d2r/FIYxjvn5Y+Hh4+8+/otX+/KPV3scXxUzlIpxrpiw/fHqGF8WE0rFpFIxpVTMFirmT8Ehv7wYUypmKBUzlYpZSsUoKfBUUuCppMBTSYGnkgIvJQVeSgq8lBR4KSnwUlLgpaTAS0mBl5ICLyUFXkoK7EoK7EoK7EoK7EoK7EoK7EoK7EoK7EoK7EoK7EoKHEoKHEoKHEoKHEoKHEoKHEoKHEoKHEoKHEoKHEoKnEoKnEoKnEoKnEoKnEoKnEoKnEoKnEoKnEoKnEoKXEoKXEoKXEoKXEoKXEoKXEoKXEoKXEoKXEoKXEoKvJUUeCsp8FZS4K2kwFtJgbeSAm8lBd5KCryVFHgLKfA6hBR4HUIKvA4hBV6HkAKvQ0iB1yGkwOsQUuB1CCnwOoQUeB1KCmxKCmxKCmxKCmxKCmxKCmxKCmxKCmxKCmxKCmxKCjyUFHgoKfBQUuChpMBDSYGVPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxS8kTt5Q8cUvJE7eUPHFLyRO3lDxxruSJcyVPnCt54lzJE+eHkAK7kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxruSJcyVPnCt54lzJE+dKnjhX8sS5kifOlTxxjpqtIj6LqfyqmK1TTICWojkqf756zmN+VcxUKmYpFeNKxYRSMdwVYs4Zn8Xs+ObVa9fHZ/ux1uerh+VH6dW39N22dNLCk2N+vDrH+uJvL2nh+b6YpVSMKxUTSsWAPzRljM9iqr4qppSK2ULFkBae74sxpWKGUjFTqZilVIwrFQMqcB3+8eqa/lUxoM5Ufv4EV/nVT3CkUeX7YkypmKFUzFQqZikV40rFhFIxqVRMKRWjpMBLSYGXkgIvJQVeSgq8lBR4KSnwUlLgpaTAS0mBl5ICu5ICu5ICu5ICu5ICu5ICu5ICu5ICu5ICu5ICu5ICh5ICh5ICh5ICh5ICh5ICh5ICh5ICh5ICh5ICh5ICp5ICp5ICp5ICp5ICp5ICp5ICp5ICp5ICp5ICp5ICl5ICl5ICl5ICl5ICl5ICl5ICl5ICl5ICl5ICl5ICbyUF3koKvJUUeCsp8FZS4K2kwFtJgbeSAm8lBd5CCpyHkALnIaTAeQgpcB5CCpyHkALnIaTAeQgpcB5CCpyHkALnoaTApqTApqTApqTApqTApqTApqTApqTApqTApqTApqTAQ0mBh5ICDyUFHkoKPJQUeCgp8FBS4KGkwENJgZU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLEpZInLpU8cankiUslT1wqeeJSyROXSp64VPLElZInrpQ8caXkiSslT1wdQgpcSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT1wpeeJKyRNXSp64UvLElZInrpQ8caXkiSslT9wmzVZ7jo9Xb19fFTOViuH+As9j75+vnmbjq2JSqZhSKmYLFQNaik4Uw10h5jg+pmkO39+8eu36+Gw/1m+zNyw/Sh99S599S18Spf8sJpSKSaViSqmYLVQM6Cc6UYyG/P4shhTUyo9i5jG/KmYqFbOUinGlYkKpmFQqppSK2ULFzEOpGFMqRkmBp5ICTyUFnkoKPJUUeCop8FRS4KmkwEtJgZeSAi8lBV5KCryUFHgpKfBSUuClpMBLSYGX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hXB9C+H6FsL1LYTrWwjXtxCubyFc30K4voVwfQvh+hbC9S2E61sI17cQrm8hXN9CuL6FcH0L4foWwvUthOtbCNe3EK5vIVzfQri+hXB9C+H6FsL1LYTrWwjXtxCubyFc30K4voVwfQvh+hbC9S2E61sI17cQrm8hXN9CuL6FcH0L4foWwvUthOtbCNe3EK5vIVzfQri+hXB9C+H6FsL1LYTrWwjXtxCubyFc30K4voVwfQvh+hbC9S2E61sI17cQrm8hXN9CuL6FcH0L4foWwvUthOtbCNe3EK5vIVzfQri+hXB9C+H6FsL1LYTrWwjXtxCubyFcnyNcnyNcnyNcnyNcnx8LOcWRUwI5JZFTCjkFmX2E63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE63OE6wuE6wuE6wuE6wuE64tjIac4ckogpyRySiGnILOPcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2BcH2JcH2JcH2JcH2JcH15LOQUR04J5JRETinkFGT2Ea4vEa4vEa4vEa4vEa4vEa4vEa4vEa4vEa4vEa4v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79BT79BT79BT79BT79BT79BT79BT79RT79RT79RT79RT79RT79RT79RT79RT79RT79RT79JT79JT79JT79JT79JT79JT79JT79JT79JT79JT762n3ltPvbeeem899d566r311HvrqffWU++tp95bTb3tOA41+f5Rk5p+/6hJTcB/1KSm4D9qUpPwHzWpafiPmtRE/EdNair+oyY1Gf9Rk6COy9kuf9QkqONyxssfNQnquJz18kdNgjouZ778UZOgjsvZL3/UJKjjcgbMHzUJ6ricBfNHTYI6LmfC/FGToI7L2TB/1CSo43JGzB81Ceq4nBXzR02COi5nxvxRk6COy9kxf9QkqONyhswfNQnquJwl80dNgjouZ8r8UZOgjsvZMn/UJKjjcsbMHzUJ6ricNfNHTYI6LmfO/FGToI7L2TN/1CSo43IGzR81Ceq4nEXzR02COi5n0vxRk6COy9k0f9QkqONyRs0fNQnquJxV80dNgjouZ9b8UZOgjsvZNX/UJKjjcobNHzUJ6ricZfNHTYI6Lmfa/FETruPH57/CMscf1LQEa3LBmkKwphSsqQRr2no18ebNEzWZYE1DsCZBHS9BHS9BHS9BHS9BHS9BHS9BHd+COr4FdXwL6vgW1PEtqONbUMe3oI5vQR3fgjq+9XTcDj0dt0NPx+3Q03E79HTcDj0dt0NPx+3Q03E79HTcDj0dt0NQx01Qx01Qx7/2KY7c9VHTYfmPaxpWHy8e4/itAbevXrzCP1689u9qsvnVq3N8tptj/d2rPzvw9h1E+w6yfQfVvoOt3UGMzw6qvuzga+9mqw6sfQejfQezfQfiO/lEB+I7+UQH4jv5RAfiO/lEB9o7uY7PV9f0rzvQ3sknOpja+6AyPjvI/LoD7X1wpgPtfXCmA+19cKYD7X1wpgPtfXCmA/F9cKID8X3wfQdL+2e0Mx1o/4x2poP2O3m138mr/U5e7Xfyar+TV/udvNrv5NV+J3v7neztd7K338nefid7+53s7Xeyt9/J3n4ne/ud7O13crTfydF+J0f7nRztd3K038nRfidH+50c7XdytN/J0X4nZ/udnO13crbfydl+J2f7nZztd3K238nZfidn+52c7Xdytd/J1X4nV/udXO13crXfydV+J1f7nVztd3K138nVfifv9jt5t9/Ju/1O3u138m6/k3f7nbzb7+Tdfifv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"},{"name":"nonce_for_burn_approval","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/71UzW7CMAxO+hPKqk3bcdoO3X2HdNoDZK+wNyhqQVyoVECCl68gyBafgsWFgKXIzhcndr7Y0eosmnQqYCzfpAvAHA0v9hb5tbXxh2RKlMlx5GSX4JcQ9gaYhjx5fYyVp7U/L+qSowK4c/Fi1eEbOLBT4CP0K2E9ASwJ9npev2A9F/YYIR7b+Cb8dEbYizzlcBdHtr1NTjxhLAdzjvcMeZgH5IOl7GCeQ+xJ/Ni2UOcejX2nKdzBQf4cLwOfT9KvxDvjnBfWoKL3YW7YtxR4wzrOwB97MGK/1/5ccwc+8W4s1/r93jX7RNx6WW/6oVl0/13TakgtC9JEjamPME8ARzsVsBE0fh8c12NcLlI54NcTltdUXdIbtTdSJYsWbMQ+SL+T/huGZl8tV223q/rtpurn1azfrtq1OgAozISTsgcAAA==","debug_symbols":"zZfNqsIwEIXfZdbl0kky+emrXFxErVAoVWwVpPTdbbFmoyAWlbPrkHOYj0I+SE/1fhO7at+0VPSU/wkV/z21h9hMc9vFY0dF0BwyKpvt9CluyGhX1SUVJgzZQ5iZZQ4zG5vCrPhJWjs1hw3rlPVhWGUjjYWicVA0HoomQNFwjoXDWDgKC0dj4RgsHCwjM5aSGcvJjCVlxrKywrKy+q6VbzvUD3Z8wp9i0w7nX/xWDialg0hKq1xmIgNHJHBEFo7IwRF5OKKARqSf3n5l3dzSuXkwnzYLOrKgYxd03IKOf68zDud4rOK6Lqdn73R2ajb3V/A4dpfD7WS4Ag=="},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inner_hash":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232]},"bytecode":"","debug_symbols":""},{"name":"swap_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_amount","type":{"kind":"field"},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":43,"end":44}],"input_amount":[{"start":36,"end":37}],"input_asset_bridge":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}],"minimum_output_amount":[{"start":40,"end":41}],"nonce_for_swap_approval":[{"start":44,"end":45}],"nonce_for_transfer_approval":[{"start":38,"end":39}],"output_asset_bridge":[{"start":37,"end":38}],"recipient":[{"start":41,"end":42}],"secret_hash_for_L1_to_l2_message":[{"start":42,"end":43}],"sender":[{"start":34,"end":35}],"uniswap_fee_tier":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242]},"bytecode":"","debug_symbols":""}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Uniswap::swap_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Uniswap::swap_private_parameters","fields":[{"name":"input_asset","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"input_amount","type":{"kind":"field"}},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_unshield_approval","type":{"kind":"field"}},{"name":"uniswap_fee_tier","type":{"kind":"field"}},{"name":"minimum_output_amount","type":{"kind":"field"}},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"}},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Uniswap::_approve_bridge_and_exit_input_asset_to_L1_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Uniswap::_approve_bridge_and_exit_input_asset_to_L1_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Uniswap::swap_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Uniswap::swap_public_parameters","fields":[{"name":"sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"input_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"input_amount","type":{"kind":"field"}},{"name":"output_asset_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_transfer_approval","type":{"kind":"field"}},{"name":"uniswap_fee_tier","type":{"kind":"field"}},{"name":"minimum_output_amount","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"}},{"name":"caller_on_L1","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_swap_approval","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Uniswap::_assert_token_is_same_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Uniswap::_assert_token_is_same_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_bridge","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Uniswap::spend_public_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Uniswap::spend_public_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"approved_action","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, PublicMutable<bool>>"}}]}},{"name":"nonce_for_burn_approval","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<Field>"}}]}}]}]}},"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, gas::GasOpts};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce],\n            GasOpts::default()\n        );\n    }\n\n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n}\n\nstruct TokenBridge {\n  address: AztecAddress,\n}\n\nimpl TokenBridge {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn token(self: Self, context: &mut PublicContext) -> AztecAddress {\n        let return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"get_token()\"),\n            [],\n            GasOpts::default()\n        );\n        AztecAddress::from_field(return_values[0])\n    }\n\n    pub fn exit_to_l1_public(\n        self: Self,\n        context: &mut PublicContext,\n        recipient: EthAddress,\n        amount: Field,\n        caller_on_l1: EthAddress,\n        nonce: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"exit_to_l1_public((Field),Field,(Field),Field)\"),\n            [recipient.to_field(), amount, caller_on_l1.to_field(), nonce],\n            GasOpts::default()\n        );\n    }\n}","path":"/Users/catmcgee/Documents/work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/interfaces.nr"},"48":{"source":"use dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// This method computes the L2 to L1 message content hash for the public\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_public_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    aztec_recipient: AztecAddress,\n    secret_hash_for_L1_to_l2_message: Field,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes = [0; 260]; // 8 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let aztec_recipient_bytes = aztec_recipient.to_field().to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0xf18186d8 keccak256(\"swap_public(address,uint256,uint24,address,uint256,bytes32,bytes32,address)\")\n    hash_bytes[0] = 0xf1;\n    hash_bytes[1] = 0x81;\n    hash_bytes[2] = 0x86;\n    hash_bytes[3] = 0xd8;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = aztec_recipient_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = caller_on_L1_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n\n// This method computes the L2 to L1 message content hash for the private\n// refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\npub fn compute_swap_private_content_hash(\n    input_asset_bridge_portal_address: EthAddress,\n    input_amount: Field,\n    uniswap_fee_tier: Field,\n    output_asset_bridge_portal_address: EthAddress,\n    minimum_output_amount: Field,\n    secret_hash_for_redeeming_minted_notes: Field,\n    secret_hash_for_L1_to_l2_message: Field,\n    caller_on_L1: EthAddress\n) -> Field {\n    let mut hash_bytes = [0; 260]; // 8 fields of 32 bytes each + 4 bytes fn selector\n\n    let input_token_portal_bytes = input_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let in_amount_bytes = input_amount.to_be_bytes(32);\n    let uniswap_fee_tier_bytes = uniswap_fee_tier.to_be_bytes(32);\n    let output_token_portal_bytes = output_asset_bridge_portal_address.to_field().to_be_bytes(32);\n    let amount_out_min_bytes = minimum_output_amount.to_be_bytes(32);\n    let secret_hash_for_redeeming_minted_notes_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let secret_hash_for_L1_to_l2_message_bytes = secret_hash_for_L1_to_l2_message.to_be_bytes(32);\n    let caller_on_L1_bytes = caller_on_L1.to_field().to_be_bytes(32);\n\n    // function selector: 0x16f416eb keccak256(\"swap_private(address,uint256,uint24,address,uint256,bytes32,bytes32,address)\")\n    hash_bytes[0] = 0x16;\n    hash_bytes[1] = 0xf4;\n    hash_bytes[2] = 0x16;\n    hash_bytes[3] = 0xeb;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = input_token_portal_bytes[i];\n        hash_bytes[i + 36] = in_amount_bytes[i];\n        hash_bytes[i + 68] = uniswap_fee_tier_bytes[i];\n        hash_bytes[i + 100] = output_token_portal_bytes[i];\n        hash_bytes[i + 132] = amount_out_min_bytes[i];\n        hash_bytes[i + 164] = secret_hash_for_redeeming_minted_notes_bytes[i];\n        hash_bytes[i + 196] = secret_hash_for_L1_to_l2_message_bytes[i];\n        hash_bytes[i + 228] = caller_on_L1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}","path":"/Users/catmcgee/Documents/work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/util.nr"},"49":{"source":"mod interfaces;\nmod util;\n\n// Demonstrates how to use portal contracts to swap on L1 Uniswap with funds on L2\n// Has two separate flows for private and public respectively\n// Uses the token bridge contract, which tells which input token we need to talk to and handles the exit funds to L1\ncontract Uniswap {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, Map, PublicMutable};\n    use dep::aztec::oracle::context::get_portal_address;\n    use dep::aztec::context::gas::GasOpts;\n\n    use dep::authwit::auth::{\n        IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_call_authwit_hash,\n        compute_outer_authwit_hash\n    };\n\n    use crate::interfaces::{Token, TokenBridge};\n    use crate::util::{compute_swap_private_content_hash, compute_swap_public_content_hash};\n\n    #[aztec(storage)]\n    struct Storage {\n        // like with account contracts, stores the approval message on a slot and tracks if they are active\n        approved_action: Map<Field, PublicMutable<bool>>,\n        // tracks the nonce used to create the approval message for burning funds\n        // gets incremented each time after use to prevent replay attacks\n        nonce_for_burn_approval: PublicMutable<Field>,\n    }\n\n    // Since the token bridge burns funds on behalf of this contract, this contract has to tell the token contract if the signature is valid\n// implementation is similar to how account contracts validate public approvals.\n// if valid, it returns the IS_VALID selector which is expected by token contract\n#[aztec(public)]\nfn spend_public_authwit(inner_hash: Field) -> Field {\n    let message_hash = compute_outer_authwit_hash(\n        context.msg_sender(),\n        context.chain_id(),\n        context.version(),\n        inner_hash\n    );\n    let value = storage.approved_action.at(message_hash).read();\n    if (value) {\n        context.push_new_nullifier(message_hash, 0);\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n}\n// This helper method approves the bridge to burn this contract's funds and exits the input asset to L1\n// Assumes contract already has funds.\n// Assume `token` relates to `token_bridge` (ie token_bridge.token == token)\n// Note that private can't read public return values so created an internal public that handles everything\n// this method is used for both private and public swaps.\n#[aztec(public)]\n#[aztec(internal)]\nfn _approve_bridge_and_exit_input_asset_to_L1(token: AztecAddress, token_bridge: AztecAddress, amount: Field) {\n    // approve bridge to burn this contract's funds (required when exiting on L1, as it burns funds on L2):\n    let nonce_for_burn_approval = storage.nonce_for_burn_approval.read();\n    let selector = FunctionSelector::from_signature(\"burn_public((Field),Field,Field)\");\n    let message_hash = compute_call_authwit_hash(\n        token_bridge,\n        token,\n        context.chain_id(),\n        context.version(),\n        selector,\n        [context.this_address().to_field(), amount, nonce_for_burn_approval]\n    );\n    storage.approved_action.at(message_hash).write(true);\n\n    // increment nonce_for_burn_approval so it won't be used again\n    storage.nonce_for_burn_approval.write(nonce_for_burn_approval + 1);\n\n    // Exit to L1 Uniswap Portal !\n    TokenBridge::at(token_bridge).exit_to_l1_public(\n        &mut context,\n        context.this_portal_address(),\n        amount,\n        context.this_portal_address(),\n        nonce_for_burn_approval\n    );\n}\n#[aztec(public)]\nfn swap_public(\n    sender: AztecAddress,\n    input_asset_bridge: AztecAddress,\n    input_amount: Field,\n    output_asset_bridge: AztecAddress,\n    // params for using the transfer approval\n    nonce_for_transfer_approval: Field,\n    // params for the swap\n    uniswap_fee_tier: Field,\n    minimum_output_amount: Field,\n    // params for the depositing output_asset back to Aztec\n    recipient: AztecAddress,\n    secret_hash_for_L1_to_l2_message: Field,\n    caller_on_L1: EthAddress,\n    // nonce for someone to call swap on sender's behalf\n    nonce_for_swap_approval: Field\n) {\n    if (!sender.eq(context.msg_sender())) {\n        assert_current_call_valid_authwit_public(&mut context, sender);\n    }\n\n    let input_asset = TokenBridge::at(input_asset_bridge).token(&mut context);\n\n    // Transfer funds to this contract\n    Token::at(input_asset).transfer_public(\n        &mut context,\n        sender,\n        context.this_address(),\n        input_amount,\n        nonce_for_transfer_approval\n    );\n\n    // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n    let _void = context.call_public_function(\n        context.this_address(),\n        FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n        [input_asset.to_field(), input_asset_bridge.to_field(), input_amount],\n        GasOpts::default()\n    );\n\n    // Create swap message and send to Outbox for Uniswap Portal\n    // this ensures the integrity of what the user originally intends to do on L1.\n    let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n    let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n    // ensure portal exists - else funds might be lost\n    assert(\n        !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n    );\n    assert(\n        !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n    );\n\n    let content_hash = compute_swap_public_content_hash(\n        input_asset_bridge_portal_address,\n        input_amount,\n        uniswap_fee_tier,\n        output_asset_bridge_portal_address,\n        minimum_output_amount,\n        recipient,\n        secret_hash_for_L1_to_l2_message,\n        caller_on_L1\n    );\n    context.message_portal(context.this_portal_address(), content_hash);\n}\n\n#[aztec(private)]\nfn swap_private(\n    input_asset: AztecAddress, // since private, we pass here and later assert that this is as expected by input_bridge\n    input_asset_bridge: AztecAddress,\n    input_amount: Field,\n    output_asset_bridge: AztecAddress,\n    // params for using the unshield approval\n    nonce_for_unshield_approval: Field,\n    // params for the swap\n    uniswap_fee_tier: Field,// which uniswap tier to use (eg 3000 for 0.3% fee)\n    minimum_output_amount: Field, // minimum output amount to receive (slippage protection for the swap)\n    // params for the depositing output_asset back to Aztec\n    secret_hash_for_redeeming_minted_notes: Field,// secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n    secret_hash_for_L1_to_l2_message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n    caller_on_L1: EthAddress // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n) {\n    // Assert that user provided token address is same as expected by token bridge.\n    // we can't directly use `input_asset_bridge.token` because that is a public method and public can't return data to private\n    context.call_public_function(\n        context.this_address(),\n        FunctionSelector::from_signature(\"_assert_token_is_same((Field),(Field))\"),\n        [input_asset.to_field(), input_asset_bridge.to_field()]\n    );\n\n    // Transfer funds to this contract\n    Token::at(input_asset).unshield(\n        &mut context,\n        context.msg_sender(),\n        context.this_address(),\n        input_amount,\n        nonce_for_unshield_approval\n    );\n\n    // Approve bridge to burn this contract's funds and exit to L1 Uniswap Portal\n    context.call_public_function(\n        context.this_address(),\n        FunctionSelector::from_signature(\"_approve_bridge_and_exit_input_asset_to_L1((Field),(Field),Field)\"),\n        [input_asset.to_field(), input_asset_bridge.to_field(), input_amount]\n    );\n\n    // Create swap message and send to Outbox for Uniswap Portal\n    // this ensures the integrity of what the user originally intends to do on L1.\n    let input_asset_bridge_portal_address = get_portal_address(input_asset_bridge);\n    let output_asset_bridge_portal_address = get_portal_address(output_asset_bridge);\n    // ensure portal exists - else funds might be lost\n    assert(\n        !input_asset_bridge_portal_address.is_zero(), \"L1 portal address of input_asset's bridge is 0\"\n    );\n    assert(\n        !output_asset_bridge_portal_address.is_zero(), \"L1 portal address of output_asset's bridge is 0\"\n    );\n\n    let content_hash = compute_swap_private_content_hash(\n        input_asset_bridge_portal_address,\n        input_amount,\n        uniswap_fee_tier,\n        output_asset_bridge_portal_address,\n        minimum_output_amount,\n        secret_hash_for_redeeming_minted_notes,\n        secret_hash_for_L1_to_l2_message,\n        caller_on_L1\n    );\n    context.message_portal(context.this_portal_address(), content_hash);\n}\n\n#[aztec(public)]\n#[aztec(internal)]\nfn _assert_token_is_same(token: AztecAddress, token_bridge: AztecAddress) {\n     assert(\n        token.eq(TokenBridge::at(token_bridge).token(&mut context)), \"input_asset address is not the same as seen in the bridge contract\"\n        );\n    }\nunconstrained fn nonce_for_burn_approval() -> pub Field {\n     storage.nonce_for_burn_approval.read()\n        }\n}","path":"/Users/catmcgee/Documents/work/alpha-workshops/4-private-swapping-on-uniswap/packages/aztec-contracts/uniswap/src/main.nr"},"51":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER}, hash::pedersen_hash\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, Context, gas::GasOpts}, hash::hash_args_array};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_private_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_private_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_public_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_public_function(\n        on_behalf_of,\n        function_selector,\n        [inner_hash],\n        GasOpts::default()\n    )[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_outer_authwit_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field\n) -> Field {\n    pedersen_hash(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"75":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}, hash::hash_args_array\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"77":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::hash_args_array,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            max_block_number: MaxBlockNumber::default(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn request_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"82":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"84":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"86":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"87":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"89":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"90":{"source":"use dep::protocol_types::address::{AztecAddress, EthAddress};\n\n#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: AztecAddress) -> EthAddress {}\n\nunconstrained pub fn get_portal_address(contract_address: AztecAddress) -> EthAddress {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/oracle/context.nr"},"104":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/context.nr"},"113":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"119":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"121":{"source":"use crate::context::Context;\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"130":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"131":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp as Field,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3] as u64,\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"132":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x13f518365c690d1b96d31454afed495ad29fe530939caf7189dd44f9bd63ef89;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"135":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, RETURN_VALUES_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    encrypted_logs_hash: Field,\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push(self.encrypted_logs_hash);\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read() as Field,\n            unencrypted_logs_hash: reader.read() as Field,\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"136":{"source":"use crate::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SIDE_EFFECT,\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"137":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context: CallContext = dep::std::unsafe::zeroed();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"138":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x0f1eb4e352e8dab6cbab3c63b6d8f3cd2cd90cc7ae5ff142e4dfa2b3e28e01c1;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"146":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x141bbf6bc30f0a19640983354528288239b68edd5c1edd9955a007801230d7b6;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x05e9e448563aa811c209cc557136ac56b55f9f2f31ee54d41b697389fd45dc1c;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"153":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"158":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"160":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"162":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"166":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Default for MaxBlockNumber {\n    fn default() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a: MaxBlockNumber = dep::std::unsafe::zeroed();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::default();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::default();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::default();\n    let b = MaxBlockNumber::default();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::default();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::default();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"171":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x2a45c01b78a6b9a2392b7490966b41f47e5d9ac95610fa3eabe99d9aec7f6ad0;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"198":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"200":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"204":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"205":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"206":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"208":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"210":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"211":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"215":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"217":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"221":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"223":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.33.0/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"}}}
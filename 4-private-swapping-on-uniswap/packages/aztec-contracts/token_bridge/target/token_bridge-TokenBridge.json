{"noir_version":"0.25.0+d1ed549202e5a840845298c931418e173eb5437c","name":"TokenBridge","functions":[{"name":"claim_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":34,"end":35}],"inputs":[{"start":0,"end":33}],"secret_for_L1_to_L2_message_consumption":[{"start":35,"end":36}],"secret_hash_for_redeeming_minted_notes":[{"start":33,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YzU7DMAyA0x/W/zJgsPIn9chxlXbYsQ/BC0yjErtsaC08PqLeYtXNGBfcg6VZipKmafLZSRM7ljrIY5ssXXbadKGOBd+XOp/9TwrGvmZDclpCOG0hnA4jJ7BN1LDr1B3ArtyMFwIYRwIYPQGMvgDGQABjKIAxEsAYC2BMBDCmAhgvBTCOBTBeCWC8FsB4I4BxIoDxVgDjnQDGKSOjRRhdXc7adN+mB3WI2Re63ledlFwM82IFPjsOnqm+gG9i44Pb1TnITeqQ3yZ1eMfguJ0OI3YdZnPo1+PuV8cKGbG/y2//hU/sxMg+lE32axbXIsakHnlGWwW6zHi3UtCxLZ0CMqbSc4TlKWmL7dAeuK6RHfxHXJvBH9+5xncpaTP6Rf9S8ervGTyewQxzEOsy+CCZ29nFZOO894J+Q/5+e3PuGnMSknps86zzsa6L+edhHqn+fow6UylJOSa2j/h5ioH03M9povv6Vrx7SGrYyjdslZI2CbFfOoD9LDIu9k05QM7MZ+ZTzJHq/+NYR99jbhu6UH8K2wfqeD9hVQgHpA6fpeHgHWyocJDAgeap7tAIibKJBoYLA9hs4bCBgBICNgiIIOAAh35Kxjjl5FJHGOVJ5y86f31f1/lqu2l2y1WTv22rOt9sm/yzrvKP3fpr2VTwXNXqB8Nw3LryGgAA","debug_symbols":"ndBNCoAgFATgu8xaIqJfrxItXmUgiIVaEOLdU6ID5O7NG77NeKh9ISd3bcE9yqKqwUcPe5BOD+vIOPCqbxiEXuM1lIFhk0qA10OYWDJNhmkzTJdh+n8mhouMpFmJtEjqTr18A8Xo7uNtwgM="},{"name":"_assert_token_is_same","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":37}],"token":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239]},"bytecode":"","debug_symbols":""},{"name":"claim_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":38,"end":39}],"inputs":[{"start":0,"end":37}],"secret":[{"start":39,"end":40}],"to":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241]},"bytecode":"","debug_symbols":""},{"name":"exit_to_l1_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"callerOnL1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":38,"end":39}],"callerOnL1":[{"start":39,"end":40}],"inputs":[{"start":0,"end":37}],"nonce":[{"start":40,"end":41}],"recipient":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242]},"bytecode":"","debug_symbols":""},{"name":"token","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20jZrmYbgyAHUC/dM4gHCK/AGRS2Iyyp1mwQvjyDD1j4y35YiLFV2v/zY/uzY0FEM60LBRDzrGrDA32H9HHnwaxcvKUmVxfdXsb2EfZaxa8AMxCnrn7ni9H59Sacc1cBdyOgrrUEAuwA+0n1LWLeA2eRs5PUe1ivljFP8iY01kdI55SzyVEEugW1/nhx4Ql8B/sXfCuJwfxAPtnKA/+qf+F7k9+1rOs6H3Dk1kEOA+MVfCXvuWF/RT80Fl7iw/6OsgJsG7m1mykXqYZL6iD98T/jGLOQq+3H25Jxz8V43Q/6YGwEPKAHsud/qBXMbZbsbp+51eBq63kBoZRImaqOkYQFDu1Awot+jsgRM2lNrARyzaTs3dEpp1v4tSBeNDMRuWd+wfpym7qN92/TDezvud+340j6P+02/pS876jhFnggAAA==","debug_symbols":"zdjLaoRAEAXQf+m1hKrqt78SsuhMDAjiDKMJBPHfo/iYxUjCSCJ3Z+Mt+yB4he5UdT6ltjzXjco7RU9W5c+dai6pHtdNm66tym0IOlNF/TZcRtJ9pt7LqlC5iX12F2ZmP4eZTVjDzLKR1l7msOHbg33oX7JB46A0HkoToDQRSsOExWEsjmBxNBbHYHGwGpmxKpmxOpmxSpmxWlmwWln+t5WnPeSAPf6iP21Y9wj0y2v9KT2JDJzIHi0ia5c0ObOmhdwscnAiDycKcKKIJtIEJ2I4kRwu0nQT2Q2RhhNtfv3iln+PJnP3B9Vhx0x8fMbQjhneMSOPzQyLz3Qt02tVjMcn472P+rScpgzL9usy3em/AQ=="},{"name":"exit_to_l1_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"callerOnL1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":35,"end":36}],"callerOnL1":[{"start":36,"end":37}],"inputs":[{"start":0,"end":33}],"nonce":[{"start":37,"end":38}],"recipient":[{"start":34,"end":35}],"token":[{"start":33,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801]},"bytecode":"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","debug_symbols":""},{"name":"_call_mint_on_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":37,"end":38}],"inputs":[{"start":0,"end":37}],"secret_hash":[{"start":38,"end":39}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":33}],"token":[{"start":33,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320]},"bytecode":"H4sIAAAAAAAA/+2dB3gbRRbHn2zLsWMChBYgAeQQQghtV5JVqA4hoYQW4OghqKwTgyMHW6aE3nvvPfTee7sDrnMNuN444HrneiXce9GMPVqL+A690ae9p/m+/zfSajX7fjOzs29ndmdCUApzQyVRoKgJ1YyKGN9b1Gf9Pez73urbv833faLv+9q+7+v6vk/yfY8omUGZDN0qjjmJeNxLRj035macaDqb6nLiXdlEyk25XamufDQVi3mpeCqZzqaTTtqNxzy3pysd63FKYaqRllNlCBl5QKETtQI1VWi8FWpTVWZmvmzayBeYBqXzTddnM/jruFNdcBnTckx7N4NSm0ChtYL9OjRX+Nxm7LeCmdU8lt+WiRXsHFUG3YzG2CjMzSykOx34GlVb3NP5y8ip1UkYAv6TkGJ94m2OmoHaAjUTtSWUGpqN1O9tvrxjsSXuJFcev6U8z3TogNKFHIx9xkHJEdA2tfDb5FK6Ye50HSfRpuxnTnfYcQBld7dxnLCRV+0wks9Mx3bNY2vnrt04pi46/XktY1+9n84PXdba9gkwUj/bV/G/Ft//Vjf2aa3A3w28/ON89ozz2Rw2ttEFJNQy2jYb9Y3OH/PiqfMPfPaCYae2h/28wrwaDyPn7iKvOLu/UBzI5Ip7FAaLmULOM5slbXarz+wQlCP4f6fQVGFbh4HXbGzT/28xtjX5sqOjgj3tYPG6r29gqA1eDiMOsDaS2mpyemaqeIaKt1TxZNTWxv800Bbq962N/bapsN9W6vdtVLwGalsfa5OPudprPmebtC3wt62at1nlyTQVUxvljJE3TnXBncmYzw5j3tTK95kBvOWpAzmFjRuQMYyxUZiuhXSjUN83IMQd5S8jx19huMufK09nMKYVg+A1Ypw2m/bGodGIjWmMjcKMW0i3C+q7ESPuLv4yqmhrtfxRZSu3Nxat0/JuDB+M7iZPwOjhg0QjXyAJ5Q2z/7YagL/t6AQ7F8AUlO5QAaz1UkZX1Utp3h0yHtNpg3KHjiVdLAfqidK9UdS1oXujNIPZQxUyGG30CJldPTpt/V0fj3qNJqjPSzO5Y2YNLBpa4hWKg2ZB6J3NbWblbqqwTceV/mOpS64MOOQDNvubwj6uSv1SVvugzDS5r6BJ4LvqpfjsWnkr0AqjQz2P5VQwt+q0k4lcOh31sjbzIGkpD7jtjATEzjDUd53SwWx4O9TnNGo71PaoHVA7onZC7ayOOwu1C2o2jIzh2rnSu655pfe3BdQODl8ZVRxR25vV92bf9hb1vcW4otL2sPoebinPD93WahvMwYeQsU1fGJqMbcMDHMa24QEOY9vw2KAxpjpFbbM0ppqwdEHNNsZUS+M44NtP54euT/+PY6prqs/ksbYa9VvbNp7ftmwHlLc9Ov/AZ68O4y3nFaW/gUrLKxw75A15+w1l+3pzc4cKuWJvf2F2pq/PbHS18R0+4/2esP7dbASbjM+m295ifA4bn83/jquwrVKg45qZprdpe9qNbdqe8cY2c3RX72/NS26G8kzRgfvqvh1fWjau7q7+YObFriqeAyOF/lGVSeeZ3kb5+qHvNx2HjP9/CJVv7czPldLpqGDHxArbrA/xUya97TsG9yiOWXk+5u1WVN1uubtWn9bwrdscsFOpuW9XOZnnVkgr6+TyXW42kU+6XqYrlculY64bzSQyiWw01eNlu9xUVwrTzGWiKTxcNJNzPSeT8Go1cjWXL62yjrvdoDFyNaYxNgpzNwvp7g71PXJF3Lvzl5GVkas5ylbudGeF6vuxA20nZ13aA/jqEGf+aQeA7OtUeVgLT3J7sFMHgNfOqJkXe6p4HjQ8SX8Y9iQpkz4w4OfBR19JuY5tVqaPe6J6PaWwJ/Cd9PPATiXn9iw5mfcy0nJTsWg0GaP9UnnHjedz0VQ0ms/GnZyTyUW9dNxN98Sj8Vgun8timhm3x+nJ5NI9qZJdtfIs9wLeBlWHvaHhWY5pjI3C3NtCuvtAfXuWxL0PfxlZ8SznKVu5090XeE9kamj3VbH+TiNCy6F2ntLOYOciwlRPKva57afi+dDwlEZlmIalTHrbgKfMiviOye0pmZWp2j64/YDvxJ0Pdio5t6fEybw/BK8Pbn/gbWB1OAAantKYxtgozAMspHsg1LenRNwH8peRFU9pvrKVO93ZAemD46xLnwC+OsSZf9oBIPs6oXaeZTfYqQPAa2dZH9xBKj4YGp6lPwx7lpRJH/iOwe1JdgNfn9tBwHeSHwx2KjW3J8nJfAgEr8/tEOBtQHU4FBqe5JjG2CjMQy2kexjUtydJ3Ifxl5EVT/JgZSt3uocD74lMDe3hMDKVYy08oVlg56LBXC/KPKEjVLwAGp6QPwx7QpRJ5mjkArA/GmlWpmo9oyOA70RdAHYqObdnxMl8JATPMzoSeBtUHRZCwzMa0xgbhbnQQrpHQX17RsR9FH8ZWfGMFihbudPNAO+JTA1tBmrrGe0Cdi4aTPWi4uhjVsU5aHhGozJMw1ImmaOPlFkR3zG5PSOzMlU7+pgFvhM1B3YqObdnxMmch+CNPuaBt0HVwYOGZzSmMTYK07OQbg/Ut2dE3D38ZWTFM8opW7nTnROQ0UfOurQI+OoQZ/5pB4Ds64TywH0BCzHmZxrs1CHu830OA3MyHUsk8m5iVWVTbX5GGJmD4lBFGPNvMfN5QqyUZgTKA3cecM6CNBuCcU7WapC42vxknE3HrVX3bz3NwL6jQOYdoDbnYLXMvQx26hnCyDZz/kNKm27G5qmYJuY4WjHQfq8bTCuMeCcVz4fyuSrDKo6oOAmy5+5sxI24ETfiRlwe08o3x8DIdcacYpV+P1rFx6iYVqHqg/LQpOJuFTvVBde8L6n2mr0E+O9xKM2IkU+c7JTudOD3XQpQG7/SqS6wLpzRHxBmzj6mpQFhbmJkPjYgzM2MzAMBYW5hZB4MCHOYkbkYEOZWRuahgDBPY2Q+LiDMUxmZjxfIfIJA5hMFMi8LCHOBkfkkgeV8skDmUwQynyqQ+TSBzKcLZD5DIPOZApnPEsh8tkDmcwQynyuQ+TyBzOcLZL5AIPOFApkvEsh8sUDmSwQyXyqQ+TKBzJcLZL5CIPOVApmvEsh8tUDmawQyXyuQ+TqBzNcLZL5BIPONAplvEsh8s0DmWwQy3yqQ+TaBzMsFMt8ukPkOgcx3CmS+SyDz3QKZ7xHIfK9A5vsEMt8vkPkBgcwPCmR+SCDzwwKZHxHI/KhA5scEMj8ukPkJgcxPCmR+SiDz0wKZnxHI/KxA5ucEMj8vkPkFgcwvCmR+SSDzywKZPymQ+VMCmV8RyPyqQObXBDJ/WiDzZwQyf1Yg8+cEMn9eIPMXBDJ/USDz6wKZvySQ+csCmb8ikPmrApm/JpD5DYHMbwpkfksg89cFMn9DIPM3BTJ/SyDztwUyf0cg83cFMn9PIPP3BTL/QCDzDwUyvy2Q+UcCmd8RyPyuQOb3BDL/OCDMnOvR/URgOf80IMyc62z+TGA5/1wg8y8EMv9SIPOvBDL/WiDzbwQy/1Yg8+8EMv9eIPP7Apn/IJD5jwKZ/ySQ+c8Cmf8ikPmvApn/JpD57wKZ/yGQ+Z8Cmf8lkPnfApk/EMi8QiDzhwKZISSPOSSQuUkgc7NA5haBzGGBzK0CmccJZG4TyNwukHm8QOYOgcyrCWSeIJB5dYHMawhkXlMg80SBzGsJZF5bIPM6ApnXFci8nkDmSQFh7mNkXl9gOW8gkHlDgcyTBTJPEci8kUDmjQUybxIQ5ggjcyQgzEsYmTsF1u2pApk3Fcg8TSDzZgKZpwtk3jwgzOMYmWcEhLmNkXmLgDC3MzLPDAjzeEbmLQPC3MHIvFVAmFdjZN46IMwTGJm3CQjz6ozM2waEeQ1GZicgzGsyMrsBYZ7IyBwNCPNajMyxgDCvzcgcDwjzOozMXQFhXpeROREQ5vUYmZMBYZ7EyJwKCPP6jMzpgDBvwMi8XUCYN2Rk3j4gzJMZmXcICPMURuYdA8K8ESPzTgFh3piReeeAMG/CyNzNyEzzCDertKYa/CGVB/RbCyqMakVRPz31W1M/LvVrUj8f9XtRPxD1i1A/Ad03030k3VfRfQb53eSHkl9Gfgpdt+k6Ru06tXN03tN5QPWC8imC6jRseUvF/ailqGNRA6hBVBE1hDoOdTzqBNSJqGWok1Ano05BnYo6DXU66gzUmaizUGejzkGdizoPdT7qAtSFqItQF6MuQV2Kugx1OeoK1JWoq1BXo65BXYu6DnU96gbUjaibUDejbkHdiroNtRx1O+oO1J2ou1B3o+5B3Yu6D3U/6gHUg6iHUA+jHkE9inoM9TjqCdSTqKdQT6OeQT2Leg71POoF1Iuol1Avo2hteFor/RXUq6jXULTWMq09TGvx0tq0tFYrrV1Ka3nS2pa01iOtfUhrAdLaeLRW3BuoN1WZ0FpTtPYSrUVEa/PQWjW0dgutZUJre9BaF7T2A62FQGsD0Fz576DeRb2Horm2ae5pmouZ5iamuXpp7lqay5XmNqW5PmnuS5oLkuZGpLkC30fRXHI0txrNNUZzb9FcVDQ3E81VRHP30Fw2NLcLzXVCc3/QXBg0NwTNlUAVm96lp3fL6V1reveY3sWld1PpXU16d5He5aN32+hdL3r3id4Fondj6F0ReneC3iWgZ+vpWXN69pqeRaZnc+lZVXp2k55lpGf76Fk3evaLnoWiZ4PoWRl6doSepaBnC2isncaeaSyWxiZprI7Grmgsh8Y2qK+f+r6pL5j6RqmvkE5Y6kuivhXqa6B7b7oXpXszulch3518WfLtyNehaz9dC+nasLKtDJXOYx0mqniyinOZvr5IsT+SGRz0BooLl2ROWJjtLS4c7F3m0c+T1G66qdij0FvszfT1LssUe/sLkcWZwcWRfL83GCn0FyNLMsUczV+98qSm4Pj/5Q1EMvn8gDc4GOkt/ae42Ivk+gvFgUyuGMl7S/v6T/ToXIf0/2boIrXbFBVnikVvydLiyn/k85Hje4uLI/3HeQM9ff3UbKxsT/7r/f8DRxmmQihEAQA=","debug_symbols":"7ZzdbuM2EIXfRddBwBn+Tl6l6IW7TYEAQXaxSQsUQd69smtStDWrgS1BUca8SowM6XM+U9SRIs979/z92+7t6fvLa/fw3oHpHn57715/7F72L1/fdj/fugdz1z2+/Nn//Ljr/np6fuweHH3cjcrA07EQEpRSgMjUIqRcjOhCqUYApjpaC8fqaMmfVP9+1wF8SdW4lmqLNqu2yc5UbWeo9hDSsdKjSaU4JM6iMZg9GqxMEje1Iywzx0G0CQfR7iuK9l9RdJizqF3KosHDIBqM5SyWderjMHGKBxlxPRlmkAG1DGbi6FyeOFaHLRrHVJPNhzgFqg5Dwx20PiuO5Kp5DyzSeixS9heMn2aBgLFsSt4ILFLIkMlX264hlkX2Rqlen+mKzY6+Pro4oAsSOgDyWbIlK4Gehodmk/CMH+AFCR5QyIJ7V+Zkt7scCHwGEIhneyPOyx3DFhYgCDJ6fHk99dxRqJbwzUkeELAEphDdiZL93G7O3LEcjxC9E1wiRChLKoXzEyj6zSgJm1Ey62weq6hsjKBkMtxg2ogO2oYOazaiA+at1DDogPOdwbK7JZhyXgBwKO49g9WA1e7DpvFFLzKtXV3+kleb1i0g35rhlGWtr+Xv38IvQYhg6i3CEi5cWabBVamPv6JLLpT9NwVy54ri6ooIoFxkEvg4XR7KQRlClRv2K4SR7cr6NFRVe3bFUfaYTF3rD1xS48JyocaF4+JM48JygcaF5YKNC8vFNi4sF9e4sFx848JyCY0Ly0VV3gUotwL727QnXPZeVWVYwauqXDrt1avKmoJXVflR8KoqEwpeVeU8wau7Ia+q8pjgVVXGErx+Qm7C4T+MhCkt5xWjKTfWY3VjHSz3SMVSj1/4pAphLAgTooBwMpJ7alw4LsE0LiwXaFxYLti4sFxs48JycY0Ly8U3LiyX0LiwXHRF4+W4tLzLc1GVd5N3hUv0J1x6r1FVhhW8qsqlgldVWVPwqio/Cl7dDXlVlfMEr6qym+BVVR4TvKrKWGTKl0QIw8irqtw07TWpyk2CV1W5SfCqKjcJXlXlJsGruyGvqnKT4FVVbhK8qspNglddual8sxupbgJy9KorN016JV25adqrrtw07VVXbpr2qis3TXt1N+RVV26a9qorN0171ZWbpr3eUG6i1XMTml50VmSiOf+yNhizvqSIlaSqsVWWBJ8gKZXGAiYxklYPC9hjKLdpwVSzZ0l2e5LcJ0g6aaI0/uD8+pKwbBj97zQ+4sL6kmx5xrv/PYaRpLi+JCoPNGC/ScWRpNVPC7hfTEUSmvHyXn/3Row4SKo6nrDlqXRYI6ya3uxFjZUMqxQwnT6cP64Wm6SahuZXaGDjaMjmTZ08CWjC8G2EkGx9D+wqNLhxNMNDV31O8idsDvpn9av1OXHUbfR+0aEqlbZNjmC0V85rQbucjnDPN7W0pV+QqwLosZtquOebOUqD4JpBeM0ge+kg6+7ZE2qkvFSpuuiI/jgmXTGG5e3KsvXVhxTDcQy/WUuD4OJBPbrLLfWD6IpBfLs4aRBcMwgvG9S/+Gf382n3x/Pjvg36/m9/v3zLXdH7l2///vj/Lx//AQ=="}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"48":{"source":"use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, Context};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn mint_public(self: Self, context: &mut PublicContext, to: AztecAddress, amount: Field) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"mint_public((Field),Field)\"),\n            [to.to_field(), amount]\n        );\n    }\n\n    pub fn burn_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"burn_public((Field),Field,Field)\"),\n            [from.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn mint_private(self: Self, context: &mut PublicContext, amount: Field, secret_hash: Field) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"mint_private(Field,Field)\"),\n            [amount, secret_hash]\n        );\n    }\n\n    pub fn burn(self: Self, context: &mut PrivateContext, from: AztecAddress, amount: Field, nonce: Field) {\n        let _return_values = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"burn((Field),Field,Field)\"),\n            [from.to_field(), amount, nonce]\n        );\n    }\n}","path":"/Users/catmcgee/Documents/work/alpha-workshops/3-token-bridge/packages/aztec-contracts/token_bridge/src/token_interface.nr"},"49":{"source":"mod token_interface;\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PublicMutable};\n\n    use dep::aztec::{context::Context, hash::compute_secret_hash};\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use crate::token_interface::Token;\n    // Storage structure, containing all storage, and specifying what slots they use.\n    struct Storage {\n        token: PublicMutable<AztecAddress>,\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress) {\n        let selector = FunctionSelector::from_signature(\"_initialize((Field))\");\n        context.call_public_function(context.this_address(), selector, [token.to_field()]);\n    }\n\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, context.this_portal_address());\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(&mut context, to, amount);\n    }\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            context.this_portal_address()\n        );\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_call_mint_on_token(Field,Field)\"),\n            [amount, secret_hash_for_redeeming_minted_notes]\n        );\n    }\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(&mut context, amount, secret_hash);\n    }\n\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, callerOnL1);\n        context.message_portal(context.this_portal_address(), content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(&mut context, context.msg_sender(), amount, nonce);\n    }\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, callerOnL1);\n        context.message_portal(context.this_portal_address(), content);\n\n        // Assert that user provided token address is same as seen in storage.\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_token_is_same((Field))\"),\n            [token.to_field()]\n        );\n\n        // Burn tokens\n        Token::at(token).burn(&mut context, context.msg_sender(), amount, nonce);\n    }\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_token_is_same(token: AztecAddress) {\n        assert(storage.token.read().eq(token), \"Token address is not the same as seen in storage\");\n    }\n    unconstrained fn token() -> pub AztecAddress {\n        storage.token.read()\n    }\n}","path":"/Users/catmcgee/Documents/work/alpha-workshops/3-token-bridge/packages/aztec-contracts/token_bridge/src/main.nr"},"66":{"source":"use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"68":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"72":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"73":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"75":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"76":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"78":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"84":{"source":"use dep::protocol_types::constants::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2MembershipWitness)]\nfn get_l1_to_l2_membership_witness_oracle(_entry_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(entry_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(entry_key)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr"},"87":{"source":"use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"88":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"95":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/context.nr"},"102":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"103":{"source":"use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert((instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"105":{"source":"mod l1_to_l2_message;\n\nuse crate::oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness;\n\nuse dep::std::merkle::compute_merkle_root;\nuse crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let msg = L1ToL2Message::new(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret\n    );\n    let entry_key = msg.hash();\n\n    let returned_message = get_l1_to_l2_membership_witness(entry_key);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = compute_merkle_root(entry_key, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    msg.compute_nullifier()\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/messaging.nr"},"112":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"117":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/hasher.nr"},"118":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{L1_TO_L2_MESSAGE_LENGTH, GENERATOR_INDEX__NULLIFIER, GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET},\n    hash::{pedersen_hash, sha256_to_field}\n};\n\nstruct L1ToL2Message {\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn new(\n        sender: EthAddress,\n        chain_id: Field,\n        recipient: AztecAddress,\n        version: Field,\n        content: Field,\n        secret: Field\n    ) -> L1ToL2Message {\n        let secret_hash = pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        Self {\n            sender,\n            chain_id,\n            recipient,\n            version,\n            content,\n            secret,\n            secret_hash,\n            tree_index: 0\n        }\n    }\n\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: EthAddress::from_field(fields[0]),\n            chain_id: fields[1],\n            recipient: AztecAddress::from_field(fields[2]),\n            version: fields[3],\n            content: fields[4],\n            secret,\n            secret_hash: fields[5],\n            tree_index\n        }\n    }\n\n    fn hash(self: Self) -> Field {\n        let mut hash_bytes = [0 as u8; 192];\n        let sender_bytes = self.sender.to_field().to_be_bytes(32);\n        let chain_id_bytes = self.chain_id.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_field().to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chain_id_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash\n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.hash();\n        pedersen_hash(\n            [message_hash, self.secret, self.tree_index],\n            GENERATOR_INDEX__NULLIFIER\n        )\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr"},"123":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"124":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"125":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x134b57e317f1554b9c4f547e617338fcc8ff04c6d96a278f1752b26a462c5d25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"128":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"129":{"source":"use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"130":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"131":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"141":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"142":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"151":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"155":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"157":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"159":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"167":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"193":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"195":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"199":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"201":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"203":{"source":"use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"204":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"205":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"206":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"208":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"209":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"210":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"211":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"214":{"source":"use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr"},"215":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"217":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"},"221":{"source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, callerOnL1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n","path":"/Users/catmcgee/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.1/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr"}}}
import { AztecAddress, AztecAddressLike, ContractArtifact, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, EthAddressLike, FieldLike, PublicKey, Wallet } from '@aztec/aztec.js';
export declare const AvmTestContractArtifact: ContractArtifact;
/**
 * Type-safe interface for contract AvmTest;
 */
export declare class AvmTestContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<AvmTestContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet): DeployMethod<AvmTestContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet): DeployMethod<AvmTestContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts<M extends keyof AvmTestContract['methods']>(opts: {
        publicKey?: PublicKey;
        method?: M;
        wallet: Wallet;
    }, ...args: Parameters<AvmTestContract['methods'][M]>): DeployMethod<AvmTestContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** pedersen_hash(data: array) */
        pedersen_hash: ((data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** emit_nullifier_and_check(nullifier: field) */
        emit_nullifier_and_check: ((nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** send_l2_to_l1_msg(recipient: struct, content: field) */
        send_l2_to_l1_msg: ((recipient: EthAddressLike, content: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** poseidon_hash(data: array) */
        poseidon_hash: ((data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** read_storage_single() */
        read_storage_single: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** sha256_hash(data: array) */
        sha256_hash: ((data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_opcode_u32() */
        set_opcode_u32: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nested_static_call_to_set_storage() */
        nested_static_call_to_set_storage: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** read_storage_map(address: struct) */
        read_storage_map: ((address: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** keccak_hash(data: array) */
        keccak_hash: ((data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_fee_per_l1_gas() */
        get_fee_per_l1_gas: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_opcode_u8() */
        set_opcode_u8: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** view_storage_map(address: struct) */
        view_storage_map: ((address: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** view_storage_single() */
        view_storage_single: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_storage_single(a: field) */
        set_storage_single: ((a: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_opcode_u64() */
        set_opcode_u64: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** read_storage_list() */
        read_storage_list: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_portal() */
        get_portal: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_timestamp() */
        get_timestamp: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** new_note_hash(note_hash: field) */
        new_note_hash: ((note_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nested_static_call_to_add(argA: field, argB: field) */
        nested_static_call_to_add: ((argA: FieldLike, argB: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** add_storage_map(to: struct, amount: integer) */
        add_storage_map: ((to: AztecAddressLike, amount: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_storage_map(to: struct, amount: integer) */
        set_storage_map: ((to: AztecAddressLike, amount: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_origin() */
        get_origin: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_read_storage_single(a: field) */
        set_read_storage_single: ((a: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** add_u128(a: struct, b: struct) */
        add_u128: ((a: {
            lo: FieldLike;
            hi: FieldLike;
        }, b: {
            lo: FieldLike;
            hi: FieldLike;
        }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_opcode_small_field() */
        set_opcode_small_field: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** add_args_return(arg_a: field, arg_b: field) */
        add_args_return: ((arg_a: FieldLike, arg_b: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_fee_per_l2_gas() */
        get_fee_per_l2_gas: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_sender() */
        get_sender: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_address() */
        get_address: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_chain_id() */
        get_chain_id: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_version() */
        get_version: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_block_number() */
        get_block_number: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** emit_unencrypted_log() */
        emit_unencrypted_log: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** new_nullifier(nullifier: field) */
        new_nullifier: ((nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** l1_to_l2_msg_exists(msg_hash: field, msg_leaf_index: field) */
        l1_to_l2_msg_exists: ((msg_hash: FieldLike, msg_leaf_index: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** raw_nested_call_to_add(argA: field, argB: field) */
        raw_nested_call_to_add: ((argA: FieldLike, argB: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nullifier_exists(nullifier: field) */
        nullifier_exists: ((nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_storage_list(a: field, b: field) */
        set_storage_list: ((a: FieldLike, b: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** note_hash_exists(note_hash: field, leaf_index: field) */
        note_hash_exists: ((note_hash: FieldLike, leaf_index: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nullifier_collision(nullifier: field) */
        nullifier_collision: ((nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** nested_call_to_add(argA: field, argB: field) */
        nested_call_to_add: ((argA: FieldLike, argB: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** raw_nested_static_call_to_add(argA: field, argB: field) */
        raw_nested_static_call_to_add: ((argA: FieldLike, argB: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
        compute_note_hash_and_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_fee_per_da_gas() */
        get_fee_per_da_gas: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_storage_address() */
        get_storage_address: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_opcode_big_field() */
        set_opcode_big_field: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** view_storage_list() */
        view_storage_list: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** raw_nested_static_call_to_set_storage() */
        raw_nested_static_call_to_set_storage: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=AvmTest.d.ts.map
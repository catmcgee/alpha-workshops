{ "noir_version": "0.25.0+d1ed549202e5a840845298c931418e173eb5437c", "name": "SchnorrHardcodedAccount", "functions": [{ "name": "cancel_authwit", "is_unconstrained": false, "custom_attributes": ["aztec(private)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "outer_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "outer_hash": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250] }, "bytecode": "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", "debug_symbols": "1ZTPasMwDIffReccLMl/5LzK2MHrMgiEtDTZYIS8++I1TlpqaKG0kJMR+pC+38EaoNnvQl/v2w7KAVBB+TZAdwhtLLs+HHsoVQFV+zm9YwFfdVNBSZ7H4opD42cSBRdWXAYllMQSabsOVpihHTPOtGNvLuj3AhA3aU2vsmbiZM3CD1rzI9YGrcyoISWrN+UiKkUpo6I1JJrcaO1pmexWVsu/td6ktdmktb3fOuIuh6NVSR6t9jeialn+pfbozqPGDfLcDVPxE451+GiqeERj77vdpZs6lf3v4dQZ/wA=" }, { "name": "spend_public_authwit", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "entrypoint", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "app_payload", "type": { "kind": "struct", "path": "authwit::entrypoint::app::AppPayload", "fields": [{ "name": "function_calls", "type": { "kind": "array", "length": 4, "type": { "kind": "struct", "path": "authwit::entrypoint::function_call::FunctionCall", "fields": [{ "name": "args_hash", "type": { "kind": "field" } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "target_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "is_public", "type": { "kind": "boolean" } }] } } }, { "name": "nonce", "type": { "kind": "field" } }] }, "visibility": "public" }, { "name": "fee_payload", "type": { "kind": "struct", "path": "authwit::entrypoint::fee::FeePayload", "fields": [{ "name": "function_calls", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::entrypoint::function_call::FunctionCall", "fields": [{ "name": "args_hash", "type": { "kind": "field" } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "target_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "is_public", "type": { "kind": "boolean" } }] } } }, { "name": "nonce", "type": { "kind": "field" } }] }, "visibility": "public" }], "param_witnesses": { "app_payload": [{ "start": 33, "end": 50 }], "fee_payload": [{ "start": 50, "end": 59 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047] }, "bytecode": "", "debug_symbols": "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4GLi8pDLaefdBZfTzrsLLpp3H3OJPe+WtL8DYpabV/I85JLrrjz9bjdn5NgT7AeftESeSfN2+UO7f+m+/fv3eowSeXJcVx95vltXH3kKu1Scb6q/+YN/rd6oq4880ayrjzx3XCoeZf/S40H1kaeDdfWRe/i6+sh9OV9+9f3fDaTN8r+v3kL32mX1oXvtsvrQvTZtbdurv5RyV33oXrusPnSvXVYfutemvAve5X/fvfluhH5vV05lv1h4+d+93VUfutcuqw/da5fVx+61c19JyRdV6f+++tBvilpXH7rX/hWZe/V5u+u1od+OtK4+dK9dVh+61+bc83f1o9xWf//xMa9Vz/z9Ta40Hh0juemDKY/fL9Tef7qXcv1OZy/z+1/45kv7/yfF0D3/zyjOch2MZ50Liq3vX7n1m28tpzkefr/YrlWXLdXFpy/M9u9abjc3hMsv4qHnlEMSDz1bkRK//JLXZ0yz/XvioefBQxIPPcMekXjoNx8dk3hsVzhg5wz9tqZjEo/tZEdMFRNxMHE55wvES0pXcy9plvdSRc6JJi7n/Dzx56ki50QTl3OCUyX028eOSVzOCU6V0G9NOyZxOecrxPO4/iS7lDreSxUTcTBxOefniT9PFTknmricE50qck40cTknOFVCvxXwmMTlnOBUCf02w2MSl3OiU8VEHExczolOFTknmricE50qck40cTknOFVCv0PymMTlnOBUCf1+ymMSl3OiU8VEHExczolOFTknmricE50qck40cTknNlVm6HeSHpO4nBObKjP0e1SPSVzOiU4VE3EwcTknOlXknGjick50qsg50cTlnOBUCf1e4GMSl3OCUyX0u4yPSVzOiU4VE3EwcTknOlXknGjick50qsg50cTlnOBUCf1u7mMSl3OCUyX0+8SPSVzOiU4VE3EwcTknOlXknGjick50qsg50cTlnOBUKXJONHE5JzhVipwTTVzOiU4VE3EwcTknOlXknGjics5XiFu5Ail1K++lipwTTVzO+XniT1PF5Jxo4nJOcKqYnBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc4FSpck40cTknOFWqnBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc4FRpck40cTknOFWanBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc4FTpck40cTknOFW6nBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc4FQZck40cTknOFWGnBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc4FSZck40cTknOFWmnBNNXM6JThUTcTBxOSc6VeScaOJyTnSqyDnRxOWc2FRJ2ybphCOXdb6CvOayI+/jnVy5IJd2wpHLOz+PfBEsJuRo5DJPOHKpJxy53BOOXPIJRy77fAV5s+uXLn2r7w2JSfYJRy77/Dzy58GSZJ9w5LJPeLCYkKORyz7hwSL7hCOXfcKDRfYJRy77RAdLln3Ckcs+0cGSZZ9w5LJPeLCYkKORyz7hwSL7hCOXfcKDRfYJRy77RAdLkX3Ckcs+0cFSZJ9w5LJPeLCYkKORyz7hwSL7hCOXfcKDRfYJRy77RAeLyT7hyGWf6GAx2SccuewTHiwm5Gjksk94sMg+4chln/BgkX3Ckcs+0cFSZZ9w5LJPdLBU2SccuewTHiwm5Gjksk94sMg+4chln/BgkX3Ckcs+0cHSZJ9w5LJPdLA02SccuewTHiwm5Gjksk94sMg+4chln/BgkX3Ckcs+0cHSZZ9w5LJPdLB02SccuezzFeS9zyvycRMVfy9YTMjRyGWfn0e+CBbZJxy57BOOXPYJRy77RLfPIfuEI5d9ooNlyD7hyGWfcOQm5Gjksk94+5R9wpHLPuHBIvuEI5d9opFP2SccuewT3T6n7BOOXPYJDxYTcjRy2SccuewTjlz2CW+fsk84ctknOFjSJvuEI5d9wpHLPuHIZZ/g9pk2E3I0ctknPFhkn3Dksk84ctknHLnsE90+k+wTjlz2iQ6WJPuEI5d9wpGbkKORyz7h7VP2CUcu+4QHi+wTjlz2iUaeZZ9w5LJPdPvMsk84ctknPFhMyNHIZZ9w5LJPOHLZJ7x9yj7hyGWf6GApsk84ctknHLnsE45c9olun8WEHI1c9gkPFtknHLnsE45c9glHLvtEt0+TfcKRyz7RwWKyTzhy2SccuQk5GrnsE94+ZZ9w5LJPeLDIPuHIZZ9o5FX2CUcu+0S3zyr7hCOXfcKDxYQcjVz2CUcu+4Qjl33C26fsE45c9okOlib7hCOXfcKRyz7hyGWf6PbZTMjRyGWf8GCRfcKRyz7hyGWfcOSyz1eQz3Stusz+Zvvssk84ctnn55E/D5Yu+4Qjl33Cg8WEHI1c9gkPFtknHLns8wXktm3b16dt+6vUp59uef/Spd4Bl3uCgcs8XwLerp+2lN4CPuSdYOCyzleAp1x24L2+NxwOWSccuazz88ifD4fDhByNXNb5EvJxBWK5rJA/b55yTjBwGecrwLPtwMv2buuUc8KRyzo/j/x565zyTjhymSccucwTjlzmCUduQo5GLvOEI5d7wpHLPuHIZZ9w5LJPMPILLiFHI5d9wpHLPuHIZZ9w5CbkaOSyTzhy2SccuewTjlz2CUcu+0QjT7JPOHLZJxy57BOOXPYJR25CjkYu+4Qjl33Ckcs+4chln3Dksk808iz7hCOXfcKRyz7hyGWfcOQm5Gjksk84ctknHLnsE45c9glHLvtEIy+yTzhy2SccuewTjlz2+Qrykr6R19Wnn50GycUEHAtc5vkS8DauwG0rbwGXd4KBn9Y66xVhG6UtEPZS0tene5nfEPOWvjAeyCT73Paqb0eEC8d/PquhfWKOuVd/c+v24bMmS/n66WTF5u2z/io/cZefucsv3OUbd/mVu/zGXX7nLn9wlz+py6/cXbdyd93K3XUrd9et3F23cnfdyt11K3fXrdxdt3J33cbddRt3123cXbdxd134G90/XD53123cXbdxd93G3XUbd9ft3F23c3fdzt11O3fXhb/J9sPlc3fdzt11O3fX7dxdt3N33cHddQd31x3cXXdwd134m/w+XD531x3cXXdwd93B3XUHd9ed3F13cnfdyd11J3fXhb/F6MPlc3fdyd11J3fXndxdd1J33bJRd92yUXfdslF33bJRd92yUXfdslF33bJRd92yUXfdslF33bJxd93E3XUTd9dN3F03cXdd+NXqD5fP3XUTd9dN3F03cXfdxN11M3fXzbG7bmn7trSZjfvyY3fdZfmxu+6y/Nhdd1l+7K5r+w2FZLU8+Ksbu+suy4/ddWvfT0BYy/m+/Nhdd1l+7K67Kr/E7rrNvpOnjQflx+66y/Jjd91l+bG7bt++y+8PRjb4nbIPlx+76y7Lj911e/vuumN7UH7srrssP3bXXZYfu+t+n/hK9fLL3JUf+zZV3fL2Xf6w+/JDd911+aG77rr80F23trn/1a291/vyQ3fddfmhu24d6Tt5Ztruyw/dddflh+666/JDd906R/ouf/7Wth4UUub1YbPdPGsa6XFLL/vXznP16acXnUvsG1k0GGPf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0aLtKFq0HUWLtqNo0XYULdqOokXbUbRoO4oWbUfRou0oWrQdRYu2o2jRdhQt2o6iRdtRtGg7ihZtR9Gi7ShatB1Fi7ajaNF2FC3ajqJF21G0aDuKFm1H0aLtKFq0HUWLtqNYo+0o1mg7ijXajmKNtqNYt2BJXaPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ijbajWKPtKNZoO4o12o5ii7aj2KLtKLZoO4ot2o5i24IldYu2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKLdqOYou2o9ii7Si2aDuKPdqOYo+2o9ij7Sj2aDuKfQuW1D3ajmKPtqPYo+0o9mg7ij3ajmKPtqPYo+0o9mg7ij3a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H80/96DBR+KPPWgKPop+7kGDj4Cfe9Dgo9fnHjT4cPRHDzqv75Zom909qJ3lQY80GT190CNNRk8f9EiT0dMHPdJk9PRBjzQZPXvQfKTJ6OmDHmkyevqgR5qMnj7oWSajbGd50LNMRvksk1E+y2SUDzQZPf2ZRz7QZPT0QcuBJqPnDwoeGPL3j5hz7eP5g6bLd3quL4pPf7006PZBf5VfuMs37vIrd/mNu/zOXf7gLn9Sl49+B/Wny0/c5XN3XePuuuj39n66fO6ua9xd17i7rnF3XePuupW761burlu5u27l7rro9xZ+unzurlu5u27l7rqVu+tW7q7buLtu4+66jbvrNu6ui35f06fL5+66jbvrNu6u27i7buPuup2763burtu5u27n7rro91R8unzurtu5u27n7rqdu+t27q47uLvu4O66g7vrDu6ui77P/enyubvu4O66g7vrDu6uO7i77uTuupO7607urju5uy76Lumny+fuupO7607urju5u+6k7rp1o+66daPuunWj7rp1o+66daPuunWj7rp1o+66daPuunWj7rp14+66ibvrJu6um7i7borddUvbD7j+tSpxX37srrssP3bXXZYfu+suy4/ddW0/65yslgd/dWN33WX5sbtu7W0vv+V8V36O3XWX5cfuusvyY3fdZt/J08aD8mN33WX5sbvusvzYXbdv3+X3ByNbjt11l+XH7rrL8mN33d6+u+7YHpQfu+uuyi+xu+6y/Nhd9/utI+nyvfz74Ix9m+ryDfDtu/zfj3D9Kj90112XH7rrrssP3XVrm/tf3dp7vS8/dNddlx+669aRvpNnpu2+/NBdd11+6K67LD/2bao6R/ouf/7Wth597Xl92Gw3z5pGetzSy/6181x9+ulLJmvsG1k8GGNPITQYY09DP4mxtpu8s8WnrZRr3Vbmzdd+iGQF3QQdDz325HlQ6LHn5YNCjz3lHxR6bDc5KPTYRnVM6LGvJR4V+nmt8c+g2/4Ohr/Wlt+Efl7HdIQuI3WAboKOhy4jdYAuI3WALiN1gC4jdYAuI30NesvXf9tpbdYV9C31HeDNvyL+gh77kvBRoctIfwL683iJfbX5qNBlpA7QTdDx0GWkDo1URuoAXUbqEC8yUgfoMlJ8vMS+sn9U6DJSfLzEfqPBUaHLSB3ixQQdD11G6hAvMlIH6DJSh3iRkTpA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PuHIZZ9w5LJPOHLZJxy57BONvMg+4chln3Dksk84ctknHLkJORq57BOOXPYJRy77fAV5Sd/I6+rTz06D9CL3BAOXeb4EvI0rcNvKO8BN3gkGflrrrFeEbZS2QHjRlusjXjLhG2Le0hfGA5lkn9te9e2IcOH461mDK1zpN89qz5+15mvV1ebd3w07y4MG15XPPWhwSfjcgwYfzT/3oMFH4s89aPBR9GMPWoOPgJ970OCj1+ceNPhw9EcPOq/vlmib3T3okSajpw9qZ3nQI01GTx/0SJPR0wc90mT09EGPNBk9fdAjTUbPHrQdaTJ6+qBHmoyePuhZJqN2lsmo2Vke9CyTUTvLZNTOMhm1s0xG7SyTUT/LZNTPMhn1s0xG/UCT0dOfNHc7y4MeaDJ6/qDggSF//8OeXPt4/qDJUp7XQqzcfFf68qC/yh/c5U/q8tHvsv50+Ym7/MxdfuEu37jLr9zlN+7yubvu4O66g7vrTu6uO7m77uTuupO766Lff/jp8rm77uTuupO7607urjupu+7YqLvu2Ki77tiou+7YqLvu2Ki77tiou+7YqLvu2Ki77tiou+7YuLtu4u66ibvrJu6um7i7Lvp9F58un7vrJu6um7i7buLuuom762burpu5u27m7rqZu+ui73x/unzurpu5u27m7rqZu+tm7q5buLtu4e66hbvrFu6ui75v+unyubtu4e66hbvrFu6uW7i7rnF3XePuusbddY2766KP4326fO6ua9xd17i7rnF3XePuupW761burlu5u27l7rrow2ufLp+761burlu5u26N3XVL289mm9m4Lz92112V32J33WX5sbvusvzYXdf2Y/rJarn/q9tid91l+bG7bu1tL7/lfF9+7K67LD92112WH7vrNvtOnjYelB+76y7Lj911V+X32F23b9/l9wcjW4/ddZflx+66y/Jjd93evrvu2B6UH7vrLsuP3XWX5cfuut/vekp12x4EZ+iuW7e8fZf/+xGuX+WH7rrr8kN33WX5sW9T1Tb3v7p/XZu7Lz90112XH7rr/rVbs5c/03Zffuiuuy4/dNddlx+669Y50nf587e29ehrz+vDZrt51jTS45Ze9q+d5+rTT1/tO2LfyOLBGHsKocEYexr6SYy13eSdLT5tpVzrtjJvvvZDJCvosWe4Y0KPfZ/tqNBjz8sHhR57yj8o9Nhu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B3fXHdxdd3B33cHddSd3153cXXdyd93J3XU/cevJs3zurju5u+7k7rqTu+tO6q5bN+quWzfqrls36q5bN+quWzfqrls36q5bN+quWzfqrls36q5bN+6um7i7buLuuom76yburvuJC0ye5XN33cTddRN3103cXTdxd93M3XUzd9fN3F03c3fdT1xQ8iyfu+tm7q6bubtu5u66mbvrFu6uW7i7buHuuoW766LvTX26fO6uy32bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qyn2bqnLfpqrct6kq922qxn2bqnHfpmrct6ka922qtlF33cZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepGvdtqsZ9m6px36Zq3LepOvdtqs59m6pz36bq3Lep+kbddTv3barOfZuqc9+m6ty3qTr3barOfZuqc9+m6ty3qTr3barOfZuqc9+m6ty3qTr3baqeuLsu922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qzn2bqnPfpurct6k6922qwX2banDfphrct6kG922qsVF33cF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepBvdtqsF9m2pw36Ya3LepJvdtqsl9m2py36aa3Lep5kbddSf3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mmty3qSb3barJfZtqct+mShv3capL/dR991I/deO91E/deS/1U7feS/3UvfdSP3XzvdRP3X0v9VO330v95P2X+0zVpX7y/st9qOpSP3n/5T5VdamfvP9yH6u61E/ef7nPVV3qJ++/3AerLtWR91/uk1WX6sj7L/fRqkt15P2X+2zVpTry/st9uOpSHXn/5T5ddamfvP9yH6+61E/ef7nPV13qJ++/3AesLvWT91/uE1aX+sn7L/cRq0v95P2X+4zVpX7y/st9yOpSP3n/5T5ldamfvP9yH7O61E/ef7nPWV3qJ++/3AetLvWT91/uk1aX+sn7L/dRq0v95P2X+6zVpX7y/st92OpSP3n/5T5tdamfvP9yH7e61E/ef7nPW13qJ++/3AeuLvWT91/uE1eX+sn7L/eRq0v95P2X+8zVpX7y/st96OpSP3n/5T51damfvP9yH7u61E/ef7nPXV3qJ++/3AevLvWT91/uk1eX+sn7L/fRq0v95P2X++zVpX7y/st9+OpSP3n/5T59damfvP9yH7+61E/ef7nPX13q5+6/ifz+VSK/f5XI718l8vtXaePuv4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fJfL7V4n8/lUiv3+VyO9fZfL7V5n8/lUmv3+Vye9f5Y27/2by+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/lcnvX2Xy+1eZ/P5VJr9/9f+z93fZrSNBzjY6o2+JZJKZHFzP/fhdZ8umu3eWQlWg4ge4qwuWnXjkzQAoCbEm779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V2vy/qs1ef/Vmrz/ak3ef7Um779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V2vy/qs1ef/VFrl/aTuXP9du5/T8ge//pvMHvv+0pf25ti377PyB7z+m8we+/5jOH/j+Yzp/YP9vOn9g/285f+T+n3bsz/OPZXb+wPd/0/kD+3/T+QP7f9P5I89fy/kjz1/L+SPPX8v5I89fy/kjz1/L+SPPX8P5I/f/mM6ffP5G7v8xnT/5/I3c/2M6f/L5G7n/x3T+5PM3cv+P6fzJ5+/H+3+mz2T/77Xnvv259hzb7PxL8vOvcc9/tP35AOVovf9cfW7/9q9to1LbqNTuVGqPnGovCnp6BSO9gjO7ghbYPxgVBHYQRgVJPcRFQVJfcFGQdNZfFCSd3xcFkWfyvj3DwLG/dCD9fPy5eDwuP3kcV7WR5zdebeRZj1cb2RfA1e6RPcRbatGfTtsjexNfMpE9jy+ZyF7Kl0wTmQmZyN7Pl0wZTwknU8Z/wsmU8apwMmV8LZrMIQ88IyMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QqbLA8/IyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QGfLAMzLywDMy8sAzMvLAMzJNZCZk5IFnZOSBZ2TkgWdk5IFnZOSBJ2ROeeAZGXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sB/J9Me8sAzMpR+xtCl3h5NZCZkKGeTof+6PShnk4kM5WyykFkoZ5OJDOXzGRMZyuczJjKUfsbQsdY+3k2fhwzl8xkTGcrnMyYynB7YQobTA1vIcHpgA5mV0wNbyHB6YAsZTg9sISMPPCPTRGZCRh54RkYeeEamjgd+4yev+5PM2qdk6nhgNJk6HvgtMv0pcN3Px8/Vx7iwibw9xJ1NHR+MZ1PHCePZ1PHCeDZNbKZs6vhhPJs6jvgdNsf+febjOGdsOD2xjQ2nK7ax4fTFJjaht+J4s+H0xTY2nL7YxobTF/dt/X5EcT3zbzZNbKZsOH2xjQ2nL7ax4fTFNjacvtjGhtMXm9gU2vT0FpvH+cPm+MXm/159bs+Lz6sXau0v1/b9+f5YP9v3tevjipzTbrsi53TxrshJw4En8ibkn0ZOGmU8kZMmJE/kpMHLEzlpnvNEThoTHZEX2rGWBjln+hyPJ5l1rMvkYUih9W14Npx5zsamic2UDWdCsrHhjDI2NpyZw8aGNBz084fN+sI29fPx5+LxuFw7jitHUseP5lhoTZwvR1Jvvrdvjkef3PMKrZXDsyH15iY2TWymbEi9uYkNqTc3sSH15iY2nN78yqbPPmxUaMkcnE2hNXN4Npy++Hx8fxf+XMaMDacvtrHh9MU2Nk1spmw4fbGNDacvtrHh9MU2Npy++MpmPWZsOH2xiU2h1XN4NqS++Fi+2fQ2Y0Pqi01sSH2xiU0TmykbUl9sYkPqi01sSH2xiQ2pL76wGbPPuRRaRodmsxdaR4dnI188ZyNfPGdD4IsvahuVWgLvelFL4EYvaiP7y+Oxfl98XTn2V7WGyvQ99IJIvNrIHhCuNvQiR7zayD7tLbXr+ryl/TrFb7WRnRdebWQvhVfbqNRG9lJ4tZG9FF5tGS9lWCWyh140iFdbxktZ1IZeCIhXW8dLWdTW8VIWtXW8lEVto1Jbx0tZ1Ib2Uq19XzzGC7Xj++Ix9VKhl9vh1Yb2UnC1ob0UWm3otXJ4taG9FFxtaC8FVxvaS8HVNiq1ob0UXC2Vlwq9FA2vlspLhV5cBlcbehUZXi2Vlwq9LgyvlspLhV7phVdL5aVCr93Cq6XyUqFXY+HVUnmp0Our8GqpvFTopU14tVReKvSqIrxaKi8VekEPXi2Vlwq9lgavlspLhV7GgldL5aVCbzbBq6XyUqG3j+DVlpm32/n8Sup2zr7ZFnrTA1xt6P77t9S25XlxW2Z/yaEb7fFqy9yTTWrL3JNNasvkW5PaMvnWpLbMvLV8IzV0eztebZl8a1EbumEdr7aOl7KoreOlLGrreCmL2kalto6Xsqit46Usaqm8VOjGb7xaKi8VupUbrzapl7ooSOqPLgoie56+Pbf2Hn1fEH9xjUptZM+DVxvZ8+DVRvY8b6m1tOeEbnPGq43sedBqj9CNy3i1kT0PXm1kf4RXW8ZLGTpHjkejUlvGS5nUlvFSJrV1vJRFbR0vZVFbx0sZ1IbuOcarreOlLGrreCmL2jReavJk7QjdXWxTkMbzTBWE9jHn8xjH+Xi1r2E5+vNp7vJ1+eXq/ao3tJO5QW9oL3OD3tBuBq83dNfwHXpDO5ob9Ib2NDfoDe1qbtDbyPSGdkw36CXzV6Gbh+/QS+avQrcP36A3dP/wHXrJ/FXoDuI79JL5q9A9xHfoJfNXobuI79BL5q9C9xHfoZfMX4XuJL5DL5m/Ct1LfIdeMn8Vupv4Dr1k/ip0P/Edesn8VeiO4jv0kvmr0D3Fd+gl81ehu4rv0Evmr0L3Fd+hl8xfhe4svkMvmb8K3Vt8h14yfxW6u/gOvWT+KnR/8R16yfxV6A7jO/SS+auDzF+Fbqm+Qy+ZvzrI/FUn81ehm8jv0Evmr0K3kd+ht5HpJfNXoTvJ79BL5q9C95LfoZfMX4XuJr9DL5m/Ct1PfodeMn8VuqP8Dr1k/ip0T/kdesn8Veiu8jv0kvmr0H3ld+gl81eh+83v0Evmr2L3od+gl8xfxe5Ev0Evmb+K3Yt+g14uf9Vjd6PfoJfLX/XY/eg36OXyV/3RyPRy+aseuyf9Br1c/qrH7kq/QS+Zv4rdl36DXjJ/Fbsz/Qa9ZP4qdsf6DXrJ/BVZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL99kPW3D7L+9kHW3z7I+tvHo5Hp5fJXg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bePOn3XY13+XDzW3z/5W+1Zp+3apLbMvWq055/yuJ7it9oydyqT2jL3KZPaMinQpLZMBjSpLZMATWrrzFuD2jrtxya1ZbKfSW2Z5GdSS+Wl6rQem9Qm9VIXBUn90UVBZM9ztufF/bGPV7l7+Tn0+th+rj76VW9k13OH3si+5wa9oXuJ79Ab2fvcoTey+7lDb2T/c4feRqY3sge6Q29kx3SHXjJ/FbqX+A69ZP4qdC/xHXrJ/FXoXuI79JL5q9C9xHfoJfNXoXuJ79BL5q9C9xLfoZfMX4XuJb5DL5m/Ct1LfIdeMn8Vupf4Dr1k/ip0L/Edesn8Vehe4jv0kvmr0L3Ed+gl81ehe4nv0Evmr0L3Et+hl8xfhe4lvkFv6B7Xt/RavhkTusUVr7bMvcryac7QDZ94tWXuUya1ZVKgSW2ZDGhSWyYBWtSG7vXEq60zby1qy2Q/k9oyyc+ktlGppfJSobs8/0HtRUFSf3RRENjz9OXxPEZfj/1V7m798Tz0vlyv/vU3F9j13KE3ct/mLXoDO59b9Ab2PrfoDex+btHbyPQGdkC36A3sgW7RG9gx3aKXzF9F7tu8Q2/kvs1b9JL5q8h9m7foJfNXkfs2b9FL5q9OMn91kvmrk8xfRe6PxetdH5EbZG/RS+WvvvRS+asvvVT+6ktvI9NL5a++9FL5qy+9VP7qSy+Vv/rSS+avIjcG36KXzF9Fbg2+RS+Zv4rcHHyLXjJ/Fblp+A69kXtc39P7+psiX2rLTCOT2jL3qtefbvxSW+ZOZVJb5j5lUlsmBZrUlsmAJrVlEqBFbeRezxvU1pm3FrVlsp9JbZnkZ1LbqNRSeanIXZ7/pPaiIKk/uiiI7HnW8/ubPdv56ptY7dj/XNz+32/++19cZM8DVxu5a/MGtZE9D15tZM+DVxvZ8+DVNiq1kT0PXm1kz4NXG9kf4dVSeanIzZp4tZF7NW9QS+WlIndq3qCWyktF7tO8QS2Vl4rcpXmDWiovtVN5qZ3KS0XuhL1BLZWXOqi81EHlpSL3/d6glspLRe77vUEtlZeK3Pd7g1oqLxW57/cGtVReKnLf7w1qqbxU5L7fG9RSeanIfb83qKXyUqF7hPFqqbxU6A5hvFoqLxW6PxivlspLhe4Oxqul8lKhe4Pxaqm8VOjOYLxaKi8Vui8Yr5bKS4XuCsarpfJSoXuC8WqpvFTojmC8WiovFbofGK+WyUstobuB8WqZvNQSuhcYr5bJSy2PRqWWyUstofuA8WqZvNQSugsYr5bKS4XuAcarpfJSoTuA8WqpvFTo/l+8WiovFbr7F6+WykstVF5qofJSoTus8WqpvNRK5aVWKi8Vup8cr5bKS4XuJ8erpfJSofvJ8WqpvFTofnK8WiovFbqfHK+WykuF7ifHq6XyUqH7yfFqqbwUVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvecLVe/5QtV7vlD1ni9UvedLnbbosS5/Lh7rOlNbZgKZ1Ja5S43Wnmqvp/ittsxdyqS2zF3KoHat0yhsUlsm8ZnUlkl8JrV15q1FbZ15a1FbJvGZ1JZJfCa1TF5qrdMobFKb1Ev9KMjaEnxRENnztHU8FezH8uIvbluWZ+zelu169X7VG9n13KE3su+5Q28j0xvZ+9yhN7L7uUNvZP9zh97IDugOvZE90A16Q3cB36GXzF+F7gO+Qy+ZvwrdCXyHXjJ/FboX+A69ZP4qdDfwHXrJ/FXofuA79JL5q9AdwXfoJfNXoXuC79BL5q9CdwXfoZfMX4XuC75DL5m/Ct0ZfIdeMn8Vujf4Dr1k/ip0d/Adesn8Vej+4Dv0kvmr0B3Cd+gl81ehe4Tv0Evmr0J3Cd+hl8xfhe4TvkMvmb8K3Sl8h14yfxW6V/gOvWT+KnS38B16yfxV6H7hO/SS+avQHcN36CXzV6F7hu/QS+avQncN36GXzF+F7hu+Qy+ZvwrdOXyHXjJ/Fbp3+A69ZP4qdPfwHXrJ/FXo/uE79JL5q9AdxHfoJfNXoXuI79BL5q9CdxHfoZfMX4XuI75DL5m/Ct1JfIdeMn91kvmrk8xfnWT+KnTP9h16G5leMn91kvmr0F3qd+gl81eh+9TxerfQjep36OXyV1voVvU79HL5q+3RyPRy+astdLv6HXq5/NUWumH9Dr1k/ip0I/sdesn8FVl/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tG1l/+0bW376R9bdvZP3tjay/vZH1tzey/vZG1t/eHo1ML5e/amT97Y2sv72R9bc3sv72Rtbf3sj62xtZf3sj629vZP3tjay/vZH1tzey/vZG1t/eyPrbG1l/eyPrb29k/e2NrL+9kfW3N7L+9kbW397q9F2Pdflz8Vh//+SL2jLTyKS2zL1qtPZUez3Fb7Vl7lQmtWXuUya1ZVKgSW2ZDGhSWyYBWtTW6T82qa0zby1qy2Q/k9oyyc+ktlGppfJSWTuPLwqS+qOLgsie53isTwXH0RB/cZE9D1xt6E5ivNrIngevNrLnwauN7HnwahuV2sieB682sufBq43sj/BqqbxU6AZiuNrQ/cN4tVReKnT3MF4tlZcK3TuMV0vlpUJ3DuPVUnmp0H3DeLVUXip01zBeLZWXCt0zjFdL5aVCdwzj1VJ5qdD9wni1VF4qdLcwXi2VlwrdK4xXS+WlQncK49VSeanQfcJ4tVReKnSXMFxt6ObVt9Ru5/O7Hds5+25H6N5VvNoyd6m2PP+S2zL9Sy5zlzKpLXOXMqktk/hMasskPpPaMonPoHYP3cT5ntrj+UXZNpaZ2jLz1qS2TOIzqS2T+ExqG5XaOl7KoraOl7KoreOlLGrreCmL2jpeyqA2dOsmXi2VlwrduIlXS+WlQrdt4tUm9VIXBUn90UVBZM/TH8/HBr0f+//852f6e+g2TLzayJ4HrjZ0EyZebWTPg1cb2fPg1Ub2PHi1jUptZM+DVxvZH+HVUnmplcpLrVReKnSLK14tlZfaqLzURuWlQjf04tVSeanQDb14tVReKnRDL14tlZcK3dCLV0vlpUI39OLVUnmp0A29eLVUXip0Qy9eLZWXCt38i1dL5aVCN//i1VJ5qdDNv3i1VF4qdPMvXi2Vlwrdl/qWWsM3R/fQfal4tWXuUpZvoIXu1MSrLXOXMqktk/hMasskPpPaMonPpLbMvLV8Rjx0pyZebZnEZ1JbJvGZ1NbxUha1jUptHS9lUVvHS1nU1vFSFrV1vJRFLZWXCt2piVdL5aVCd2ri1VJ5qdCdmv+g9qIgqT+6KAjtec7vjbjnY7z4izv388/F53G5dn9c1Yb2PHC1oT0PXG1oz4NWG7rFFa82tOeBqw3teeBqQ3seuNpGpTa0P4KrpfJSoRt68WqpvFTohl602iN0Qy9eLZOXOkI39OLVMnmp49Go1DJ5qSN0Qy9eLZOXOkI39OLVUnmp0A29eLVUXip0Qy9eLZWXCt3Qi1dL5aVCt/ni1VJ5qdjNv3C1VF4qdvMvXC2Vl4rd/AtXS+WlYjf/wtWWmUBjfX5zdKy/f/JFbZkJZFEbu1PzLbWvv/F9xO7UhKstc5cyqS2T+ExqyyQ+k9oyic+kts68taitM28NamN3asLVlkl8JrVUXip2pyZcbcup9qIgqT+6KIjsec52fiu4Xv1vvzt1hO6+xKuN7HnwaiN7Hrja0N2XeLWRPc9batd1ex5jOhdDd1/i1Ub2PHi1jUptZH+EV1vGS5nUlvFSJrVlvNS6P+ft2qfztoyXsqgN3eKKV1vHS1nU1vFSFrV1vJRFbaNSW8dLWdTW8VIWtWm81PlL7UVBGn80VZDG88wURG7HHY/H82n0eKzL//z3Z0KR23FvUBvYx9ygNrCPuUFtq6LWkqQjt+PeoDawj7lBbWAfc4PawJ7nBrWB/RFebeR23DfVGvJH5HbcG9SW8VImtWW8lElto1Jbx0tZ1NbxUha1dbyURW0dL2VRm8ZLzT43GLlJ16ggjeeZKgjtY46nyR7Ly08LW56SRG68vUFto1Ib2sfA1Yb2MXC1oX0MXG1oHwNXG9rHgNX2yI23N6gN7Y/gapm8VI/ceHuD2kallslL9ciNtzeoZfJSPXLj7Q1qqbxU5MbbG9RSeanIjbc3qKXyUpEbb29QS+WlIjfe3qCWyktFbry9QS2Vl4rceHuDWiovFbnx9ga1ZSbQdj57QrdznaktM4Esarc6d6nl2W3Vln2mts5dyqK2zl3KorZO4rOobVRq6yQ+i1qqxBe58fYGtVSJL3LjLV5t5MbbG9RSJb7Ijbc3qKV6eh658fYGtVRPzyM36d6glspLRW7SvUEtlZeK3KR7g9qkXuqiIKk/uiiI7HmWtn8rOB+Iv7hGpTay58Grjex58Gojex682sieB682sueBq43ceHuD2sieB682sj/Cq6XyUpEbb29QS+WlIjfe3qCWyktFbse9QS2VlwrduotXS+WlQrfu4tVSeanQrbt4tVReKnTrLl4tlZcK3bqLV0vlpUK37uLVUnmp0K27eLVUXip0V+lbai3fZAndVQpXG7on872/ZMMn4kN3auLV1rlLWdQ2KrV1Ep9FbZ3EZ1FLlfhCd2ri1TIlvhG6UxOvlinxjdCdmni1TIlvPBqVWqan5yN0pyZeLZOXGqE7NfFqqbxU6E5NvNqkXuqiIKk/uiiI7HnW7XnxWNuJ+ItrVGojex682sieB682sud5S61hl+sI3X2JVxvZ88DVhu6+xKuN7HnwaiP7I7zaMl7KsAHz66dQqS3jpUxqy3gpk9o6Xsqito6Xsqit46UMakM39OLV1vFSFrWhvdT5PMbXq4J4Nhi6oRevtlGpDe2l4GpDe6l31FoyUOiGXrza0F4Krja0l0KrDd3Qi1cb2kvB1ZbxUhbnGLqhF6+2Uakt46VMaut4KYvaOl7KoraOl7KoreOlDGpDN/Ti1Ub2Ulv77rfdxvpC7b49L9639n3tuixXtZG9FF5tZC+FV9uo1Eb2Um+pPbbx/ZOXFz95fooLmci+y5dMZI/mSyayn/MlE9n7uZIJ3WrsS6aMp4STKeM/4WTKeFU4mSYyEzLywDMy8sAzMvLAMzLywDMy8sATMqHbqH3JyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QCd0i7ktGHnhGRh54RkYeeEamicyEjDzwjIw88IyMPPCMjDzwjIw88ITMKQ88IyMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh7472TO0LtFfMnIA8/IyAPPyMgDz8g0kZmQkQeekZEHnpGRB56RkQeekZEHnpAJvRPGl4w88IyMPPCMjDzwjEwTmQkZeeAZGXngGRl54BkZeeAZGXngCZnQO4J8ycgDz8jIA8/IyAPPyDSRmZCRB56RkQeekZEHnpGRB56RkQeekAm928mXjDzwjIw88IyMPPCMTBOZCRl54BkZeeAZGXngGRl54BkZeeAJmdA7uXzJyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QCb1LzZeMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54AkZ7YmbkpEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IcO52Wo7lz/XbueUDOXUNpGhvAO3pf25ti37jAzlHdhEhvIObCHDuaXIRIbyKYSJDOVTCBMZSj/Tjv1JZiwzMk1kJmQon0KYyFA+hTCR4fTAFjKcHthChtMDG8hwbikykeH0wBYynB7YQkYeeEamicyEjDzwjIw88IyMPPCMjDzwjIw88F/JbA/OLUUmMvLAMzLywDMydTzwGz/53J8/+OtB+IxME5kJmToe+I2fvOzn8+Kv/+yXqx9XNnVcMJ5NHR+MZ1PHCePZ1PHCcDaF9hW9w+bYnm9xL/3xm83/vXrfnsfYt/Z97bosV451vLMvxzpO25cjpS+/gWMTRwhHTs+P58iZD/AcObMEniNn7sBz5MwocI6Fdk/5clSewXBUnsFwVJ7BcGziCOGoPIPhqDyD4ag8g+GoPIPhqDwD4Vhoj5gvR+UZDEflGQxH5RkMR/nH1xwf55PjMmYc5R8hHAvtPHL9d11oQ5IvR81rDEfNawzHJo4Qjnr+iOEo/4jhKP/4mH3GttDeKDwbPSecsim0O+odNv374qUfUzac+cDGhtPz29hw+ngbmyY2UzacftvGhtNDj+XxFDj68T//3UMX2jrly5HTb+M5cnpzOMdC+698OXJ6fjxHznyA58iZJfAcmzhCOHJmFDxH5RkMR+UZDEflGQxH5RkIx648g+GoPIPhqDyD4ag8g+HYxBHCUXkGw1F5BsNReQbDUXkGw1F5BsKx0GZQX47KMxiOyjMYjsozGI5NHCEclWcwHJVnMByVZzAclWcwHJVnIBwLbXn15ag8g+GoPIPhqDyD4djEEcJReQbDUXkGw1F5BsNReQbDUXkGwXHh3DH6JsfX3WTLo4kjhKPmDObfteYMhqPmDIQj6S5MPEc9N8Nw1HMzDEf5RwzHJo6/OV7Y6FnYnI2eb83ZkGaJc38KPNdzxoY0H5jYkHp+CxvSHZA2NqTe3MSG1G+b2HB66HN/Pg5cH+v6P//dQ5PuX8Rz5PTbeI6c3hzPkdPH4zlyen48R858AOdIun8Rz5Ezd+A5cmYUPEflGQzHJo4QjsozGI7KMxiOyjMYjsozGI7KMxCOpPtp8RyVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPQDiS7sjFc1SewXBUnsFwVJ7BcGziCOGoPIPhqDyD4ag8g+GoPIPhqDwD4Ui6KxjPUXkGw1F5BsNReQbDsYkjhKPyDIaj8gyGo/IMhqPyDIaj8gyEI+muYDzHJo4vORq6G0l3iuI5as5g/l1rzkA4ku5wxHPUczMMRz03w3DUczMMxyaOEI7yj/+L44WNnoXN2ej51pwNZZZYH235ZtOnbCjzgY0N555DIxtKH29kQ+nNjWwo/baRTaNksyzPn7wuvf/PCw99tKeHHu1yivPKkdJD38CR0m/fwJHSm9/AkdPH4zlyen40x/XBmQ/wHDmzBJ4jZ+7Ac+TMKHiOTRwhHJVnMByVZzAclWcwHJVnMByVZyAcOffT3sBReQbDUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/IMhqPyDIQj557eGzgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXDk3BV8A0flGQxH5RkMR+UZDEf5ntccX3fvrJw7RfEcOXc4vsnxdSfCyrnD8QaOmjMYjk0cIRz13AzDUc/NMBzlHzEc5R//F8cLGz0Lm7Lh3LX49bbwN5u1n4B/f5y7Fm/gyJk73uO4rt8c98lzGc5dizdwbOII4ciZO/AcOXMHniNn7sBz5MwdeI6cGeU9jj/vR13zzC+OnLsWb+CoPIPhqDyD4ag8g+HYxBHCUXkGw1F55h2O08/hcO5avIGj8gyGo/IMhCPnrsUbOHLmme3nPcCtP15xNLw/0znzDJ4jZ555i+O5P2mcl2vXx3rl2MQRwpEzz+A5cuYZPEfOPIPnyJln8Bw588x7HM/nxefZJhw5d/rewFF5BsNReQbDUXnmJccvBu0bxzh+kfzL1V//xp9XfwmYcW/i7sJdecmHu/KVD3flMR/uym8+3JX3XLiT7n/256486cNd+dOHu/KqD/cm7i7clVd9uCuv+nBXXvXhrrzqw1151YP7RrqP3J+78qoPd+VVH+7Kqz7cm7i7cFde9eGuvOrDXf4dzN3QFr2Rbt/2pi4vg6b++htHG+kmZW/q8jEe1OViPKjrmbsHdT1x96Auv+5AnXS7NIz6haSen6NI6ok4iqRy4WuSy+P7adKyLTOSTSRBJJXfUCSVyVAklbNQJJWdUCSVhwwk92cR+LIuv79J/W/fNyLdT+3PXfnJh7vSlg93ZTMf7k3cXbgr9/lwV0r04a5M6cNdCdSHu/KqC/emvOrDXXnVh7vyqg935VUf7k3cXbgrr/pwV1714a686sNdedWHu/KqC/ddedWHu/KqD3flVR/u8pFg7pZvou5ykQ7UD81UNHXDd2cOTVQP6pqnHtT19NeDehN1B+p68utBXX7dg7r8+n+ifiGp57goknoyCyLZlQtfk1zX85vkfs5IKuuhSCq/oUgqk6FINpEEkVR2QpFUHjKQnL8T9G/fN+pKRD7clZ98uCttuXAfymY+3JXkfLgr9/lwV0r04d7E3YW7EqgPd+VVH+7Kqz7clVd9uCuvunA/lVd9uCuv+nBXXvXhrrzqw72Juwt35VUf7sqrPtyVV324K6/6cFde9eDetN8dzd3wTdT2aKLuQF0zFU399Xdn2kMT1YO65qkDde11d6GuZ78e1PXk14O6/LoH9Sbq/4X6haSe46JI6sksiqRyIYqksh6KpPIbiOSqTIYiqZyFIqnshCKpPIQi2UTyN8kLG6WWORvlkDkbJYs5G2WFORu5/ykb1s3z53OGr21bX0z8vo8/F/fz2np2xUhq5tEYSZ38OxiX5fhu8lku/67X5RdJUid/A8kmkiCSpL7/BpKkKeEGkqSZ4i2S6/L80V8PP85fJP/v1ZZ3gFn3pTtTJ81BvtRZd6U7U1cg86Cu/OZBXVnPg3oTdQfqypAe1JU3Pagrm3pQVzb1oK5s6kCddS+6M3VlUw/qyqYe1JVNPag3UXegrmzqQV3Z1IO6sqkHdWVTD+rKpg7UD2VTD+ry62jqhi6to4m6A3V5GI87jDyMB3V5GAfqXR7Gg7qer3tQ1/N1D+ry6x7Um6j/F+oXknpmjiKp5+AoksqFr0luj+e3eZetTUkq66FIKr+BSA5lMhRJ5SwUSWUnFEnlIQPJnwaztq+/SP7l6r6vz6vHhfuy71fuTdxduCs/+XBX2vLhrmzmw11Jzoe7cp8Ld9bN8+7clSl9uCuB+nBXXvXh3sTdhbvyqg935VUf7sqrPtyVV324K696cN8fyqs+3JVXfbgrr/pwV1714d7E3YW78qoPd+VVH+7Kqz7clVd9uCuvunBflFd9uCuv+nBXXvXhrrzqw72Juwt35VUf7sqrPtyVV324K6/6cFdedeG+Kq/6cFde9eGuvOrDXT4SzN3QBLmvcpEO1DfNVDT1191V+6aJ6kFd89SDup7+elBvou5AXU9+PajLr3tQl1//T9QvJPUcF0VST2Zfk/x6f/KJYx8PwJ2gKUN6UFeGRFNf12/qFxrneaWuDOlBXRnSg3oTdQfqypAe1JUhPagrQ3pQV95EUz/ak3rvM+rKpg7Ud2VTD+rKph7UlU09qCubelBvou5AXdn0Puqjzagrm3pQVzb1oK5s6kFd2dSB+qFs+pr68XieYzn27QX1f7r6wl3p1Ie78ima+9fzre970vFz9e/vsxxKqD7cm7i7cFdK9eGunOrDXUnVh7uyKpz78ZOx+phxV1p14d6VV324K6/6cFde9eGuvOrDvYk7mHs7j2/u528f+e+eGXdl2/ivkXJw/NdImRn+HkD/hnecj9mMUWb24a7M7MJ9KDP7cFdm9uGuzOzDXZnZh3sTdzT387ujsz/2GXflYB/uyrY+3JVXfbgrr/pwV1514X4qr/pwV16Fc1+/r+7rb//+754Zn8q28V8j5eD4r1HTawR+jcbj+/2xscz2WpzKzD7clZl9uCsz+3BXZvbhrszswf14KDP7cFdmhnNfv1vWx6V5+n9xVw724a5s68O9ibsLd+VVH+7Kqz7clVd9uCuvorn/w57df/XM+Hgo24Z/jRbl4PivkTLzB1+jC3dlZh/uysz/ifuFZBNJEEnOXNu+x9O6L/0FyX+6+kKSM6neQZIze75F8vz5IN/j+kG+8ctgcYbJG0ByJj48yJUzlt0AkjM73QCSMwzdAJIz3bwF8v8x+MbRlhnJJpIgkko3KJJKNyiSSjcokoo3KJLKNwaSx/mN43qOXyQ3BRwUSSUcFElFHBRJZRwUySaSIJLKOK9JLo9vHMv1e6O/SSrjoEgq46BIKuOgSCrjgEg2ZRwUSWUcA8njh+SYklTGQZFUxkGRbCIJIqmMgyKpjIMiqYxjINnaD8nf7z7836vP7fm44zwun6Fu7S/X9v35tkY/f75fsF4/RtgUnYK/QEpksV+gXUEv+Auk/Bj8BVIsDf4CKe0Gf4GaXqDYL5CyefAXSJE/+AukJwnBXyA9SXj9Aq3b91rntY3JQ7NdkR9E8lA2R5FUiEaRVNpFkVQsRZFsIvma5PL4IXnOSCrooUgqkU3LPw6FoTkbghxyUUuQFX7UdgI/f1FL4Lkvagl88UUtgXe9qG1Uagk84EUtgU+7qCVwXhe1VF6qU3mpQeWlRlIvdVGQ1B9dFCT1PBcFLb2CpN7koiCp37goiOwh2vcit9Gui9z+eudtx/Phcru+3fz7zhvZQ+DVRvYQcLVnZA+BVxvZQ+DVRvYbb6ldv/eh/zrFb7WRvQlebaNSG9nz4NVG9kd4tWW8lEltGS9lUlvGS637c96ufTJve+il1Hi1ZbyUSW0dL2VRW8dLWdQ2KrV1vJRFbR0vZVEb2ku19Vvtvv/3fNtDL5HFqw3tpdBqQy82xasN7aXeUWtIBT30Yk682tBeCq62UakN7aXgakN7KbjaMl7K4hxD71DEqy3jpSxqQ28jxKut46Usaut4KYvaOl7KorZRqa3jpSxq63gpi1oqLxV6YRteLZWXCr34DK82qZe6KEjqjy4Kknqei4KWXkFSb3JRkNRvXBQk9RAXBUl9wUVB0ln/oyD0Uh+bgvQzOfQSG5uC9DM59NIWm4L0Mzn0khKbgvQzOfT2DJuC9DM59P4Fm4L0Mzl0g79NQfqZHLoD3qYg/UwO3SJuU5B+JofuobYpCD2Te/9WcK6/FLx39Y/e0C3Nd+gNPe/f0Xvuz09CnWP79ZMvakN7A7ja0D4CrrZRqQ3tT+BqQ3sZuNrQvsc0VUL7HpOCML7n50xxGmcvZwrjHy5nCjPlL2cKM4svZwozMS9nCjPXLmcKM30uZwozIy5nCnPXv5wp4H08Ttvl5UwB7+NxWiYvZwp4H4/TBHk5U8D7eJy2xsuZAt7H47QkXs4U8D4ep3HwcqaA9/E47X2XMwW8j8dpwrucKeB9PE6r3OVMAe/jcRraLmeKdx8fcdrOLmeKdx8fcZrDLmeKdx8fj3j38RGnK+typnj38RGnd+pypnj38XFvh9PP77m3Penye5YP/Z71Q79n+9DvaR/6PfuHfs/xod/TP/R7xod+z4fuB+uH7gfrh+4H64fuB+uH7gfrh+4H64fuB+uH7gfrh+4H64fuB+uH7gfbh+4H24fuB9uH7gfbh+4H24fuB9uH7gfbh+4H24fuB9uH7gfbh+4H7UP3g/ah+0H70P2gfeh+0D50P2gfuh+0D90P2ofuB+1D94P2ofvB/qH7wf6h+8H+ofvB/qH7wf6h+8H+ofvB/qH7wf6h+8H+ofvB/qH7wfGh+8HxofvB8aH7wfGh+8HxofvB8aH7AeCbC+vRv3/PdY/rX5/d/9PVl1P1kKcanz2V4bsYA/A9APiZAN8DwJ9pCXimNeCZtoBnanee6fJ79k/8nvYIvfPrH7Zy/7efvG7n8jxz265XP/5y9fL1ls0TR9t/rl6Xv129P84/F+/LuFz7i3oTdQfqkb8HWpd65O+j1qUe+XuxdalH/i5vTurfxSv7r2t/UY/cu1KWeuhdfXWpR+6gqUs9chdOTurb+Ka+zagrm3pQb6LuQF3Z1IO6sqkHdWVTD+rKpnDqz0PvW5tRVzZ1oB5692ld6sqmHtSVTT2oK5t6UG+i7kBd2dSDurKpB3VlUw/qyqYe1JVNHaiH3iVdl7qyqQd1ZVMP6sqmHtSbqDtQVzb1oK5s6kFd2dSDurKpB3VlUwfqTdnUg7qyqQd1ZVMP6sqmHtSbqDtQVzb1oK5s6kFd2dSDurKpB3VlUwfqu7KpB3VlUw/qyqYe1JVNPag3UXegrmzqQV3Z1IO6/Ppr6uvy/NHLOs5X1A1dSIf8ugd1+XUP6vLrHtTl1z2oN1EHUze0Nxzy6x7U5dc9qOu9JA/qei/Jg7qyqQP1rmwKp/76OUxXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubOpAfSibelBXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubOpA/VQ29aCubOpBXdnUg7qyqQf1JuoO1JVNPagrm3pQVzb1oK5s6kFd2fTz1JeHsqkHdWVTD+rKph7UlU09qDdRd6CubOpBXdnUg7qyqQd1ZVMH6gupX1+eP3nd+uMl9Z8Gqq8j/ZB8/O1nGzozloXUrztTJ/XrztSbqDtQJ/XrztRJ/fqN1Nv6pP6r+/EXdVK/7kyd1K87Uyd9L8mX+kr6XtKN1F+38nyFXVF3oK5s6kFd2dSDehN1B+rKph7UlU3h1F8/X1+VTT2oK5t6UFc2daC+KZt6UFc29aCubOpBXdnUg3oTdQfqyqYe1JVNPagrm3pQVzb1oK5s6kC9KZt6UFc29aCubOpBXdnUg3oTdQfqyqYe1JVNPagrm3pQVzb1oK5s6kB9Vzb1oK5s6kFd2dSDurKpB/Um6g7UlU09qCubelBXNvWgrmzqQV3Z1IH6oWzqQV3Z1IO6sqkHdWVTD+pN1B2oy6+/pv71jPCJY13aK+qGLqRDft2Duvy6A/Uuv+5BXX7dg7r8Opq6oYGqy697UG+i7kBd7yV5UNd7SWjqhlaermzqQV3Z1IO6sqkD9aFs6kFd2dSDurIpnPrr5+tD2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQP1UNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdn089TXh7KpB3VlUw/qyqYe1JVNPag3UXegrmzqQV3Z1IO6sqkHdWVTD+rKpg7UF2VTD+rKph7UlU09qCubelBvou5AXdnUg7qyqQd1ZVMP6sqmHtSVTR2or8qmHtTl119Tf6ztG8c4XlF/3YX0xUnUHajLr3tQl1/3oC6/7kFdfh1N/XUD1brKrztQ3+TXPajrvSQP6novyYO6sima+usupHVrou5AXdnUg7qyqQd1ZVMP6sqmHtSVTeHUX7+r0ZRNPagrm3pQVzb1oK5s6kG9iboDdWVTD+rKph7UlU09qCubelBXNnWgviubelBXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubOpA/VA29aCubOpBXdnUg7qyqQf1JuoO1JVNPagrm3pQVzb1oK5s6kFd2dSBelc29aCubOpBXdnUgzqnX19+qC+9v6BuacHonA4cz5HTU+M5crpkPEdO3wvnODid7HscDf0Qg9Ob4jlyuk08R873NvAcmzi+5Gj47vlQnsFwVJ7BcFSewXBUnsFwVJ6BcDyVZwwcXz9/PJVnMByVZzAclWcwHJs4Qjgqz2A4Ks9gOCrPYDgqz2A4Ks8gOG4P5RkMR+UZDEflGQxH5RkMxyaOEI7KMxiOyjMYjsozGI7KMxiOyjMQjovyDIaj8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQjHVXkGw1F5BsNReQbDUXkGw7GJI4Sj8gyGo/IMhqPyDIaj8gyE40bpH5dzf37Ff32s6yuOr/sAto3SP97AkdI/3sCxiSOEI6V/vIEjpX98k+PrXoVto/SPN3Ck9I83cKR8Ho7n2Cifh7/J8fX32LemPIPhqDyD4ag8g+HYxBHCUXkGw1F5xsDx9fPHpjyD4ag8g+GoPAPhuCvPYDgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXDk3Kp+A0flGQxH5RkMR+UZDMcmjhCOyjMYjsozGI7KMxiOyjMYjsozEI6cm7hv4Kg8g+GoPIPhqDyD4djEEcJReQbDUXkGw1F5BsNReQbDUXkGwpFzH/sNHJVnMByVZzAclWcwHJs4Qjhy+sexPJ4CRz9ecTT0AXDuv76BI6d/hHPk3H99A0dO/4jnyOkf3+No6FXg3H99A8cmjhCOnM/D8Rw5n4e/x9HwPXbO/dc3cFSewXBUnkFwbJz7r2/gqDyD4ag8Y+D48vlj49x/fQPHJo4QjsozGI7KMxiOyjMYjsozGI7KMxCOnPuvb+CoPIPhqDyD4ag8g+HYxBHCUXkGw1F5BsNReQbDUXkGw1F5BsKRc//1DRyVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPQDhuyjMYjsozGI7KMxiOyjMYjk0cIRyVZzAclWcwHJVnMByVZzAclWcgHEn3seM5cvrHY2tPgf3RX3F83QfQSPdf4zly+kc8R07/iOfI6R/xHDn943scDd/TJN1/DedIuv8az5HzeTieI+fzcDxH5RkMxyaOrzm+ztek+6/xHJVnMByVZzAclWcwHJVnIBxJ91/jOSrPYDgqz2A4Ks9gODZxhHBUnsFwVJ7BcFSewXBUnsFwVJ6BcCTdf43nqDyD4ag8g+GoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReQbCkXT/NZ6j8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQhH0n3seI7KMxiOyjMYjnX84/e3XI5jefGTt3P5c+12/j7FhUwdR4gmU8fjocnUcW1oMnV8GJbMXmgzNJpMHa+EJlPH/aDJ1Hk+iybTRGZCRh54RobSA7f12W/TWpuRofTAJjKUHthEhtIDW8gU2ib8Dpnlh8w+I0PpgU1kKD2wiQylBzaRaSIzIUPpgU1kOD3w8nyjoS1TMpwe2EKG0wNbyHB6YAOZQhto0WRIPbCBDKkHNpAh9cAGMk1kJmRIPbCBjDzwjIw88IyMPPCMjDzwhEyhraVoMvLAMzLywDMy8sAzMk1kJmTkgWdk5IFnZOSBZ2TkgWdk5IEnZAptukSTkQeekZEHnpGRB56RaSIzISMPPCMjDzwjIw88IyMPPCMjDzwhU2hbJ5qMPPCMjDzwjIw88IxME5kJmch+Zmn7k8xyPl6QsXzPLfR2P7zayL4Drjb0pjy82sj+AK828szHq408x/FqI89mvNrIz5zwaiM/R8KrpfJSoTeLvaXW8s3l0Pu/4GpDb+nCqy3jpUxqy3gpy7c6Q++lwqttVGrLeCmT2jJeyqS2jJcyqa3jpQzPHEPvHoKrDb0hCK+2jpeyqC3kpQxqC3kpg9pGpbaQlzKoLeSlDGoLeSmDWiovFXrvCVxt6O0keLVUXir0pg+8WiovdTYqtVReKvT+FLxaKi8Ves8JXi2TlzpC7yPBq2XyUkfovSF4tUxe6ng0KrVMXuoIvYcDr5bJSx2h92Xg1VJ5qdB7LfBqqbxU6P0TeLVUXir0ngi8WiovFXqfA15t5Hn7OL6/4bg8xgu1hs+eH6E79PFqI89bvNrI8xavNvK8xauNPG/xaiPPW7zayPMWrzbyswu82sjPLvBqqbxU6C72t9Qavv10hO5Xx6st46VMast4KZPaVkbt62/IHKH7yvFqy3gpk9oyXsqktoyXMqkt46UsakN3er+p9vUzx9A93Xi1dbyURW0dL2VR26jUFvJSBrWFvJRBbSEvZVBbyEsZ1BbyUq/Vhu6Gxqul8lKhO5zxaqm8VOiuZbxaKi+1U3mp0N3YeLVUXip0NzZcbehubLxaKi8Vuhsbr5bKS4XuxsarpfJSobux8WqpvFTobmy8WiovFbobG6+WykuF7sbGq6XyUqG7sfFqqbxU6G5svFoqLxW6GxuuNnJ/cu/nc/lgP1+qHevzs+djnX32PHJ/8g1qA8/bG9QGnrc3qA08b29QG3jevqm2PT/VOfp4dbdvz/v3mH4CNHLXsjOZwHPcmUzg5ye+ZCL3PTuTqeMT0WTqeEo0mTr+8w0yb21MP561LG0sM4pNFAEU6/hlT4qUPhxOkdKzwylS+ns4RcosAKbYI3ebJ6JImTHgFCnzCJyisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxci7BBJRVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKgGHkvSyKKyi4IisouCIrKLgiKcjovrjVsquiRt5DkoRh5A0aQf9Gvv6fXI2/WSERR0wVBsYkigKKejCEo6skYgqL8IsB1R960koiinowBKEbeDJOIorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxcibmBJRVHZBUOTMLm+cYuvPn7uNx8+1rV0pcmYXNMUmiv987fl97bld1O2PK0XO7IKmyJld0BQ5swuaImd2QVPkzC5gipE3nyWiyJld3qH42L4pHr8o/uXa7XmG8zh/ecu/qNt/xLXva9dfL44iUeAXR0kr8IvT9OLEfXGUCwO/OIqbgV8cpdjAL47CceAXR5k77osTefGmXhw9IQj84ugJwasXZ/8BPiYPwSKvS01EsYkigKLCMYKiUiyCouImgqJyIYKiAhyA4lDSQlBUJPp17YWM8siMjDLGjEwTmQkZZYEZGfn7GRl59hkZ+fAZGXnrCZlKa6pfrhHulVZPG9QW8qoGtYX8p0Fto1JbyCca1Bbyfga1hfycQW0hj2ZQW8h3vVQ7Kq3uNahl8lKj0ipcg1omLzUejUotk5calVa1GtQyealRafWpQS2Vl6q0StSglspLVVrNaVBL5aUqrbo0qKXyUpVWRxrUUnmpSqsYDWqpvFSl1YYGtVReqtKqQINaKi+1Niq1VF5qpfJSlZZIGtRSeamVykttVF6q0sJNg1oqL1VpgaVBbaNSS+WlKi1uNKil8lKVFiEa1FJ5qUqLBQ1qqbxUpUV9BrVUXqrS4juDWiovVWmRnEEtlZeqtJjNoJbKS1VadGZQS+WlKi0OM6il8lKVFnEZ1FJ5qUqLrQxqqbxUpUVRBrVUXqrS4iWDWiovVWnjkEEtlZeqtBPHoJbKS1Xa2mJQS+WlKu0Vea2WdN3AG8vUt3P5c+12rjOKnD2caIqcnZ1oik0UARQ5u0DRFDl7Q9EUOTtG0RQ5+0jRFDm7S8EUSfcCoCkquyAoKru8uLatz5/bWptRVHZBUGyiCKCo7IKgqOzyiuLyQ3H2fJF0PwKaorILgqKyC4BipR0NjhSVXRAUlV1eUny+B9iWKUVlFwTFJooAisouCIrKLgiKyi4IisouCIrKLv+d4llpJ4ojRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AipV2EDlSVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKgWGnnlyNFZRcERWUXBEVlFwTFJooAisouCIrKLgiKyi4IisouCIrKLgCKlXbsOVIM7RcfTwG9H/sLiobv1J+x97vB1Yb2X3C1oX0SXG1oPwNXG9p3wNWG9gdotbH3u8HVhn5WCFcb+pkeXC2Vl4q93+0dtYbWkTP2fje42jJeyqS2jJcyqS3jpQxNBGfs/W5otbH3u8HVlvFSJrVlvJRJbRkvZVLb6qh9/cwx9n43uNo6Xsqito6Xsqgt5KUMagt5qddqY+93g6st5KUMagt5KYPaQl7KoLZRqaXyUrH3u8HVUnmp2Pvd4GqpvFSn8lKxd/fB1VJ5qdi78OBqG5VaKi8VewccXC2Vl4q9Uw2ulspLxd5RBldL5aVi7/yCq6XyUrF3aMHVUnmp2Dup4GqpvFTsHU9wtVReKvbOJLhaKi8VewcRXG3keXs81qfa42gv1Fo+ex56jwpebeR5i1cbed7i1Uaet2C1+yP0ng+82sjzFq828rzFq4387AKvtlGpJfJSX2rLeKnX3376UlvGS5nUlvFSJrVlvJRFbei9A++pffkNmS+1ZbyUSW0ZL2VSW8ZLmdQ2KrVlvJRJbR0v9fKZ45faOl7KoraOl7KoreOlDGpD96Dj1RbyUga1hbyUQW0hL2VQ26jUFvJSBrVUXip0PzVeLZWXCt33DFcbupcZr5bKS21UXip0NzZebaNSS+WlQndj49VSeanQ3dh4tVReKnQ3Nl4tlZcK3Y2NV0vlpUJ3Y+PVUnmp0N3YeLVUXip0NzZeLZWXCt2NjVdL5aVCd2Pj1VJ5qdDd2Hi1kedtW7+3Gu7X7YN/32q4Pj97PtbZZ89D9yfj1Uaet3C1ofuT8Wojz1u82sjz9j21b+xeHe15/x7TT4CG7lr2JRN5jvuSifz8xJdM5GctvmTq+EQ0mTqeEk2mjv+8aWP6/MQ/FEN3WeehWMcve1Kk9OFwipSeHU6xiSKAImUWgFOkzA1wipQZA06RMo/AKSq7ACiG7o7PQ1HZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorILgGLoXQ15KCq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHb57xSX0Htv8lBUdkFQVHZBUFR2QVCU03lxrWGDzxJ6y0saiqE3jISgaPj+8hJ6c0keipouCIpNFAEU9WQMQVFPxhAU5RdfUTz2J8WxzCjKLyIo6skYgGLozTt5KCq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUAy96SoPRWUXBEXO7PLGKdZ9ff7gdd8el1PsV46c6QXPsYnjP1+7Pb5/8PbYx4wjZ4LBc+TMMHiOnCkGz5Ezx+A5ciYZOMfQm+YyceRMM29xHNs3x+un8X5zVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDzziuOyPB/jbl/QZhyVZyAcQ297zMRReQbDUXkGw1F5BsOxiSOEo/LMOxy3ZcZReQbDUXkGw1F5BsNReQbCsdA2XQjHCxkllBkZZY4ZGaWIGZkmMhMycvozMvLuMzJy4zMy8tczMoUc88udxEulbboGtYW8qkFtIf9pUFvIUxrUNiq1hbyfQW0hP2dQW8ijGdQW8l0GtVReqtJ2T4NaKi9VaVumQS2Vl6q0fdKglspLVdrmaFBL5aUqbUc0qKXyUpW2DRrUUnmpStv7DGqpvFSlbXgGtVReqtJ2OYNaKi9VaVubQS2Tl1orbT8zqGXyUmulbWIGtUxean00KrVMXmp9MHmptdKeOYNaJi+1Pqi81ELlpSrt5DOopfJSlXbcGdQ2KrVUXqrSbjeDWiovVWlXmkEtlZeqtHvMoJbKS1Xa5WVQS+WlKu3GMqil8lKVdk0Z1FJ5qUq7mwxqqbxUpV1IBrVUXqrSbiGDWiovVWlPj0EtlZeqtPPGoJbKS1XaH2NQS+WlKu1iMail8lKV9poY1FJ5qUo7QgxqqbxUpX0bBrVUXqrS7gqDWiovVWkPhEEtlZeqtFPBoJbKS1XaT2BQS+WlKnX9G9RSealKvfkGtVReqlIHvUEtlZeq1BVvUEvlpSp1uhvUUnmpSt3rBrVUXqpSR7pBLZWXouo9X6l6z1eq3vOVqvd8peo9X6l6z1eq3vOVqvd8peo9X6l6z1eq3vO1Ujf2G5uTtvF9iuXFtdu5/Ll2O9cZxUJz3JEi5048NEXO/Xloipy79tAUOffyoSlybr0GU6zUwe5IkXM/Npoi5y5tNEVlFwTFJor/fG1bnz+3tTajqOyCoKjsgqCo7IKgqOzyiuLyQ3H2fLHSbgI3ilulnQeOFJVdEBSVXRAUlV0QFJsovqL4fA+wLVOKyi4IisouCIrKLgiKyi4IisouAIqVdow4UlR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoFhpp48jRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AipV2aDlSVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKgWGlnnSNFZRcERWUXBMXIfnE9nxf37RyvKK7P79SPdZ2pjezr8Goj+y+82sg+Ca82sp+Bqw293+09tW/c6w09kVvoXXC+ZCL7A18ykZ9X+pJpIjMhU8cnosnU8ZRoMnX8510J7difCW0sM4p1fK0nxTp+2ZFi6N2AeShSenY4RUp/D6dImQXgFJsoAihSZgw4Rco8Aqeo7IKgqOyCoKjsAqAYehdnHorKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABRD777NQ1HZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4Bi6G2wISgaNnBuobfB5qGo6fLqX7The3qhN3DmoajpgqCoJ2MIinoy9t8pttAbOPNQlF/87667hd7AmYeinowhKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUAy9gTMPRWUXBEVlFwRFZRcExSaKAIrKLgiKnNnljVMsj3P7hnG2yyn2K0fO9ILnyJlf3uF4tPUJ49iXGUfOBAPnGHoTZyaOnCkGz5Ezx+A5ciYZPMcmjhCOnGnmLY69fXMc24yj8gyGo/IMhqPyDIaj8gyEY+jtnJk4Ks9gOCrPvMPxfMw4Ks9gODZxhHBUnsFwVJ7BcFSe+XXthYwSyoyMMseETOg9mb5klAtmZOT0Z2Tk3WdkmshMyMhfz8gUcswvd1C1QjtQLWoLeVWD2kL+87XaSjtQDWoL+USD2kLez6C2kJ8zqG1Uagv5LoNaKi9VaZ+nQS2Vl6q0H/O12kp7LA1qqbxUpb2QBrVUXqrSnkWDWiovVWlvoUEtlZeqtAfQoJbKS1Xaq2dQS+WlKu2pM6il8lKV9r4Z1FJ5qUp71AxqqbxUpb1kBrVUXqrSni+DWiovVWlvlkEtlZeqtIfKoJbKS1Xa62RQS+WlBpWXGlRe6qTyUpU2fhnUUnmpk8pLnY1KLZWXqrTFzKCWyktV2gpmUMvkpfZKW7YMapm81F5pa5VBLZOX2h+NSi2Tl9orbVUyqGXyUnulLUUGtVReqtLWH4NaKi9VaYuOQS2Vl6q0lcaglspLVdryYlBL5aUqbUwxqKXyUpW2jxjUUnmpSps8DGqpvFSlrRgGtdrc/OLa7Vz+XLud64yiNjcjKGpzM4Ai6ZYANEVtbkZQ1OZmBEVtbkZQbKIIoKjNzQiKnJsB0BSVXRAUlV1eXNvW589trc0oKrsAKJLuJkBTVHZBUFR2eUVx+aE4e75Iuh8BTbGJIoCisguCorILgqKyC4KisstLis/3ANsypajsAqBYaQeGI0VlFwRFZRcERWUXBMUmigCKyi4IisouCIrKLgiKyi4IisouAIqVds44UlR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoFhpx5MjRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AipV2qjlSVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgGNkvLo/nMfp67K8ors/v1I91nagNvd8Nrzay/8KrjeyT8Goj+xm82lZG7Rv3ektPZOhdcL5kIvsDXzKRn1f6kon8DNKXTB2fiCVzhN5z50umjv+8KaGZKNbxtZ4U6/hlT4pNFAEUKT07nCKlv4dTpMwCcIqUuQFOkTJjoCmG3hWZh6KyC4KisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMXQu1nzUFR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoBh6v3MeisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFENvgw1B0bCx/Qi9DTYPRU2XF9caeh2O0Bs481DUdAFQDL2BMw9FPRlDUNSTMQRF+cVXFI/9SXEsM4pNFAEU9WQMQVFPxhAUlV0QFJVdEBSVXQAUQ2/gzENR2QVBUdkFQVHZBUGxiSKAorILgqKyC4KisguCImd2eeMU45viOI7va9fHeaXImV3AFENv4AxBcWnr9oTRtsvV5/XfdOgdnJk4cuYXPEfOBIPn2MQRwpEzxeA5cuYYPEfOJPMWx619c2zbjKOyDIaj0gyEY+itnJk4Ks9gOCrPYDgqz2A4NnF8xfH85rg/phyVZzAclWcwHJVnMByVZzAclWcgHAtto/XlqDzziuP+2L85Lm3GUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/LMS//YHz8c9xlH5RkEx865CXl+igsZJZQZGWWOGRmliBmZJjITMnL6MzLy7jMycuMzMvLXMzKFHPPLdsReaaOuQW0hr2pQW8h/GtQW8pQGtY1KbSHvZ1BbyM8Z1BbyaAa1hXyXQS2Vl6q04dOglspLVdqYaVBL5aUqbaA0qKXyUpU2OhrUUnmpShsSDWqpvFSljYMGtVReqtIGP4NaKi9VaSOeQS2Vl6q0Yc6glspLVdrYZlBL5aUalZdqVF6qUXmpSrv8DGoblVoqL9WovFSlvYcGtVReqtIewddqK+37M6il8lKV9ucZ1FJ5qUr76AxqqbxUpf1uBrVUXqrSvjSDWiovVWn/mEEtlZeqtM/LoJbKS1Xaj2VQS+WlKu2bMqil8lKV9jcZ1FJ5qUr7kAxqqbxUpd1CBrVUXqrSnh6DWiovVWnnjUEtlZeqtD/GoJbKS1XaxWJQS+WlKu01Mail8lKVdoQY1FJ5qUr7NgxqqbxUpd0VBrVUXqrSHgiDWiovVWmngkEtlZeqtJ/AoJbKS1Xq+jeopfJSlXrzDWqZvNSo1EFvUMvkpUalrniDWiYvNR6NSi2TlxqVutcNapm81KjUkW5QS+WlqHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3no1I39vlU28eLn3xs4/sUy4trt3P5c+12rjOKhea4I8VC/sCRYiHf4UexUve4I8VCPsmRYiH/5UixkK9zpNhEEUCx0DM9R4rKLgiKyi4vrm3r8+e21mYUlV0QFJVdABQrdf07UlR2eUVx+aE4e75YaTeBI0VlFwTFJooAisouCIrKLgiKyi4vKT7fA2zLlKKyC4KisguAYqXdGo4UlV0QFJVdEBSVXRAUmygCKCq7ICgquyAoKrsgKCq7ICgquwAoVtpl40hR2QVBUdkFQVHZBUGxiSKAorILgqKyC4KisguCorILgqKyy3+neFbaHeVIUdkFQVHZBUFR2QVBsYkigKKyC4KisguCorILgqKyC4KisguAYqVdbY4UlV0QFJVdEBSVXRAUmygCKCq7ICgG9ovH2Z4X98c+XlFcn9+pH+s6UxvY1+HVRt7vdoPawD7pBrWB/cwNagP7jjfVvnGvN/REnpF3wTmTCewPnMkEfl7pTCbwM0hnMnV8IppMHU8JJhN5J959ZN5KaMf+TGhjmVGs42s9Kdbxy54UKX04nGITRQBFSn8Pp0iZBeAUKXMDnCJlxoBTpMwjaIqRd1AmoqjsgqCo7IKgqOyCoNhEEUBR2QVBUdkFQVHZBUFR2QVBUdkFQDHyztdEFJVdEBSVXRAUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrsAKEbe75yIYhPFf77WsIHzjLwNNhFFTZdX/6IN39OLvIEzD8XIGzgTUdSTMQRFPRlDUNSTMQTFJor/3XVH3sCZiKKejCEo6skYgqKyC4KisguAYuQNnIkoKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHZBUFR2QVDkzC7vdF2Ox/MQV4pHv1CMvIEzEUXO7PLGKZZlf/6TXpajzThyphc8R878gufYxBHCkTPD4Dlyphg8R84cg+fImWTe4vgDYzmPGUdlGQDH4xF5J2cqjsozGI7KMxiOyjMYjk0cIRyVZ97guD62GUflGQxH5RkMR+UZDEflGQjHyHs6PTheyCihzMgoc8zIKEXMyDSRmZCR05+RkXefkZEbn5GRv56RKeSYX+2fOh6F9p9a1Bbyqga1hfynQW0hT2lQ26jUFvJ+BrWF/JxBbSGPZlBbyHcZ1FJ5qUq7PA1qqbxUpd2YBrVUXqrSrkmDWiovVWl3o0EtlZeqtAvRoJbKS1XaLWhQS+WlKu3qM6il8lKVdt8Z1FJ5qUq75AxqqbxUpd1sBrVUXqrSrjODWiovVWl3mEEtlZeqtIvLoJbKS1XabWVQS+WlKu2KMqil8lKVdi8Z1FJ5qYPKSx1UXqrSti+DWiovdVB5qYPKS1XajGZQS+WlKm0aM6il8lKVNncZ1FJ5qUqbsAxqqbxUpc1SBrVUXqrSpiaDWiovVWnzkUEtlZeqtEnIoJbKS1XazGNQS+WlKm26Mail8lKVNscY1FJ5qUqbWAxqqbxUpb0mBrVUXqrSjhCDWiovVWnfhkEtk5daSHcFvLGFbzuXP9du5zqjqK3NCIra2oygqK3NCIpNFAEUtbUZQVFbmxEUtbUZQVFbmxEUOTcDgCmS7gVAU1R2eXFtW58/t7U2o6jsgqCo7IKg2EQRQFHZ5RXF5Yfi7Pki6X4ENEVlFwRFZRcERWUXAMVKux8cKSq7vKT4fA+wLVOKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABQr7VpxpKjsgqCo7IKgqOyCoNhEEUBR2QVBUdkFQVHZBUFR2QVBUdkFQLHSbiNHisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFCvtEnOkqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVAMfR+t34+j3Gcj/6K4vr8Tv1Y15nayL4Or7ZRqY3sk/BqI/sZvNrIvuM9tW/c6y09kaF3wfmSiewPXMmE3jHnSybyM0hfMnV8IppMHU+JJtMYybyV0I79mdDGMqNYx9d6Uqzjlz0pUvpwOEVKzw6nSOnv0RRD70jMQ5EyN8ApUmYMOEXKPAKn2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVAMfRO0jwUlV0QFJVdEBSVXRAUmygCKCq7ICgquyAoKrsgKCq7ICgqu/x3imvo/c55KCq7ICgquyAoKrsgKDZRBFCU03lxrWED5xp6G2waiqE3cMb4F/36e3pr6A2ceShquiAo6skYgqKejCEo6skYgqL8IsB1h97AmYZi6A2ceSjqyRiCorILgqKyC4JiE0UARWUXBEVlFwRFZRcERWUXBEVlFwDF0Bs481BUdkFQVHZBUOTMLm+cYnmc2zeMs11OsV85NnGEcOTML+9wPNr6hHHsy4wjZ4LBc+TMMHiOnCkGz5Ezx8A5ht7HmYkjZ5bBc+RMM29x7O2b49hmHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPvMPxfEw4ht7RmYmj8gyGo/IMhqPyDIZjE8frtRcySigzMsocMzJKETMyygUzMnL6EzKHvPuMjNz4jIz89YxMIcf8cgfVWmgHqkVtIa9qUFvIfxrUFvKUBrWFfKJBbSHv91ptpf2jBrWFPJpBbSHfZVBL5aUq7fM0qKXyUpX2YxrUUnmpSvsmDWqpvFSl/Y0GtVReqtI+RINaKi9Vab+gQS2Vl6q0r8+glspLVdp/Z1BL5aUq7ZMzqKXyUpX2sxnUUnmpSvvODGqpvFSl/WEGtVReqtI+LoNaJi+1VdpvZVDL5KW2SvuiDGqZvNT2aFRqmbzU9mDyUtuDyUttlTZ+GdRSeamFykstVF6q0nY0g1oqL1Vp25hBLZWXqrS9y6CWyktV2oZlUEvlpSptlzKopfJSlbY1GdRSealK248Maqm8VKVtQga1VF6q0nYeg1oqL1Vp241BLZWXqrQ9xqCWyktV2sViUEvlpSrtNTGopfJSlXaEGNRSealK+zYMaqm8FOmugDc28W3n8ufa7VxnFLW5GUFRm5sRFLW5GUFRm5sRFLW5GUCRdD8AmqI2NyMoanMzgiLnZgA0xSaKAIrKLi+ubevz57bWZhSVXRAUlV0QFJVdEBSVXV5RXH4ozp4vku5HQFNUdkFQVHZBUFR2QVBsogigqOzykuLzPcC2TCkquyAoKrsgKCq7ICgquwAoVtoF4khR2QVBUdkFQVHZBUGxiSKAorILgqKyC4KisguCorILgqKyC4Bipd07jhSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7AChW2nXlSFHZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorLLf6fYKu2Wc6So7IKgqOyCoKjsgqAY2S8e30VpxzHGC4qG79S30Pvd8Goj+y+82sg+Ca429H43vNrIvgOvNrI/wKuNPMfxahuV2sjP9PBqqbxU6P1ub6k1tI600Pvd8GrLeCmL2tD73fBqy3gpQxNBC73fDa+2jJcyqW1Uast4KZPaMl7KpLaOlzI8cwy93w2vto6XMqgNvd8Nr7aQlzKoLeSlDGoLeSmD2kaltpCXMqgt5KUMaqm8VOj9bni1VF4q9H43vFoqL9WovFSj8lKhd/fh1VJ5qdC78PBqqbxU6N1yeLVUXir0rja8WiovFXr3GV4tlZcKvUsMr5bKS4XezYVXS+WlQu+6wqul8lKhd0fh1VJ5qdC7mPBqqbxU6N1GeLVUXir0fpZ9254X7/3VtyHBe3Rb6J0rrmRC71HxJRN55vuSiewPfMlE9hK+ZJrITMhE9ii+ZCI/G/IlE/k5ki8ZeeAZGUoPbPk2XOh9HL5kKD2wiQylBzaRofTAlm94hd5v4UuG0gObyFB6YBMZSg9sIkPpgU1kOD2w4b2D0HsdfMlwemALGU4PbCFD6oENZJrITMiQemADGVIPbCBD6oENZEg9sIGMPPDfyeyh9wP4kpEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IRN6p4QvGXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sATMqF3gfiSkQeekZEHnpGRB56RaSIzISMPPCMjDzwjIw88IfPxfRzYb67tH9+wgT7/mvz8W/Lzt+Tn35Of/0h+/p78/CP5+c/c52/J528LPH8N30jdW+D5azp/4PlrOn/g+Ws6f+D5a/jW294Cz1/T+QPPX9P5A89f0/kDz1/L+ffA89d0/sjz1/D8YY88fy3njzx/LeePPH8t5w89fw3nDz1/DecPPX8N5w89fw3nDz1/X5//CD1/DedPPn+P5PP3SD5/P965jj5/8vl7JJ+/R/L5eySfv0fy+duTz9+efP725PO3J5+/H+8eR58/+fztyedvTz5/e/L525PP35F8/o7k83ckn78j+fz9eO8x+vzJ5+9IPn9H8vk7ks/fkXz+InpKl/V5/mXvwPNbPn+FaBN1PX9Lfv49+fmP5Ofvyc8/kp//TH3+A9Hr6Hr+Jfn5c8/f4xF4/ho+v3o8As9f0/kDz1/T+QPPX9P5A89fw+cnj0fg+Ws6f+D5azn/Enj+ms4feP6azh94/prOH3n+vn7+cCC6zlzPH3n+Ws4fef5azh96/hrOH3r+Gs4fev6+Pv8aev4azh96/hrOH3r+Gs6ffP4iepZcz598/q7J5++afP6uyefvmnz+bsnn75Z8/m7J5++WfP4i+pdcz598/m7J5++WfP5uyefvlnz+tuTztyWfvy35/G3J5y+if8n1/Mnnb0s+f1vy+duSz9+WfP7uyefvnnz+Avp/Ht9HWh9jA57f8vkrQP+P7/mP5Ofvyc8/kp//zH1+QP+P7/mX5Odfk59/S37+5PP3CDx/LZ9fPQLPX9P5A89f0/kDz1/T+QPPX8vnJ3vg+Ws6f+D5azp/4PlrOn/g+Ws6f+D5azp/5PlreP7QI89fy/kjz1/L+SPPX8v5Q8/f1+cfoeev4fyh56/h/KHnr+H8oeev4fyh56/h/Mnn70g+f0fy+TuSz9+RfP6eyefvmXz+nsnn75l8/gL6l3zPn3z+nsnn75l8/p7J5++Ze/72R+752x+5529/5J6//ZF7/vZH7vnbH7nnb3/knr/9kXv+9kfu+dsfyefvknz+Lsnn75J8/i5p5+/o5//392+/9/NZSH2Oy+HPn//t/Ff/29+/6/36f1v+3f+2vvu/fb2ix/+3/v0bNX2c3//f4/qC/vx/x7/8//q//P/Gv/z/zn/3//39mwqG/2/5l//ff74zzK/9+SXbJ35J+6+/ZDn355/tcvbzxT2iHfvz3/1Y/ve/+z9H2uMd6Yh3pB7vSOPOI/38mvMjv+a/f/rd9muWz/ya9TO/ZvvMr2mf+TX7Z37N8Zlf0z/zaz6cGpfH9vj+0cfFS7bLmPv0R4FNh/r053tth1oiHipwEjvW4/va9e+DMfIHcS3Hb7mPH/gxqOX4gZ+CWo4f+CGo5fiBn4Fajh/4Eajh+JE/gWs5fuAHoJbj5566kT9+azl+7qkb+cO3luPnnrqRP3prOX7uqRv5g7eG40f+3K3l+LmnbuRP3VqOn3vqRv7MreX4uadu5E/cWo6fe+pG/rzt6+NvkT/u+Y91LX+On7Xt58/xs37Y8M/xs37W8M/xs37U8M/xs37S8M/xs37Q8P9//LSfM/xz/MgfM3z5qYkt9KcMDceP/CFDw/Fb7uNHnrqG40eeuobjR566huNHnrqG40eeuq+Pv0aeuobj5566a+6pu+aeuoDNjq7Hzz11109P3emzm393/J77+CPu8ZfHvn8f47j0ql4+jLetZ3IB2yO7gCW7gDW7gC27gJZdwB5ZwOvPNG9b4ClsExBmDv8cKcxs/TlSmGn5faQWZv79HOnDq5qWZXkKWJbt8k2WY7scao14qC3ioVrEQwVeP2j5JxF4+6Dl+IGXD1qOH3j3oOX4gVcPGo4fefOg5fiBFw9ajh9476/l+IHX/lqO33IfP/fU3XNP3T331N1zT90999Q9ck/dI/fUPXJP3SP31AXsenQ9fu6pe+SeukfuqXvknrpH7qnbc0/dnnvq9txTt+eeuoBmGdfj5566PfB93/CNox74vm84/gh85zF862IEvvNYjh/4zmM5fuA7j+X4gf2+5fiB/b7l+IHv+4YPUI7A933D8c/Aft9y/MB+33L8yFPXcPzIU9dw/MhT13D8yFPXcPzIU9dw/MhT13D83FP3TD112yP11G2P1FO3PVJP3fb49NSFfuOoPVru4+9xj788+vcHUR/nRcDlg6jtcWQX0LMLGNkFnMkFLI/sApbsAtbIAtr5I2D9JeD/Xt3P55eTxuNy7TguYgNPbLzYwPMdLzayG/j1tZTZv8PIbsAkILIbMAmI7AZMAiK7AYuANbIbMAmI7AZMAiK7AcO3+9oaecKbBESe2iYBaSbxTECaSTwTEGYS/xwpzGz9OVKYafl9pC3M/Ps5EmCijedvWde2vzjSsm/Pn7y3yZHWeEfa4h2pxTvS/tkjYT8X2QDNLK7H77mPP3If/0x9fEA3jOvxl9zHX3Mff8t9/Jb7+Lmnbss9dVvuqdtyT92We+ruuafunnvq7rmn7p576iL6bjyPn3vq7rmn7p576u65p+6ee+oeuafukXvqHrmn7pF76iL6bjyPn3vqHrmn7pF76h65p+6Re+r23FO35566PffU7bmnLqLvxvP4uaduzz11e+6p23NP3Z576o7cU3fknroj99QduacuouvJ8/i5p+7IPXVH7qk7ck/dkXvqnrmn7pl76p65p+6Ze+oiup48j5976p65p+6Ze+qeuafumXrq7o/UU3d/pJ66+yP11N0fqafu/kg9dfdH6qm7P1JP3f2Reuruj9RTd3/knrpL7qm75J66S+6pu+SeuogGJs/j5566S+6pu+Seukvuqbvknrpr7qm75p66a+6pu+aeuogGJc/j5566a+6pu+aeumvuqbvmnrpb7qm75Z66W+6pu+Weup/um0IfP/fUzd1Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m+rI3U115O6mOnJ3Ux25u6mOR+qpe+Tupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5uq5+6m6rm7qXrubqqeu5uqP1JP3Z67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupRu5uqpG7m2rk7qYaubupxiP11B25u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbub6szdTXXm7qY6c3dTnbm7qc5H6ql75u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m2p55C6n+jp/6rn7df7Ug/fr/Kkn79f5U4/er/Onnr1f5089fL/On3r6fp0/9fj9On/y+Zu7purr/Mnnb+6iqq/zJ5+/uauqvs6ffP7mLqv6On/y+Zu7rurr/Mnnb+7Cqq/TJZ+/uSurvk6XfP7mLq36Ol3y+Zu7turrdMnnb+7iqq/TJZ+/uaurvs6ffP7mLq/6On/y+Zu7vurr/Mnnb+4Cq6/zJ5+/uSusvs6ffP7mLrH6On/y+Zu7xurr/Mnnb+4iq6/zJ5+/uausvs6ffP7mLrP6On/y+Zu7zurr/Mnnb+5Cq6/zJ5+/uSutvs6ffP7mLrX6On/y+Zu71urr/Mnnb+5iq6/zJ5+/uautvs6ffP7mLrf6On/y+Zu73urr/Mnnb+6Cq6/zJ5+/uSuuvs6ffP7mLrn6On/y+Zu75urr/Mnnb+6iq6/zJ5+/uauuvs6ffP7mLrv6On/y+Zu77urr/Mnnb+7Cq6/zJ5+/uSuvvs6ffP7mLr36On/y+Zu79urr/Mnnb+7iq6/zJ5+/uauvvs6ffP7mLr/6On/y+Zu7/urr/Lnn75K8/2pJ3n+1JO+/WpL3Xy2P3PN3Sd5/tSTvv1qS918tyfuvluT9V0vy/qslef/Vkrz/aknef7Uk779akvdfLcn7r5bk/VdL8v6rJXn/1ZK8/2pJ3n+1JO+/WpL3Xy3J+6+W5P1XS/L+qyV5/9WSvP9qSd5/tSTvv1qS918tyfuvluT9V0vy/qslef/Vkrz/aknef7Uk779akvdfLcn7r5bk/VdL8v6rJXn/1ZK8/2pJ3n+1JO+/WpL3Xy3J+6+W5P1XS/L+qyV5/9WSvP9qSd5/tSTvv1qS918tyfuvluT9V0vy/qslef/Vkrz/aknef7Uk779akvdfLcn7r5bk/VdL8v6rJXn/1ZK8/2pJ3n+1JO+/WpL3Xy3J+6+W5P1XS/L+qyV5/9WSvP9qSd5/tSTvv1qS918tyfuvluT9V0vy/qslef/Vkrz/aknef7Uk779akvdfLcn7r5bk/VdL8v6rJXn/1ZK8/2pJ3n+1JO+/WpL3Xy3J+6+W5P1XS/L+qyV5/9WavP9qTd5/tSbvv1qT91+tj9zzd03ef7Um779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V2vy/qs1ef/Vmrz/ak3ef7Um779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V2vy/qs1ef/Vmrz/ak3ef7Um779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V2vy/qs1ef/Vmrz/ak3ef7Um779ak/dfrcn7r9bk/Vdr8v6rNXn/1Zq8/2pN3n+1Ju+/WpP3X63J+6/W5P1Xa/L+qzV5/9WavP9qTd5/tSbvv1qT91+tyfuv1uT9V1vk/qXtXP5cu53T8we+/5vOH/j+05b259q27LPzB77/mM4f+P5jOn/g+4/p/IH9v+n8gf2/5fyR+3/asT/PP5bZ+QPf/03nD+z/TecP7P9N5488fy3njzx/LeePPH8t5488fy3njzx/LeePPH8N54/c/2M6f/L5G7n/x3T+5PM3cv+P6fzJ52/k/h/T+ZPP38j9P6bzJ5+/H+//mT6T/b/Xnvv259pzbLPzL8nPv8Y9/9H25wOUo/X+c/W5/du/to1KbaNSu1OpPXKqvSjo6RWM9ArO7ApaYP9gVBDYQRgVJPUQFwVJfcFFQdJZf1GQdH5fFESeyfv2DAPH/tKB9PPx5+LxuPzkcVzVRp7feLWRZz1ebWRfAFe7R/YQb6lFfzptj+xNfMlE9jy+ZCJ7KV8yTWQmZCJ7P18yZTwlnEwZ/wknU8arwsmU8bVoMoc88IyMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54AmZLg88IyMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QmbIA8/IyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QOeWBZ2TkgWdk5IFnZOSBZ2SayEzIyAPPyMgDz8jIA8/IyAPPyMgD/51Me8gDz8hQ+hlDl3p7NJGZkKGcTYb+6/agnE0mMpSzyUJmoZxNJjKUz2dMZCifz5jIUPoZQ8da+3g3fR4ylM9nTGQon8+YyHB6YAsZTg9sIcPpgQ1kVk4PbCHD6YEtZDg9sIWMPPCMTBOZCRl54BkZeeAZmToe+I2fvO5PMmufkqnjgdFk6njgt8j0p8B1Px8/Vx/jwiby9hB3NnV8MJ5NHSeMZ1PHC+PZNLGZsqnjh/Fs6jjid9gc+/eZj+OcseH0xDY2nK7YxobTF5vYhN6K482G0xfb2HD6YhsbTl/ct/X7EcX1zL/ZNLGZsuH0xTY2nL7YxobTF9vYcPpiGxtOX2xiU2jT01tsHucPm+MXm/979bk9Lz6vXqi1v1zb9+f7Y/1s39eujytyTrvtipzTxbsiJw0HnsibkH8aOWmU8UROmpA8kZMGL0/kpHnOEzlpTHREXmjHWhrknOlzPJ5k1rEuk4chhda34dlw5jkbmyY2UzacCcnGhjPK2NhwZg4bG9Jw0M8fNusL29TPx5+Lx+Ny7TiuHEkdP5pjoTVxvhxJvfnevjkefXLPK7RWDs+G1Jub2DSxmbIh9eYmNqTe3MSG1Jub2HB68yubPvuwUaElc3A2hdbM4dlw+uLz8f1d+HMZMzacvtjGhtMX29g0sZmy4fTFNjacvtjGhtMX29hw+uIrm/WYseH0xSY2hVbP4dmQ+uJj+WbT24wNqS82sSH1xSY2TWymbEh9sYkNqS82sSH1xSY2pL74wmbMPudSaBkdms1eaB0dno188ZyNfPGcDYEvvqhtVGoJvOtFLYEbvaiN7C+Px/p98XXl2F/VGirT99ALIvFqI3tAuNrQixzxaiP7tLfUruvzlvbrFL/VRnZeeLWRvRRebaNSG9lL4dVG9lJ4tWW8lGGVyB560SBebRkvZVEbeiEgXm0dL2VRW8dLWdTW8VIWtY1KbR0vZVEb2ku19n3xGC/Uju+Lx9RLhV5uh1cb2kvB1Yb2Umi1odfK4dWG9lJwtaG9FFxtaC8FV9uo1Ib2UnC1VF4q9FI0vFoqLxV6cRlcbehVZHi1VF4q9LowvFoqLxV6pRdeLZWXCr12C6+WykuFXo2FV0vlpUKvr8KrpfJSoZc24dVSeanQq4rwaqm8VOgFPXi1VF4q9FoavFoqLxV6GQteLZWXCr3ZBK+WykuF3j6CV1tm3m7n8yup2zn7ZlvoTQ9wtaH7799S25bnxW2Z/SWHbrTHqy1zTzapLXNPNqktk29NasvkW5PaMvPW8o3U0O3teLVl8q1FbeiGdbzaOl7KoraOl7KoreOlLGobldo6Xsqito6Xsqil8lKhG7/xaqm8VOhWbrzapF7qoiCpP7ooiOx5+vbc2nv0fUH8xTUqtZE9D15tZM+DVxvZ87yl1tKeE7rNGa82sudBqz1CNy7j1Ub2PHi1kf0RXm0ZL2XoHDkejUptGS9lUlvGS5nU1vFSFrV1vJRFbR0vZVAbuucYr7aOl7KoreOlLGrTeKnJk7UjdHexTUEazzNVENrHnM9jHOfj1b6G5ejPp7nL1+WXq/er3tBO5ga9ob3MDXpDuxm83tBdw3foDe1obtAb2tPcoDe0q7lBbyPTG9ox3aCXzF+Fbh6+Qy+ZvwrdPnyD3tD9w3foJfNXoTuI79BL5q9C9xDfoZfMX4XuIr5DL5m/Ct1HfIdeMn8VupP4Dr1k/ip0L/Edesn8Vehu4jv0kvmr0P3Ed+gl81ehO4rv0Evmr0L3FN+hl8xfhe4qvkMvmb8K3Vd8h14yfxW6s/gOvWT+KnRv8R16yfxV6O7iO/SS+avQ/cV36CXzV6E7jO/QS+avDjJ/Fbql+g69ZP7qIPNXncxfhW4iv0Mvmb8K3UZ+h95GppfMX4XuJL9DL5m/Ct1LfodeMn8Vupv8Dr1k/ip0P/kdesn8VeiO8jv0kvmr0D3ld+gl81ehu8rv0Evmr0L3ld+hl8xfhe43v0Mvmb+K3Yd+g14yfxW7E/0GvWT+KnYv+g16ufxVj92NfoNeLn/VY/ej36CXy1/1RyPTy+Wveuye9Bv0cvmrHrsr/Qa9ZP4qdl/6DXrJ/FXszvQb9JL5q9gd6zfoJfNXZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9kHW3z7I+tsHWX/7IOtvH49GppfLXw2y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPur0XY91+XPxWH//5G+1Z522a5PaMveq0Z5/yuN6it9qy9ypTGrL3KdMasukQJPaMhnQpLZMAjSprTNvDWrrtB+b1JbJfia1ZZKfSS2Vl6rTemxSm9RLXRQk9UcXBZE9z9meF/fHPl7l7uXn0Otj+7n66Fe9kV3PHXoj+54b9IbuJb5Db2Tvc4feyO7nDr2R/c8dehuZ3sge6A69kR3THXrJ/FXoXuI79JL5q9C9xHfoJfNXoXuJ79BL5q9C9xLfoZfMX4XuJb5DL5m/Ct1LfIdeMn8Vupf4Dr1k/ip0L/Edesn8Vehe4jv0kvmr0L3Ed+gl81ehe4nv0Evmr0L3Et+hl8xfhe4lvkMvmb8K3Ut8h14yfxW6l/gGvaF7XN/Sa/lmTOgWV7zaMvcqy6c5Qzd84tWWuU+Z1JZJgSa1ZTKgSW2ZBGhRG7rXE6+2zry1qC2T/UxqyyQ/k9pGpZbKS4Xu8vwHtRcFSf3RRUFgz9OXx/MYfT32V7m79cfz0PtyvfrX31xg13OH3sh9m7foDex8btEb2Pvcojew+7lFbyPTG9gB3aI3sAe6RW9gx3SLXjJ/Fblv8w69kfs2b9FL5q8i923eopfMX0Xu27xFL5m/Osn81Unmr04yfxW5Pxavd31EbpC9RS+Vv/rSS+WvvvRS+asvvY1ML5W/+tJL5a++9FL5qy+9VP7qSy+Zv4rcGHyLXjJ/Fbk1+Ba9ZP4qcnPwLXrJ/FXkpuE79EbucX1P7+tvinypLTONTGrL3Ktef7rxS22ZO5VJbZn7lEltmRRoUlsmA5rUlkmAFrWRez1vUFtn3lrUlsl+JrVlkp9JbaNSS+WlInd5/pPai4Kk/uiiILLnWc/vb/Zs56tvYrVj/3Nx+3+/+e9/cZE9D1xt5K7NG9RG9jx4tZE9D15tZM+DV9uo1Eb2PHi1kT0PXm1kf4RXS+WlIjdr4tVG7tW8QS2Vl4rcqXmDWiovFblP8wa1VF4qcpfmDWqpvNRO5aV2Ki8VuRP2BrVUXuqg8lIHlZeK3Pd7g1oqLxW57/cGtVReKnLf7w1qqbxU5L7fG9RSeanIfb83qKXyUpH7fm9QS+WlIvf93qCWykuF7hHGq6XyUqE7hPFqqbxU6P5gvFoqLxW6OxivlspLhe4Nxqul8lKhO4Pxaqm8VOi+YLxaKi8VuisYr5bKS4XuCcarpfJSoTuC8WqpvFTofmC8WiYvtYTuBsarZfJSS+heYLxaJi+1PBqVWiYvtYTuA8arZfJSS+guYLxaKi8VugcYr5bKS4XuAMarpfJSoft/8WqpvFTo7l+8WiovtVB5qYXKS4XusMarpfJSK5WXWqm8VOh+crxaKi8Vup8cr5bKS4XuJ8erpfJSofvJ8WqpvFTofnK8WiovFbqfHK+WykuF7ifHq6XyUlS95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL1S95wtV7/lC1Xu+UPWeL3Xaose6/Ll4rOtMbZkJZFJb5i41WnuqvZ7it9oydymT2jJ3KYPatU6jsEltmcRnUlsm8ZnU1pm3FrV15q1FbZnEZ1JbJvGZ1DJ5qbVOo7BJbVIv9aMga0vwRUFkz9PW8VSwH8uLv7htWZ6xe1u269X7VW9k13OH3si+5w69jUxvZO9zh97I7ucOvZH9zx16IzugO/RG9kA36A3dBXyHXjJ/FboP+A69ZP4qdCfwHXrJ/FXoXuA79JL5q9DdwHfoJfNXofuB79BL5q9CdwTfoZfMX4XuCb5DL5m/Ct0VfIdeMn8Vui/4Dr1k/ip0Z/Adesn8Veje4Dv0kvmr0N3Bd+gl81eh+4Pv0Evmr0J3CN+hl8xfhe4RvkMvmb8K3SV8h14yfxW6T/gOvWT+KnSn8B16yfxV6F7hO/SS+avQ3cJ36CXzV6H7he/QS+avQncM36GXzF+F7hm+Qy+ZvwrdNXyHXjJ/Fbpv+A69ZP4qdOfwHXrJ/FXo3uE79JL5q9Ddw3foJfNXofuH79BL5q9CdxDfoZfMX4XuIb5DL5m/Ct1FfIdeMn8Vuo/4Dr1k/ip0J/Edesn81Unmr04yf3WS+avQPdt36G1kesn81Unmr0J3qd+hl8xfhe5Tx+vdQjeq36GXy19toVvV79DL5a+2RyPTy+WvttDt6nfo5fJXW+iG9Tv0kvmr0I3sd+gl81dk/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1t29k/e0bWX/7RtbfvpH1tzey/vZG1t/eyPrbG1l/e3s0Mr1c/qqR9bc3sv72Rtbf3sj62xtZf3sj629vZP3tjay/vZH1tzey/vZG1t/eyPrbG1l/eyPrb29k/e2NrL+9kfW3N7L+9kbW397I+tsbWX97q9N3Pdblz8Vj/f2TL2rLTCOT2jL3qtHaU+31FL/VlrlTmdSWuU+Z1JZJgSa1ZTKgSW2ZBGhRW6f/2KS2zry1qC2T/UxqyyQ/k9pGpZbKS2XtPL4oSOqPLgoie57jsT4VHEdD/MVF9jxwtaE7ifFqI3sevNrIngevNrLnwattVGojex682sieB682sj/Cq6XyUqEbiOFqQ/cP49VSeanQ3cN4tVReKnTvMF4tlZcK3TmMV0vlpUL3DePVUnmp0F3DeLVUXip0zzBeLZWXCt0xjFdL5aVC9wvj1VJ5qdDdwni1VF4qdK8wXi2VlwrdKYxXS+WlQvcJ49VSeanQXcJwtaGbV99Su53P73Zs5+y7HaF7V/Fqy9yl2vL8S27L9C+5zF3KpLbMXcqktkziM6ktk/hMasskPoPaPXQT53tqj+cXZdtYZmrLzFuT2jKJz6S2TOIzqW1Uaut4KYvaOl7KoraOl7KoreOlLGrreCmD2tCtm3i1VF4qdOMmXi2VlwrdtolXm9RLXRQk9UcXBZE9T388Hxv0fuz/85+f6e+h2zDxaiN7Hrja0E2YeLWRPQ9ebWTPg1cb2fPg1TYqtZE9D15tZH+EV0vlpVYqL7VSeanQLa54tVReaqPyUhuVlwrd0ItXS+WlQjf04tVSeanQDb14tVReKnRDL14tlZcK3dCLV0vlpUI39OLVUnmp0A29eLVUXip08y9eLZWXCt38i1dL5aVCN//i1VJ5qdDNv3i1VF4qdF/qW2oN3xzdQ/el4tWWuUtZvoEWulMTr7bMXcqktkziM6ktk/hMasskPpPaMvPW8hnx0J2aeLVlEp9JbZnEZ1Jbx0tZ1DYqtXW8lEVtHS9lUVvHS1nU1vFSFrVUXip0pyZeLZWXCt2piVdL5aVCd2r+g9qLgqT+6KIgtOc5vzfino/x4i/u3M8/F5/H5dr9cVUb2vPA1Yb2PHC1oT0PWm3oFle82tCeB642tOeBqw3teeBqG5Xa0P4IrpbKS4Vu6MWrpfJSoRt60WqP0A29eLVMXuoI3dCLV8vkpY5Ho1LL5KWO0A29eLVMXuoI3dCLV0vlpUI39OLVUnmp0A29eLVUXip0Qy9eLZWXCt3mi1dL5aViN//C1VJ5qdjNv3C1VF4qdvMvXC2Vl4rd/AtXW2YCjfX5zdGx/v7JF7VlJpBFbexOzbfUvv7G9xG7UxOutsxdyqS2TOIzqS2T+ExqyyQ+k9o689aits68NaiN3akJV1sm8ZnUUnmp2J2acLUtp9qLgqT+6KIgsuc52/mt4Hr1v/3u1BG6+xKvNrLnwauN7HngakN3X+LVRvY8b6ld1+15jOlcDN19iVcb2fPg1TYqtZH9EV5tGS9lUlvGS5nUlvFS6/6ct2ufztsyXsqiNnSLK15tHS9lUVvHS1nU1vFSFrWNSm0dL2VRW8dLWdSm8VLnL7UXBWn80VRBGs8zUxC5HXc8Hs+n0eOxLv/z358JRW7HvUFtYB9zg9rAPuYGta2KWkuSjtyOe4PawD7mBrWBfcwNagN7nhvUBvZHeLWR23HfVGvIH5HbcW9QW8ZLmdSW8VImtY1KbR0vZVFbx0tZ1NbxUha1dbyURW0aLzX73GDkJl2jgjSeZ6ogtI85niZ7LC8/LWx5ShK58fYGtY1KbWgfA1cb2sfA1Yb2MXC1oX0MXG1oHwNW2yM33t6gNrQ/gqtl8lI9cuPtDWoblVomL9UjN97eoJbJS/XIjbc3qKXyUpEbb29QS+WlIjfe3qCWyktFbry9QS2Vl4rceHuDWiovFbnx9ga1VF4qcuPtDWqpvFTkxtsb1JaZQNv57AndznWmtswEsqjd6tyllme3VVv2mdo6dymL2jp3KYvaOonPorZRqa2T+CxqqRJf5MbbG9RSJb7Ijbd4tZEbb29QS5X4Ijfe3qCW6ul55MbbG9RSPT2P3KR7g1oqLxW5SfcGtVReKnKT7g1qk3qpi4Kk/uiiILLnWdr+reB8IP7iGpXayJ4Hrzay58Grjex58Gojex682sieB642cuPtDWojex682sj+CK+WyktFbry9QS2Vl4rceHuDWiovFbkd9wa1VF4qdOsuXi2VlwrduotXS+WlQrfu4tVSeanQrbt4tVReKnTrLl4tlZcK3bqLV0vlpUK37uLVUnmp0F2lb6m1fJMldFcpXG3onsz3/pINn4gP3amJV1vnLmVR26jU1kl8FrV1Ep9FLVXiC92piVfLlPhG6E5NvFqmxDdCd2ri1TIlvvFoVGqZnp6P0J2aeLVMXmqE7tTEq6XyUqE7NfFqk3qpi4Kk/uiiILLnWbfnxWNtJ+IvrlGpjex58Gojex682sie5y21hl2uI3T3JV5tZM8DVxu6+xKvNrLnwauN7I/wast4KcMGzK+fQqW2jJcyqS3jpUxq63gpi9o6Xsqito6XMqgN3dCLV1vHS1nUhvZS5/MYX68K4tlg6IZevNpGpTa0l4KrDe2l3lFryUChG3rxakN7Kbja0F4KrTZ0Qy9ebWgvBVdbxktZnGPohl682kaltoyXMqmt46Usaut4KYvaOl7KoraOlzKoDd3Qi1cb2Utt7bvfdhvrC7X79rx439r3teuyXNVG9lJ4tZG9FF5to1Ib2Uu9pfbYxvdPXl785PkpLmQi+y5fMpE9mi+ZyH7Ol0xk7+dKJnSrsS+ZMp4STqaM/4STKeNV4WSayEzIyAPPyMgDz8jIA8/IyAPPyMgDT8iEbqP2JSMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QiZ0i7gvGXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sATMqc88IyMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54L+TOUPvFvElIw88IyMPPCMjDzwj00RmQkYeeEZGHnhGRh54RkYeeEZGHnhCJvROGF8y8sAzMvLAMzLywDMyTWQmZOSBZ2TkgWdk5IFnZOSBZ2TkgSdkQu8I8iUjDzwjIw88IyMPPCPTRGZCRh54RkYeeEZGHnhGRh54RkYeeEIm9G4nXzLywDMy8sAzMvLAMzJNZCZk5IFnZOSBZ2TkgWdk5IFnZOSBJ2RC7+TyJSMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54Qib0LjVfMvLAMzLywDMy8sAzMk1kJmTkgWdk5IFnZOSBZ2TkgWdk5IEnZLQnbkpGHnhGRh54RkYeeEamicyEjDzwjIw88IyMPPCMjDzwjIw88IQM52ar7Vz+XLudUzKUU9tEhvIO3Jb259q27DMylHdgExnKO7CFDOeWIhMZyqcQJjKUTyFMZCj9TDv2J5mxzMg0kZmQoXwKYSJD+RTCRIbTA1vIcHpgCxlOD2wgw7mlyESG0wNbyHB6YAsZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sB/JbM9OLcUmcjIA8/IyAPPyNTxwG/85HN//uCvB+EzMk1kJmTqeOA3fvKyn8+Lv/6zX65+XNnUccF4NnV8MJ5NHSeMZ1PHC8PZFNpX9A6bY3u+xb30x282//fqfXseY9/a97Xrslw51vHOvhzrOG1fjpS+/AaOTRwhHDk9P54jZz7Ac+TMEniOnLkDz5Ezo8A5Fto95ctReQbDUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/IMhqPyDIRjoT1ivhyVZzAclWcwHJVnMBzlH19zfJxPjsuYcZR/hHAstPPI9d91oQ1Jvhw1rzEcNa8xHJs4Qjjq+SOGo/wjhqP842P2GdtCe6PwbPSccMqm0O6od9j074uXfkzZcOYDGxtOz29jw+njbWya2EzZcPptGxtODz2Wx1Pg6Mf//HcPXWjrlC9HTr+N58jpzeEcC+2/8uXI6fnxHDnzAZ4jZ5bAc2ziCOHImVHwHJVnMByVZzAclWcwHJVnIBy78gyGo/IMhqPyDIaj8gyGYxNHCEflGQxH5RkMR+UZDEflGQxH5RkIx0KbQX05Ks9gOCrPYDgqz2A4NnGEcFSewXBUnsFwVJ7BcFSewXBUnoFwLLTl1Zej8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQTHhXPH6JscX3eTLY8mjhCOmjOYf9eaMxiOmjMQjqS7MPEc9dwMw1HPzTAc5R8xHJs4/uZ4YaNnYXM2er41Z0OaJc79KfBczxkb0nxgYkPq+S1sSHdA2tiQenMTG1K/bWLD6aHP/fk4cH2s6//8dw9Nun8Rz5HTb+M5cnpzPEdOH4/nyOn58Rw58wGcI+n+RTxHztyB58iZUfAclWcwHJs4Qjgqz2A4Ks9gOCrPYDgqz2A4Ks9AOJLup8VzVJ7BcFSewXBUnsFwbOII4ag8g+GoPIPhqDyD4ag8g+GoPAPhSLojF89ReQbDUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/IMhqPyDIQj6a5gPEflGQxH5RkMR+UZDMcmjhCOyjMYjsozGI7KMxiOyjMYjsozEI6ku4LxHJs4vuRo6G4k3SmK56g5g/l3rTkD4Ui6wxHPUc/NMBz13AzDUc/NMBybOEI4yj/+L44XNnoWNmej51tzNpRZYn205ZtNn7KhzAc2Npx7Do1sKH28kQ2lNzeyofTbRjaNks2yPH/yuvT+Py889NGeHnq0yynOK0dKD30DR0q/fQNHSm9+A0dOH4/nyOn50RzXB2c+wHPkzBJ4jpy5A8+RM6PgOTZxhHBUnsFwVJ7BcFSewXBUnsFwVJ6BcOTcT3sDR+UZDEflGQxH5RkMxyaOEI7KMxiOyjMYjsozGI7KMxiOyjMQjpx7em/gqDyD4ag8g+GoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReQbCkXNX8A0clWcwHJVnMByVZzAc5Xtec3zdvbNy7hTFc+Tc4fgmx9edCCvnDscbOGrOYDg2cYRw1HMzDEc9N8NwlH/EcJR//F8cL2z0LGzKhnPX4tfbwt9s1n4C/v1x7lq8gSNn7niP47p+c9wnz2U4dy3ewLGJI4QjZ+7Ac+TMHXiOnLkDz5Ezd+A5cmaU9zj+vB91zTO/OHLuWryBo/IMhqPyDIaj8gyGYxNHCEflGQxH5Zl3OE4/h8O5a/EGjsozGI7KMxCOnLsWb+DImWe2n/cAt/54xdHw/kznzDN4jpx55i2O5/6kcV6uXR/rlWMTRwhHzjyD58iZZ/AcOfMMniNnnsFz5Mwz73E8nxefZ5tw5NzpewNH5RkMR+UZDEflmZccvxi0bxzj+EXyL1d//Rt/Xv0lYMa9ibsLd+UlH+7KVz7clcd8uCu/+XBX3nPhTrr/2Z+78qQPd+VPH+7Kqz7cm7i7cFde9eGuvOrDXXnVh7vyqg935VUP7hvpPnJ/7sqrPtyVV324K6/6cG/i7sJdedWHu/KqD3f5dzB3Q1v0Rrp925u6vAya+utvHG2km5S9qcvHeFCXi/GgrmfuHtT1xN2Duvy6A3XS7dIw6heSen6OIqkn4iiSyoWvSS6P76dJy7bMSDaRBJFUfkORVCZDkVTOQpFUdkKRVB4ykNyfReDLuvz+JvW/fd+IdD+1P3flJx/uSls+3JXNfLg3cXfhrtznw10p0Ye7MqUPdyVQH+7Kqy7cm/KqD3flVR/uyqs+3JVXfbg3cXfhrrzqw1151Ye78qoPd+VVH+7Kqy7cd+VVH+7Kqz7clVd9uMtHgrlbvom6y0U6UD80U9HUDd+dOTRRPahrnnpQ19NfD+pN1B2o68mvB3X5dQ/q8uv/ifqFpJ7jokjqySyIZFcufE1yXc9vkvs5I6mshyKp/IYiqUyGItlEEkRS2QlFUnnIQHL+TtC/fd+oKxH5cFd+8uGutOXCfSib+XBXkvPhrtznw10p0Yd7E3cX7kqgPtyVV324K6/6cFde9eGuvOrC/VRe9eGuvOrDXXnVh7vyqg/3Ju4u3JVXfbgrr/pwV1714a686sNdedWDe9N+dzR3wzdR26OJugN1zVQ09dffnWkPTVQP6pqnDtS1192Fup79elDXk18P6vLrHtSbqP8X6heSeo6LIqknsyiSyoUoksp6KJLKbyCSqzIZiqRyFoqkshOKpPIQimQTyd8kL2yUWuZslEPmbJQs5myUFeZs5P6nbFg3z5/PGb62bX0x8fs+/lzcz2vr2RUjqZlHYyR18u9gXJbju8lnufy7XpdfJEmd/A0km0iCSJL6/htIkqaEG0iSZoq3SK7L80d/Pfw4f5H8v1db3gFm3ZfuTJ00B/lSZ92V7kxdgcyDuvKbB3VlPQ/qTdQdqCtDelBX3vSgrmzqQV3Z1IO6sqkDdda96M7UlU09qCubelBXNvWg3kTdgbqyqQd1ZVMP6sqmHtSVTT2oK5s6UD+UTT2oy6+jqRu6tI4m6g7U5WE87jDyMB7U5WEcqHd5GA/qer7uQV3P1z2oy697UG+i/l+oX0jqmTmKpJ6Do0gqF74muT2e3+ZdtjYlqayHIqn8BiI5lMlQJJWzUCSVnVAklYcMJH8azNq+/iL5l6v7vj6vHhfuy75fuTdxd+Gu/OTDXWnLh7uymQ93JTkf7sp9LtxZN8+7c1em9OGuBOrDXXnVh3sTdxfuyqs+3JVXfbgrr/pwV1714a686sF9fyiv+nBXXvXhrrzqw1151Yd7E3cX7sqrPtyVV324K6/6cFde9eGuvOrCfVFe9eGuvOrDXXnVh7vyqg/3Ju4u3JVXfbgrr/pwV1714a686sNdedWF+6q86sNdedWHu/KqD3f5SDB3QxPkvspFOlDfNFPR1F93V+2bJqoHdc1TD+p6+utBvYm6A3U9+fWgLr/uQV1+/T9Rv5DUc1wUST2ZfU3y6/3JJ459PAB3gqYM6UFdGRJNfV2/qV9onOeVujKkB3VlSA/qTdQdqCtDelBXhvSgrgzpQV15E039aE/qvc+oK5s6UN+VTT2oK5t6UFc29aCubOpBvYm6A3Vl0/uojzajrmzqQV3Z1IO6sqkHdWVTB+qHsulr6sfjeY7l2LcX1P/p6gt3pVMf7sqnaO5fz7e+70nHz9W/v89yKKH6cG/i7sJdKdWHu3KqD3clVR/uyqpw7sdPxupjxl1p1YV7V1714a686sNdedWHu/KqD/cm7mDu7Ty+uZ+/feS/e2bclW3jv0bKwfFfI2Vm+HsA/RvecT5mM0aZ2Ye7MrML96HM7MNdmdmHuzKzD3dlZh/uTdzR3M/vjs7+2GfclYN9uCvb+nBXXvXhrrzqw1151YX7qbzqw115Fc59/b66r7/9+797Znwq28Z/jZSD479GTa8R+DUaj+/3x8Yy22txKjP7cFdm9uGuzOzDXZnZh7syswf346HM7MNdmRnOff1uWR+X5un/xV052Ie7sq0P9ybuLtyVV324K6/6cFde9eGuvIrm/g97dv/VM+PjoWwb/jValIPjv0bKzB98jS7clZl9uCsz/yfuF5JNJEEkOXNt+x5P6770FyT/6eoLSc6kegdJzuz5Fsnz54N8j+sH+cYvg8UZJm8AyZn48CBXzlh2A0jO7HQDSM4wdANIznTzFsj/x+AbR1tmJJtIgkgq3aBIKt2gSCrdoEgq3qBIKt8YSB7nN47rOX6R3BRwUCSVcFAkFXFQJJVxUCSbSIJIKuO8Jrk8vnEs1++N/iapjIMiqYyDIqmMgyKpjAMi2ZRxUCSVcQwkjx+SY0pSGQdFUhkHRbKJJIikMg6KpDIOiqQyjoFkaz8kf7/78H+vPrfn447zuHyGurW/XNv359sa/fz5fsF6/RhhU3QK/gIpkcV+gXYFveAvkPJj8BdIsTT4C6S0G/wFanqBYr9AyubBXyBF/uAvkJ4kBH+B9CTh9Qu0bt9rndc2Jg/NdkV+EMlD2RxFUiEaRVJpF0VSsRRFsonka5LL44fkOSOpoIciqUQ2Lf84FIbmbAhyyEUtQVb4UdsJ/PxFLYHnvqgl8MUXtQTe9aK2Uakl8IAXtQQ+7aKWwHld1FJ5qU7lpQaVlxpJvdRFQVJ/dFGQ1PNcFLT0CpJ6k4uCpH7joiCyh2jfi9xGuy5y++udtx3Ph8vt+nbz7ztvZA+BVxvZQ8DVnpE9BF5tZA+BVxvZb7yldv3eh/7rFL/VRvYmeLWNSm1kz4NXG9kf4dWW8VImtWW8lEltGS+17s95u/bJvO2hl1Lj1ZbxUia1dbyURW0dL2VR26jU1vFSFrV1vJRFbWgv1dZvtfv+3/NtD71EFq82tJdCqw292BSvNrSXeketIRX00Is58WpDeym42kalNrSXgqsN7aXgast4KYtzDL1DEa+2jJeyqA29jRCvto6Xsqit46Usaut4KYvaRqW2jpeyqK3jpSxqqbxU6IVteLVUXir04jO82qRe6qIgqT+6KEjqeS4KWnoFSb3JRUFSv3FRkNRDXBQk9QUXBUln/Y+C0Et9bArSz+TQS2xsCtLP5NBLW2wK0s/k0EtKbArSz+TQ2zNsCtLP5ND7F2wK0s/k0A3+NgXpZ3LoDnibgvQzOXSLuE1B+pkcuofapiD0TO79W8G5/lLw3tU/ekO3NN+hN/S8f0fvuT8/CXWO7ddPvqgN7Q3gakP7CLjaRqU2tD+Bqw3tZeBqQ/se01QJ7XtMCsL4np8zxWmcvZwpjH+4nCnMlL+cKcwsvpwpzMS8nCnMXLucKcz0uZwpzIy4nCnMXf9ypoD38Thtl5czBbyPx2mZvJwp4H08ThPk5UwB7+Nx2hovZwp4H4/Tkng5U8D7eJzGwcuZAt7H47T3Xc4U8D4epwnvcqaA9/E4rXKXMwW8j8dpaLucKd59fMRpO7ucKd59fMRpDrucKd59fDzi3cdHnK6sy5ni3cdHnN6py5ni3cfHvR1OP7/n3vaky+9ZPvR71g/9nu1Dv6d96PfsH/o9x4d+T//Q7xkf+j0fuh+sH7ofrB+6H6wfuh+sH7ofrB+6H6wfuh+sH7ofrB+6H6wfuh+sH7ofbB+6H2wfuh9sH7ofbB+6H2wfuh9sH7ofbB+6H2wfuh9sH7ofbB+6H7QP3Q/ah+4H7UP3g/ah+0H70P2gfeh+0D50P2gfuh+0D90P2ofuB/uH7gf7h+4H+4fuB/uH7gf7h+4H+4fuB/uH7gf7h+4H+4fuB/uH7gfHh+4Hx4fuB8eH7gfHh+4Hx4fuB8eH7geAby6sR//+Pdc9rn99dv9PV19O1UOeanz2VIbvYgzA9wDgZwJ8DwB/piXgmdaAZ9oCnqndeabL79k/8XvaI/TOr3/Yyv3ffvK6ncvzzG27Xv34y9XL11s2Txxt/7l6Xf529f44/1y8L+Ny7S/qTdQdqEf+Hmhd6pG/j1qXeuTvxdalHvm7vDmpfxev7L+u/UU9cu9KWeqhd/XVpR65g6Yu9chdODmpb+Ob+jajrmzqQb2JugN1ZVMP6sqmHtSVTT2oK5vCqT8PvW9tRl3Z1IF66N2ndakrm3pQVzb1oK5s6kG9iboDdWVTD+rKph7UlU09qCubelBXNnWgHnqXdF3qyqYe1JVNPagrm3pQb6LuQF3Z1IO6sqkHdWVTD+rKph7UlU0dqDdlUw/qyqYe1JVNPagrm3pQb6LuQF3Z1IO6sqkHdWVTD+rKph7UlU0dqO/Kph7UlU09qCubelBXNvWg3kTdgbqyqQd1ZVMP6vLrr6mvy/NHL+s4X1E3dCEd8use1OXXPajLr3tQl1/3oN5EHUzd0N5wyK97UJdf96Cu95I8qOu9JA/qyqYO1LuyKZz66+cwXdnUg7qyqQd1ZVMP6k3UHagrm3pQVzb1oK5s6kFd2dSDurKpA/WhbOpBXdnUg7qyqQd1ZVMP6k3UHagrm3pQVzb1oK5s6kFd2dSDurKpA/VT2dSDurKpB3VlUw/qyqYe1JuoO1BXNvWgrmzqQV3Z1IO6sqkHdWXTz1NfHsqmHtSVTT2oK5t6UFc29aDeRN2BurKpB3VlUw/qyqYe1JVNHagvpH59ef7kdeuPl9R/Gqi+jvRD8vG3n23ozFgWUr/uTJ3UrztTb6LuQJ3UrztTJ/XrN1Jv65P6r+7HX9RJ/bozdVK/7kyd9L0kX+or6XtJN1J/3crzFXZF3YG6sqkHdWVTD+pN1B2oK5t6UFc2hVN//Xx9VTb1oK5s6kFd2dSB+qZs6kFd2dSDurKpB3VlUw/qTdQdqCubelBXNvWgrmzqQV3Z1IO6sqkD9aZs6kFd2dSDurKpB3VlUw/qTdQdqCubelBXNvWgrmzqQV3Z1IO6sqkD9V3Z1IO6sqkHdWVTD+rKph7Um6g7UFc29aCubOpBXdnUg7qyqQd1ZVMH6oeyqQd1ZVMP6sqmHtSVTT2oN1F3oC6//pr61zPCJ451aa+oG7qQDvl1D+ry6w7Uu/y6B3X5dQ/q8uto6oYGqi6/7kG9iboDdb2X5EFd7yWhqRtaebqyqQd1ZVMP6sqmDtSHsqkHdWVTD+rKpnDqr5+vD2VTD+pN1B2oK5t6UFc29aCubOpBXdnUg7qyqQP1U9nUg7qyqQd1ZVMP6sqmHtSbqDtQVzb1oK5s6kFd2dSDurKpB3Vl089TXx/Kph7UlU09qCubelBXNvWg3kTdgbqyqQd1ZVMP6sqmHtSVTT2oK5s6UF+UTT2oK5t6UFc29aCubOpBvYm6A3VlUw/qyqYe1JVNPagrm3pQVzZ1oL4qm3pQl19/Tf2xtm8c43hF/XUX0hcnUXegLr/uQV1+3YO6/LoHdfl1NPXXDVTrKr/uQH2TX/egrveSPKjrvSQP6sqmaOqvu5DWrYm6A3VlUw/qyqYe1JVNPagrm3pQVzaFU3/9rkZTNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdnUgfqubOpBXdnUg7qyqQd1ZVMP6k3UHagrm3pQVzb1oK5s6kFd2dSDurKpA/VD2dSDurKpB3VlUw/qyqYe1JuoO1BXNvWgrmzqQV3Z1IO6sqkHdWVTB+pd2dSDurKpB3VlUw/qnH59+aG+9P6CuqUFo3M6cDxHTk+N58jpkvEcOX0vnOPgdLLvcTT0QwxOb4rnyOk28Rw539vAc2zi+JKj4bvnQ3kGw1F5BsNReQbDUXkGw1F5BsLxVJ4xcHz9/PFUnsFwVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDyD4ag8g+C4PZRnMByVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPQDguyjMYjsozGI7KMxiOyjMYjk0cIRyVZzAclWcwHJVnMByVZzAclWcgHFflGQxH5RkMR+UZDEflGQzHJo4QjsozGI7KMxiOyjMYjsozEI4bpX9czv35Ff/1sa6vOL7uA9g2Sv94A0dK/3gDxyaOEI6U/vEGjpT+8U2Or3sVto3SP97AkdI/3sCR8nk4nmOjfB7+JsfX32PfmvIMhqPyDIaj8gyGYxNHCEflGQxH5RkDx9fPH5vyDIaj8gyGo/IMhOOuPIPhqDyD4ag8g+GoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReQbCkXOr+g0clWcwHJVnMByVZzAcmzhCOCrPYDgqz2A4Ks9gOCrPYDgqz0A4cm7ivoGj8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQhHzn3sN3BUnsFwVJ7BcFSewXBs4gjhyOkfx/J4Chz9eMXR0AfAuf/6Bo6c/hHOkXP/9Q0cOf0jniOnf3yPo6FXgXP/9Q0cmzhCOHI+D8dz5Hwe/h5Hw/fYOfdf38BReQbDUXkGwbFx7r++gaPyDIaj8oyB48vnj41z//UNHJs4Qjgqz2A4Ks9gOCrPYDgqz2A4Ks9AOHLuv76Bo/IMhqPyDIaj8gyGYxNHCEflGQxH5RkMR+UZDEflGQxH5RkIR8791zdwVJ7BcFSewXBUnsFwbOII4ag8g+GoPIPhqDyD4ag8g+GoPAPhuCnPYDgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXAk3ceO58jpH4+tPQX2R3/F8XUfQCPdf43nyOkf8Rw5/SOeI6d/xHPk9I/vcTR8T5N0/zWcI+n+azxHzufheI6cz8PxHJVnMBybOL7m+Dpfk+6/xnNUnsFwVJ7BcFSewXBUnoFwJN1/jeeoPIPhqDyD4ag8g+HYxBHCUXkGw1F5BsNReQbDUXkGw1F5BsKRdP81nqPyDIaj8gyGo/IMhmMTRwhH5RkMR+UZDEflGQxH5RkMR+UZCEfS/dd4jsozGI7KMxiOyjMYjk0cIRyVZzAclWcwHJVnMByVZzAclWcgHEn3seM5Ks9gOCrPYDjW8Y/f33I5juXFT97O5c+12/n7FBcydRwhmkwdj4cmU8e1ocnU8WFYMnuhzdBoMnW8EppMHfeDJlPn+SyaTBOZCRl54BkZSg/c1me/TWttRobSA5vIUHpgExlKD2whU2ib8Dtklh8y+4wMpQc2kaH0wCYylB7YRKaJzIQMpQc2keH0wMvzjYa2TMlwemALGU4PbCHD6YENZAptoEWTIfXABjKkHthAhtQDG8g0kZmQIfXABjLywDMy8sAzMvLAMzLywBMyhbaWosnIA8/IyAPPyMgDz8g0kZmQkQeekZEHnpGRB56RkQeekZEHnpAptOkSTUYeeEZGHnhGRh54RqaJzISMPPCMjDzwjIw88IyMPPCMjDzwhEyhbZ1oMvLAMzLywDMy8sAzMk1kJmQi+5ml7U8yy/l4QcbyPbfQ2/3waiP7Drja0Jvy8Goj+wO82sgzH6828hzHq408m/FqIz9zwquN/BwJr5bKS4XeLPaWWss3l0Pv/4KrDb2lC6+2jJcyqS3jpSzf6gy9lwqvtlGpLeOlTGrLeCmT2jJeyqS2jpcyPHMMvXsIrjb0hiC82jpeyqK2kJcyqC3kpQxqG5XaQl7KoLaQlzKoLeSlDGqpvFTovSdwtaG3k+DVUnmp0Js+8GqpvNTZqNRSeanQ+1Pwaqm8VOg9J3i1TF7qCL2PBK+WyUsdofeG4NUyeanj0ajUMnmpI/QeDrxaJi91hN6XgVdL5aVC77XAq6XyUqH3T+DVUnmp0Hsi8GqpvFTofQ54tZHn7eP4/obj8hgv1Bo+e36E7tDHq408b/FqI89bvNrI8xavNvK8xauNPG/xaiPPW7zayM8u8GojP7vAq6XyUqG72N9Sa/j20xG6Xx2vtoyXMqkt46VMalsZta+/IXOE7ivHqy3jpUxqy3gpk9oyXsqktoyXsqgN3en9ptrXzxxD93Tj1dbxUha1dbyURW2jUlvISxnUFvJSBrWFvJRBbSEvZVBbyEu9Vhu6GxqvlspLhe5wxqul8lKhu5bxaqm81E7lpUJ3Y+PVUnmp0N3YcLWhu7Hxaqm8VOhubLxaKi8Vuhsbr5bKS4XuxsarpfJSobux8WqpvFTobmy8WiovFbobG6+WykuF7sbGq6XyUqG7sfFqqbxU6G5suNrI/cm9n8/lg/18qXasz8+ej3X22fPI/ck3qA08b29QG3je3qA28Ly9QW3gefum2vb8VOfo49Xdvj3v32P6CdDIXcvOZALPcWcygZ+f+JKJ3PfsTKaOT0STqeMp0WTq+M83yLy1Mf141rK0scwoNlEEUKzjlz0pUvpwOEVKzw6nSOnv4RQpswCYYo/cbZ6IImXGgFOkzCNwisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABQj7xJIRFHZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorILgGLkvSyJKCq7ICgquyAoKrsgKMrpvLjWsKmiR95Ckodi5A0YQf5Fv/6eXo+8WSMRRU0XBMUmigCKejKGoKgnYwiK8osA1x1500oiinoyBqAYeTNMIorKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABQjb2JKRFHZBUGRM7u8cYqtP3/uNh4/17Z2pciZXdAUmyj+87Xn97XndlG3P64UObMLmiJndkFT5MwuaIqc2QVNkTO7gClG3nyWiCJndnmH4mP7pnj8oviXa7fnGc7j/OUt/6Ju/xHXvq9df704ikSBXxwlrcAvTtOLE/fFUS4M/OIobgZ+cZRiA784CseBXxxl7rgvTuTFm3px9IQg8IujJwSvXpz9B/iYPASLvC41EcUmigCKCscIikqxCIqKmwiKyoUIigpwAIpDSQtBUZHo17UXMsojMzLKGDMyTWQmZJQFZmTk72dk5NlnZOTDZ2TkrSdkKq2pfrlGuFdaPW1QW8irGtQW8p8GtY1KbSGfaFBbyPsZ1Bbycwa1hTyaQW0h3/VS7ai0uteglslLjUqrcA1qmbzUeDQqtUxealRa1WpQy+SlRqXVpwa1VF6q0ipRg1oqL1VpNadBLZWXqrTq0qCWyktVWh1pUEvlpSqtYjSopfJSlVYbGtRSealKqwINaqm81Nqo1FJ5qZXKS1VaImlQS+WlViovtVF5qUoLNw1qqbxUpQWWBrWNSi2Vl6q0uNGglspLVVqEaFBL5aUqLRY0qKXyUpUW9RnUUnmpSovvDGqpvFSlRXIGtVReqtJiNoNaKi9VadGZQS2Vl6q0OMyglspLVVrEZVBL5aUqLbYyqKXyUpUWRRnUUnmpSouXDGqpvFSljUMGtVReqtJOHINaKi9VaWuLQS2Vl6q0V+S1WtJ1A28sU9/O5c+127nOKHL2cKIpcnZ2oik2UQRQ5OwCRVPk7A1FU+TsGEVT5OwjRVPk7C4FUyTdC4CmqOyCoKjs8uLatj5/bmttRlHZBUGxiSKAorILgqKyyyuKyw/F2fNF0v0IaIrKLgiKyi4AipV2NDhSVHZBUFR2eUnx+R5gW6YUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrv8d4pnpZ0ojhSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7AChW2kHkSFHZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorILgGKlnV+OFJVdEBSVXRAUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrsAKFbasedIMbRffDwF9H7sLygavlN/xt7vBlcb2n/B1Yb2SXC1of0MXG1o3wFXG9ofoNXG3u8GVxv6WSFcbehnenC1VF4q9n63d9QaWkfO2Pvd4GrLeCmT2jJeyqS2jJcyNBGcsfe7odXG3u8GV1vGS5nUlvFSJrVlvJRJbauj9vUzx9j73eBq63gpi9o6XsqitpCXMqgt5KVeq4293w2utpCXMqgt5KUMagt5KYPaRqWWykvF3u8GV0vlpWLvd4OrpfJSncpLxd7dB1dL5aVi78KDq21Uaqm8VOwdcHC1VF4q9k41uFoqLxV7RxlcLZWXir3zC66WykvF3qEFV0vlpWLvpIKrpfJSsXc8wdVSeanYO5Pgaqm8VOwdRHC1keft8Vifao+jvVBr+ex56D0qeLWR5y1ebeR5i1cbed6C1e6P0Hs+8Gojz1u82sjzFq828rMLvNpGpZbIS32pLeOlXn/76UttGS9lUlvGS5nUlvFSFrWh9w68p/blN2S+1JbxUia1ZbyUSW0ZL2VS26jUlvFSJrV1vNTLZ45faut4KYvaOl7KoraOlzKoDd2DjldbyEsZ1BbyUga1hbyUQW2jUlvISxnUUnmp0P3UeLVUXip03zNcbeheZrxaKi+1UXmp0N3YeLWNSi2VlwrdjY1XS+WlQndj49VSeanQ3dh4tVReKnQ3Nl4tlZcK3Y2NV0vlpUJ3Y+PVUnmp0N3YeLVUXip0NzZeLZWXCt2NjVdL5aVCd2Pj1Uaet2393mq4X7cP/n2r4fr87PlYZ589D92fjFcbed7C1YbuT8arjTxv8Wojz9v31L6xe3W05/17TD8BGrpr2ZdM5DnuSyby8xNfMpGftfiSqeMT0WTqeEo0mTr+86aN6fMT/1AM3WWdh2Idv+xJkdKHwylSenY4xSaKAIqUWQBOkTI3wClSZgw4Rco8Aqeo7AKgGLo7Pg9FZRcERWUXBEVlFwTFJooAisouCIrKLgiKyi4IisouCIrKLgCKoXc15KGo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZ5b9TXELvvclDUdkFQVHZBUFR2QVBUU7nxbWGDT5L6C0vaSiG3jASgqLh+8tL6M0leShquiAoNlEEUNSTMQRFPRlDUJRffEXx2J8UxzKjKL+IoKgnYwCKoTfv5KGo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUAx9KarPBSVXRAUObPLG6dY9/X5g9d9e1xOsV85cqYXPMcmjv987fb4/sHbYx8zjpwJBs+RM8PgOXKmGDxHzhyD58iZZOAcQ2+ay8SRM828xXFs3xyvn8b7zVF5BsNReQbDsYkjhKPyDIaj8gyGo/IMhqPyzCuOy/J8jLt9vb0/46g8A+EYettjJo7KMxiOyjMYjsozGI5NHCEclWfe4bgtM47KMxiOyjMYjsozGI7KMxCOhbbpQjheyCihzMgoc8zIKEXMyDSRmZCR05+RkXefkZEbn5GRv56RKeSYX+4kXipt0zWoLeRVDWoL+U+D2kKe0qC2Uakt5P0Magv5OYPaQh7NoLaQ7zKopfJSlbZ7GtRSealK2zINaqm8VKXtkwa1VF6q0jZHg1oqL1VpO6JBLZWXqrRt0KCWyktV2t5nUEvlpSptwzOopfJSlbbLGdRSealK29oMapm81Fpp+5lBLZOXWittEzOoZfJS66NRqWXyUuuDyUutlfbMGdQyean1QeWlFiovVWknn0EtlZeqtOPOoLZRqaXyUpV2uxnUUnmpSrvSDGqpvFSl3WMGtVReqtIuL4NaKi9VaTeWQS2Vl6q0a8qglspLVdrdZFBL5aUq7UIyqKXyUpV2CxnUUnmpSnt6DGqpvFSlnTcGtVReqtL+GINaKi9VaReLQS2Vl6q018SglspLVdoRYlBL5aUq7dswqKXyUpV2VxjUUnmpSnsgDGqpvFSlnQoGtVReqtJ+AoNaKi9VqevfoJbKS1XqzTeopfJSlTroDWqpvFSlrniDWiovVanT3aCWyktV6l43qKXyUpU60g1qqbwUVe/5StV7vlL1nq9UvecrVe/5StV7vlL1nq9UvecrVe/5StV7vlL1nq+VurHf2Jy0je9TLC+u3c7lz7Xbuc4oFprjjhQ5d+KhKXLuz0NT5Ny1h6bIuZcPTZFz6zWYYqUOdkeKnPux0RQ5d2mjKSq7ICg2Ufzna9v6/LmttRlFZRcERWUXBEVlFwRFZZdXFJcfirPni5V2E7hR3CrtPHCkqOyCoKjsgqCo7IKg2ETxFcXne4BtmVJUdkFQVHZBUFR2QVBUdkFQVHYBUKy0Y8SRorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxUo7fRwpKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHZBUFR2QVBUdgFQrLRDy5GisguCorILgqKyC4JiE0UARWUXBEVlFwRFZRcERWUXBEVlFwDFSjvrHCkquyAoKrsgKEb2i+v5vLhv53hFcX1+p36s60xtZF+HVxvZf+HVRvZJeLWR/Qxcbej9bu+pfeNeb+iJ3ELvgvMlE9kf+JKJ/LzSl0wTmQmZOj4RTaaOp0STqeM/70pox/5MaGOZUazjaz0p1vHLjhRD7wbMQ5HSs8MpUvp7OEXKLACn2EQRQJEyY8ApUuYROEVlFwRFZRcERWUXAMXQuzjzUFR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoBh6920eisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdABRDb4MNQdGwgXMLvQ02D0VNl1f/og3f0wu9gTMPRU0XBEU9GUNQ1JOx/06xhd7AmYei/OJ/d90t9AbOPBT1ZAxBsYkigKKyC4KisguCorILgqKyC4KisguAYugNnHkoKrsgKCq7ICgquyAoNlEEUFR2QVDkzC5vnGJ5nNs3jLNdTrFfOXKmFzxHzvzyDsejrU8Yx77MOHImGDjH0Js4M3HkTDF4jpw5Bs+RM8ngOTZxhHDkTDNvceztm+PYZhyVZzAclWcwHJVnMByVZyAcQ2/nzMRReQbDUXnmHY7nY8ZReQbDsYkjhKPyDIaj8gyGo/LMr2svZJRQZmSUOSZkQu/J9CWjXDAjI6c/IyPvPiPTRGZCRv56RqaQY365g6oV2oFqUVvIqxrUFvKfr9VW2oFqUFvIJxrUFvJ+BrWF/JxBbaNSW8h3GdRSealK+zwNaqm8VKX9mK/VVtpjaVBL5aUq7YU0qKXyUpX2LBrUUnmpSnsLDWqpvFSlPYAGtVReqtJePYNaKi9VaU+dQS2Vl6q0982glspLVdqjZlBL5aUq7SUzqKXyUpX2fBnUUnmpSnuzDGqpvFSlPVQGtVReqtJeJ4NaKi81qLzUoPJSJ5WXqrTxy6CWykudVF7qbFRqqbxUpS1mBrVUXqrSVjCDWiYvtVfasmVQy+Sl9kpbqwxqmbzU/mhUapm81F5pq5JBLZOX2ittKTKopfJSlbb+GNRSealKW3QMaqm8VKWtNAa1VF6q0pYXg1oqL1VpY4pBLZWXqrR9xKCWyktV2uRhUEvlpSptxTCo1ebmF9du5/Ln2u1cZxS1uRlBUZubARRJtwSgKWpzM4KiNjcjKGpzM4JiE0UARW1uRlDk3AyApqjsgqCo7PLi2rY+f25rbUZR2QVAkXQ3AZqisguCorLLK4rLD8XZ80XS/Qhoik0UARSVXRAUlV0QFJVdEBSVXV5SfL4H2JYpRWUXAMVKOzAcKSq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUKy0c8aRorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxUo7nhwpKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHZBUFR2QVBUdgFQrLRTzZGisguCorILgqKyC4JiE0UARWUXBEVlFwTFyH5xeTyP0ddjf0VxfX6nfqzrRG3o/W54tZH9F15tZJ+EVxvZz+DVtjJq37jXW3oiQ++C8yUT2R/4kon8vNKXTORnkL5k6vhELJkj9J47XzJ1/OdNCc1EsY6v9aRYxy97UmyiCKBI6dnhFCn9PZwiZRaAU6TMDXCKlBkDTTH0rsg8FJVdEBSVXRAUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrsAKIbezZqHorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxdD7nfNQVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKgGHobbAiKho3tR+htsHkoarq8uNbQ63CE3sCZh6KmC4Bi6A2ceSjqyRiCop6MISjKL76ieOxPimOZUWyiCKCoJ2MIinoyhqCo7IKgqOyCoKjsAqAYegNnHorKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUObPLG6cY3xTHcXxfuz7OK0XO7AKmGHoDZwiKS1u3J4y2Xa4+r/+mQ+/gzMSRM7/gOXImGDzHJo4QjpwpBs+RM8fgOXImmbc4bu2bY9tmHJVlMByVZiAcQ2/lzMRReQbDUXkGw1F5BsOxieMrjuc3x/0x5ag8g+GoPIPhqDyD4ag8g+GoPAPhWGgbrS9H5ZlXHPfH/s1xaTOOyjMYjsozGI5NHCEclWcwHJVnMByVZzAclWde+sf++OG4zzgqzyA4ds5NyPNTXMgooczIKHPMyChFzMg0kZmQkdOfkZF3n5GRG5+Rkb+ekSnkmF+2I/ZKG3UNagt5VYPaQv7ToLaQpzSobVRqC3k/g9pCfs6gtpBHM6gt5LsMaqm8VKUNnwa1VF6q0sZMg1oqL1VpA6VBLZWXqrTR0aCWyktV2pBoUEvlpSptHDSopfJSlTb4GdRSealKG/EMaqm8VKUNcwa1VF6q0sY2g1oqL9WovFSj8lKNyktV2uVnUNuo1FJ5qUblpSrtPTSopfJSlfYIvlZbad+fQS2Vl6q0P8+glspLVdpHZ1BL5aUq7XczqKXyUpX2pRnUUnmpSvvHDGqpvFSlfV4GtVReqtJ+LINaKi9Vad+UQS2Vl6q0v8mglspLVdqHZFBL5aUq7RYyqKXyUpX29BjUUnmpSjtvDGqpvFSl/TEGtVReqtIuFoNaKi9Vaa+JQS2Vl6q0I8SglspLVdq3YVBL5aUq7a4wqKXyUpX2QBjUUnmpSjsVDGqpvFSl/QQGtVReqlLXv0EtlZeq1JtvUMvkpUalDnqDWiYvNSp1xRvUMnmp8WhUapm81KjUvW5Qy+SlRqWOdINaKi9F1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0flbqxz6faPl785GMb36dYXly7ncufa7dznVEsNMcdKRbyB44UC/kOP4qVuscdKRbySY4UC/kvR4qFfJ0jxSaKAIqFnuk5UlR2QVBUdnlxbVufP7e1NqOo7IKgqOwCoFip69+RorLLK4rLD8XZ88VKuwkcKSq7ICg2UQRQVHZBUFR2QVBUdnlJ8fkeYFumFJVdEBSVXQAUK+3WcKSo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUCx0i4bR4rKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVd/jvFs9LuKEeKyi4IisouCIrKLgiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXQAUK+1qc6So7IKgqOyCoKjsgqDYRBFAUdkFQTGwXzzO9ry4P/bxiuL6/E79WNeZ2sC+Dq828n63G9QG9kk3qA3sZ25QG9h3vKn2jXu9oSfyjLwLzplMYH/gTCbw80pnMoGfQTqTqeMT0WTqeEowmcg78e4j81ZCO/ZnQhvLjGIdX+tJsY5f9qRI6cPhFJsoAihS+ns4RcosAKdImRvgFCkzBpwiZR5BU4y8gzIRRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AipF3viaiqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVAMfJ+50QUmyj+87WGDZxn5G2wiShqurz6F234nl7kDZx5KEbewJmIop6MISjqyRiCop6MISg2UfzvrjvyBs5EFPVkDEFRT8YQFJVdEBSVXQAUI2/gTERR2QVBUdkFQVHZ5f/H3hllx44rO3ZGvZIUJVKDe3Pv7NUnbfndw5vhKigjgsBffcg2sX1KAcgpBIJiE0UARWUXBEVlFwRFZRcERWUXBEXO7PKbrsvxeB3iSvHoF4qRN3AmosiZXX5xilL21//SpRxtxpEzveA5cuYXPMcmjhCOnBkGz5EzxeA5cuYYPEfOJPMrjt8wynnMOCrLADgej8g7OVNxVJ7BcFSewXBUnsFwbOII4ag88wuO9bHNOCrPYDgqz2A4Ks9gOCrPQDhG3tPpwfFCRgllRkaZY0ZGKWJGponMhIyc/oyMvPuMjNz4jIz89YzMQo753f6p47HQ/lOL2oW8qkHtQv7ToHYhT2lQ26jULuT9DGoX8nMGtQt5NIPahXyXQS2Vl1ppl6dBLZWXWmk3pkEtlZdaadekQS2Vl1ppd6NBLZWXWmkXokEtlZdaabegQS2Vl1ppV59BLZWXWmn3nUEtlZdaaZecQS2Vl1ppN5tBLZWXWmnXmUEtlZdaaXeYQS2Vl1ppF5dBLZWXWmm3lUEtlZdaaVeUQS2Vl1pp95JBLZWXOqi81EHlpVba9mVQS+WlDiovdVB5qZU2oxnUUnmplTaNGdRSeamVNncZ1FJ5qZU2YRnUUnmplTZLGdRSeamVNjUZ1FJ5qZU2HxnUUnmplTYJGdRSeamVNvMY1FJ5qZU23RjUUnmplTbHGNRSeamVNrEY1FJ5qZX2mhjUUnmplXaEGNRSeamV9m0Y1DJ5qUK6K+AXW/i2s/y5djvrjKK2NiMoamszgqK2NiMoNlEEUNTWZgRFbW1GUNTWZgRFbW1GUOTcDACmSLoXAE1R2eXNta2+vm9rbUZR2QVBUdkFQbGJIoCisss7iuWb4uz5Iul+BDRFZRcERWUXBEVlFwDFlXY/OFJUdnlL8fU3wFamFJVdEBSVXRAUmygCKCq7ICgquyAoKrsgKCq7ICgquwAorrRrxZGisguCorILgqKyC4JiE0UARWUXBEVlFwRFZRcERWUXBEVlFwDFlXYbOVJUdkFQVHZBUFR2QVBsogigqOyCoKjsgqCo7IKgqOyCoKjsAqC40i4xR4rKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABRD73fr5+sYx/no7yjW1zv1o9aZ2si+Dq+2UamN7JPwaiP7GbzayL7jd2p/ca+39ESG3gXnSyayP3AlE3rHnC+ZyM8gfcms4xPRZNbxlGgyjZHMrxLasb8S2igziuv4Wk+K6/hlT4qUPhxOkdKzwylS+ns0xdA7EvNQpMwNcIqUGQNOkTKPwCk2UQRQVHZBUFR2QVBUdkFQVHZBUFR2AVAMvZM0D0VlFwRFZRcERWUXBMUmigCKyi4IisouCIrKLgiKyi4Iisou/55iDb3fOQ9FZRcERWUXBEVlFwTFJooAinI6b641bOCsobfBpqEYegNnjP+j37+nV0Nv4MxDUdMFQVFPxhAU9WQMQVFPxhAU5RcBrjv0Bs40FENv4MxDUU/GEBSVXRAUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrsAKIbewJmHorILgqKyC4IiZ3b5xSnK49y+YJztcor9yrGJI4QjZ375Dcej1ReMYy8zjpwJBs+RM8PgOXKmGDxHzhwD5xh6H2cmjpxZBs+RM838imNvXxzHNuOoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReeY3HM/HhGPoHZ2ZOCrPYDgqz2A4Ks9gODZxvF57IaOEMiOjzDEjoxQxI6NcMCMjpz8hc8i7z8jIjc/IyF/PyCzkmN/uoKoL7UC1qF3IqxrULuQ/DWoX8pQGtQv5RIPahbzfe7Ur7R81qF3IoxnULuS7DGqpvNRK+zwNaqm81Er7MQ1qqbzUSvsmDWqpvNRK+xsNaqm81Er7EA1qqbzUSvsFDWqpvNRK+/oMaqm81Er77wxqqbzUSvvkDGqpvNRK+9kMaqm81Er7zgxqqbzUSvvDDGqpvNRK+7gMapm81LbSfiuDWiYvta20L8qglslLbY9GpZbJS20PJi+1PZi81LbSxi+DWiovVai8VKHyUittRzOopfJSK20bM6il8lIrbe8yqKXyUittwzKopfJSK22XMqil8lIrbWsyqKXyUittPzKopfJSK20TMqil8lIrbecxqKXyUittuzGopfJSK22PMail8lIr7WIxqKXyUivtNTGopfJSK+0IMail8lIr7dswqKXyUqS7An6xiW87y59rt7POKGpzM4KiNjcjKGpzM4KiNjcjKGpzM4Ai6X4ANEVtbkZQ1OZmBEXOzQBoik0UARSVXd5c2+rr+7bWZhSVXRAUlV0QFJVdEBSVXd5RLN8UZ88XSfcjoCkquyAoKrsgKCq7ICg2UQRQVHZ5S/H1N8BWphSVXRAUlV0QFJVdEBSVXQAUV9oF4khR2QVBUdkFQVHZBUGxiSKAorILgqKyC4KisguCorILgqKyC4DiSrt3HCkquyAoKrsgKCq7ICg2UQRQVHZBUFR2QVBUdkFQVHZBUFR2AVBcadeVI0VlFwRFZRcERWUXBMUmigCKyi4IisouCIrKLgiKyi4Iisou/55iW2m3nCNFZRcERWUXBEVlFwTFyH7x+CpKO44x3lA0vFPfQu93w6uN7L/waiP7JLja0Pvd8Goj+w682sj+AK828hzHq21UaiM/08OrpfJSofe7/UqtoXWkhd7vhle7jJeyqA293w2vdhkvZWgiaKH3u+HVLuOlTGobldplvJRJ7TJeyqR2HS9leOYYer8bXu06XsqgNvR+N7zahbyUQe1CXsqgdiEvZVDbqNQu5KUMahfyUga1VF4q9H43vFoqLxV6vxteLZWXalReqlF5qdC7+/BqqbxU6F14eLVUXir0bjm8WiovFXpXG14tlZcKvfsMr5bKS4XeJYZXS+WlQu/mwqul8lKhd13h1VJ5qdC7o/BqqbxU6F1MeLVUXir0biO8WiovFXo/y75tr4v3/u5tSPAe3RZ654ormdB7VHzJRJ75vmQi+wNfMpG9hC+ZJjITMpE9ii+ZyM+GfMlEfo7kS0YeeEaG0gNb3oYLvY/DlwylBzaRofTAJjKUHtjyhlfo/Ra+ZCg9sIkMpQc2kaH0wCYylB7YRIbTAxv+dhB6r4MvGU4PbCHD6YEtZEg9sIFME5kJGVIPbCBD6oENZEg9sIEMqQc2kJEH/juZPfR+AF8y8sAzMvLAMzLywDMyTWQmZOSBZ2TkgWdk5IFnZOSBZ2TkgSdkQu+U8CUjDzwjIw88IyMPPCPTRGZCRh54RkYeeEZGHnhGRh54RkYeeEIm9C4QXzLywDMy8sAzMvLAMzJNZCZk5IFnZOSBZ2TkgSdkPr6PA/vm2v7xDRvo89fk59+Sn78lP/+e/PxH8vP35Ocfyc9/5j5/Sz5/W+D5a3gjdW+B56/p/IHnr+n8geev6fyB56/hrbe9BZ6/pvMHnr+m8weev6bzB56/lvPvgeev6fyR56/h+cMeef5azh95/lrOH3n+Ws4fev4azh96/hrOH3r+Gs4fev4azh96/r4//xF6/hrOn3z+Hsnn75F8/n68cx19/uTz90g+f4/k8/dIPn+P5PO3J5+/Pfn87cnnb08+fz/ePY4+f/L525PP3558/vbk87cnn78j+fwdyefvSD5/R/L5+/HeY/T5k8/fkXz+juTzdySfvyP5/EX0lJb6On/ZO/D8ls9fIdpEXc/fkp9/T37+I/n5e/Lzj+TnP1Of/0D0OrqevyQ/f+75ezwCz1/D51ePR+D5azp/4PlrOn/g+Ws6f+D5a/j85PEIPH9N5w88fy3nL4Hnr+n8geev6fyB56/p/JHn7/vnDwei68z1/JHnr+X8keev5fyh56/h/KHnr+H8oefv+/PX0PPXcP7Q89dw/tDz13D+5PMX0bPkev7k87cmn781+fytyedvTT5/t+Tzd0s+f7fk83dLPn8R/Uuu508+f7fk83dLPn+35PN3Sz5/W/L525LP35Z8/rbk8xfRv+R6/uTztyWfvy35/G3J529LPn/35PN3Tz5/Af0/j68j1cfYgOe3fP4K0P/je/4j+fl78vOP5Oc/c58f0P/je/6S/Pw1+fm35OdPPn+PwPPX8vnVI/D8NZ0/8Pw1nT/w/DWdP/D8tXx+sgeev6bzB56/pvMHnr+m8weev6bzB56/pvNHnr+G5w898vy1nD/y/LWcP/L8tZw/9Px9f/4Rev4azh96/hrOH3r+Gs4fev4azh96/hrOn3z+juTzdySfvyP5/B3J5++ZfP6eyefvmXz+nsnnL6B/yff8yefvmXz+nsnn75l8/p65529/5J6//ZF7/vZH7vnbH7nnb3/knr/9kXv+9kfu+dsfuedvf+Sev/2RfP6W5PO3JJ+/Jfn8LVnn71ZG/z9/b28p/etAl6/b+9eX/b005f2XlX/2ZfWffdn26y8b5/g/fy8E6Oero/scl9/n+f1l5z/6sr+//v7+y8o/+7L62y9rbav/p/79JaM+zq+ve1z/jX9/3fEPv67/w68b//Drzn/2dX9/ecPwdeUfft2/vlnOr/3+Idsnfkj7tz+knPvrn205+/nmttmO/XUrHOV/3wr/HGmPd6Qj3pF6vCONO4/0/WPOj/yYf/9CgO3HlM/8mPqZH7N95se0z/yY/TM/5vjMj+mf+TEfDtLlsT2+vvVxsdftMuY+/elo06E+/ZFn26FKxEMFDqdHPb6urX8fjJE/m2w5fst9/MBPhi3HD/xg2HL8wM+FLccP/FjYcvzAT4UNx4/8oWTL8QM/E7YcP/fUjfyJZMvxc0/dyJ9Hthw/99SN/Glky/FzT93In0U2HD/yR5Etx889dSN/ENly/NxTN/LHkC3Hzz11I38I2XL83FM38keQ3x9/i/wJ2P/aYPPn+FkLkP4cP+vnL/8cP+vHL/8cP+unL/8cP+uHL/8cP+tnL///8dN+9PLP8SN/8vLtpya20B+8NBw/8ucuDcdvuY8feeoajh956hqOH3nqGo4feeoajh956r4/fo08dQ3Hzz11a+6pW3NPXcCyS9fj55669dNTd/rs5p8dv+c+/oh7/PLY969jHJeq2cuH8bZ6JhewPbILKNkF1OwCtuwCWnYBe2QB7z/TvG2Bp7BNQJg5/H2kMLP1+0hhpuXXkVqY+fd9pA9vryqlvASUsl3eZDm2y6FqxENtEQ/VIh4q8EZGy/8SgRcyWo4feB+j5fiB1zFajh94G6Ph+JGXMVqOH3gXo+X4gVchW44feBOy5fgt9/FzT90999Tdc0/dPffU3XNP3SP31D1yT90j99Q9ck9dwPpL1+PnnrpH7ql75J66R+6pe+Seuj331O25p27PPXV77qkLaJZxPX7uqdsD3/cNbxz1wPd9w/FH4DuP4a2LEfjOYzl+4DuP5fiB7zyW4wf2+5bjB/b7luMHvu8bPkA5At/3Dcc/A/t9y/ED+33L8SNPXcPxI09dw/EjT13D8SNPXcPxI09dw/EjT13D8XNP3TP11G2P1FO3PVJP3fZIPXXb49NTF/rGUXu03Mff4x6/PL7WGJXHeRFw+SBqexzZBfTsAkZ2AWdyAeWRXUDJLqBGFtDObwH1h4D/vLqfr5eTxuNy7TguYgNPbLzYwPMdLzayG/jxWsrs/8PIbsAkILIbMAmI7AZMAiK7AYuAGtkNmAREdgMmAZHdgOHtvlYjT3iTgMhT2yQgzSSeCUgziWcCwkzi7yOFma3fRwozLb+OtIWZf99HAky08foptbb9zZHKvr2+894mR6rxjrTFO1KLd6T9s0fCfi6yAZpZXI/fcx9/5D7+mfr4gG4Y1+OX3MevuY+/5T5+y3383FO35Z66LffUbbmnbss9dffcU3fPPXX33FN3zz11EX03nsfPPXX33FN3zz1199xTd889dY/cU/fIPXWP3FP3yD11EX03nsfPPXWP3FP3yD11j9xT98g9dXvuqdtzT92ee+r23FMX0XfjefzcU7fnnro999Ttuaduzz11R+6pO3JP3ZF76o7cUxfR9eR5/NxTd+SeuiP31B25p+7IPXXP3FP3zD11z9xT98w9dRFdT57Hzz11z9xT98w9dc/cU/dMPXX3R+qpuz9ST939kXrq7o/UU3d/pJ66+yP11N0fqafu/kg9dfdH6qm7P3JP3ZJ76pbcU7fknrol99RFNDB5Hj/31C25p27JPXVL7qlbck/dmnvq1txTt+aeujX31EU0KHkeP/fUrbmnbs09dWvuqVtzT90t99Tdck/dLffU3XJP3U/3TaGPn3vq5u6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTXXk7qY6cndTHbm7qY7c3VTHI/XUPXJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U3Vc3dT9dzdVD13N1XP3U3VH6mnbs/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UPXc3Vc/dTdVzd1P13N1UI3c31cjdTTVyd1ON3N1U45F66o7c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1NNXJ3U43c3VQjdzfVyN1Ndebupjpzd1OdubupztzdVOcj9dQ9c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTVUeucupnudPPXef5089eJ/nTz15n+dPPXqf5089e5/nTz18n+dPPX2f5089fp/nTz5/c9dUPc+ffP7mLqp6nj/5/M1dVfU8f/L5m7us6nn+5PM3d13V8/zJ52/uwqrn6ZLP39yVVc/TJZ+/uUurnqdLPn9z11Y9T5d8/uYurnqeLvn8zV1d9Tx/8vmbu7zqef7k8zd3fdXz/Mnnb+4Cq+f5k8/f3BVWz/Mnn7+5S6ye508+f3PXWD3Pn3z+5i6yep4/+fzNXWX1PH/y+Zu7zOp5/uTzN3ed1fP8yedv7kKr5/mTz9/clVbP8yefv7lLrZ7nTz5/c9daPc+ffP7mLrZ6nj/5/M1dbfU8f/L5m7vc6nn+5PM3d73V8/zJ52/ugqvn+ZPP39wVV8/zJ5+/uUuunudPPn9z11w9z598/uYuunqeP/n8zV119Tx/8vmbu+zqef7k8zd33dXz/Mnnb+7Cq+f5k8/f3JVXz/Mnn7+5S6+e508+f3PXXj3Pn3z+5i6+ep4/+fzNXX31PH/y+Zu7/Op5/uTzN3f91fP8uedvSd5/VZL3X5Xk/Vclef9VeeSevyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9VkvdfleT9VyV5/1VJ3n9Vkvdf1eT9VzV5/1VN3n9Vk/df1Ufu+VuT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT91/V5P1XNXn/VU3ef1WT919tkfuXtrP8uXY7p+cPfP83nT/w/aeV9ufaVvbZ+QPff0znD3z/MZ0/8P3HdP7A/t90/sD+33L+yP0/7dhf5x9ldv7A93/T+QP7f9P5A/t/0/kjz1/L+SPPX8v5I89fy/kjz1/L+SPPX8v5I89fw/kj9/+Yzp98/kbu/zGdP/n8jdz/Yzp/8vkbuf/HdP7k8zdy/4/p/Mnn78f7f6bPZP/z2nPf/lx7jm12/pL8/DXu+Y+2vx6gHK3376vP7Z/+a9uo1DYqtTuV2iOn2ouCnl7BSK/gzK6gBfYPRgWBHYRRQVIPcVGQ1BdcFCSd9RcFSef3RUHkmbxvrzBw7G8dSD8ffy4ej8t3HsdVbeT5jVcbedbj1Ub2BXC1e2QP8Su16E+n7ZG9iS+ZyJ7Hl0xkL+VLponMhExk7+dLZhlPCSezjP+Ek1nGq8LJLONr0WQOeeAZGXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sATMl0eeEZGHnhGRh54RkYeeEamicyEjDzwjIw88IyMPPCMjDzwjIw88ITMkAeekZEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IXPKA8/IyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB/47mfaQB56RofQzhi719mgiMyFDOZsM/dftQTmbTGQoZ5OFTKGcTSYylM9nTGQon8+YyFD6GUPHWvt4N30eMpTPZ0xkKJ/PmMhwemALGU4PbCHD6YENZCqnB7aQ4fTAFjKcHthCRh54RqaJzISMPPCMjDzwjMw6HvgX37nuLzK1T8ms44HRZNbxwL8i018C634+vq8+xoVN5O0h7mzW8cF4Nus4YTybdbwwnk0Tmymbdfwwns06jvg3bI7968zHcc7YcHpiGxtOV2xjw+mLTWxCb8XxZsPpi21sOH2xjQ2nL+5b/XpEcT3zTzZNbKZsOH2xjQ2nL7ax4fTFNjacvtjGhtMXm9gstOnpV2we5zeb4web/7z63F4Xn1cv1Npfru376+9j/Wxf19bHFTmn3XZFzuniXZGThgNP5E3IP42cNMp4IidNSJ7ISYOXJ3LSPOeJnDQmOiJfaMdaGuSc6XM8XmTqqGXyMGSh9W14Npx5zsamic2UDWdCsrHhjDI2NpyZw8aGNBz085tNfWOb+vn4c/F4XK4dx5UjqeNHc1xoTZwvR1Jvvrcvjkef3PMWWiuHZ0PqzU1smthM2ZB6cxMbUm9uYkPqzU1sOL35lU2ffdhooSVzcDYLrZnDs+H0xefj6134s4wZG05fbGPD6YttbJrYTNlw+mIbG05fbGPD6YttbDh98ZVNPWZsOH2xic1Cq+fwbEh98VG+2PQ2Y0Pqi01sSH2xiU0TmykbUl9sYkPqi01sSH2xiQ2pL76wGbPPuSy0jA7NZl9oHR2ejXzxnI188ZwNgS++qG1Uagm860UtgRu9qI3sL49H/br4unLsr2oNlel76AWReLWRPSBcbehFjni1kX3ar9TW+rql/TjFT7WRnRdebWQvhVfbqNRG9lJ4tZG9FF7tMl7KsEpkD71oEK92GS9lURt6ISBe7TpeyqJ2HS9lUbuOl7KobVRq1/FSFrWhvVRrXxeP8Ubt+Lp4TL1U6OV2eLWhvRRcbWgvhVYbeq0cXm1oLwVXG9pLwdWG9lJwtY1KbWgvBVdL5aVCL0XDq6XyUqEXl8HVhl5FhldL5aVCrwvDq6XyUqFXeuHVUnmp0Gu38GqpvFTo1Vh4tVReKvT6KrxaKi8VemkTXi2Vlwq9qgivlspLhV7Qg1dL5aVCr6XBq6XyUqGXseDVUnmp0JtN8GqpvFTo7SN4tcvM2+18vZK6nbM320JveoCrDd1//yu1rbwubmX2Lzl0oz1e7TL3ZJPaZe7JJrXL5FuT2mXyrUntMvPW8kZq6PZ2vNpl8q1FbeiGdbzadbyURe06Xsqidh0vZVHbqNSu46UsatfxUha1VF4qdOM3Xi2Vlwrdyo1Xm9RLXRQk9UcXBZE9T99eW3uPvhfEv7hGpTay58Grjex58Goje55fqbW054Ruc8arjex50GqP0I3LeLWRPQ9ebWR/hFe7jJcydI4cj0aldhkvZVK7jJcyqV3HS1nUruOlLGrX8VIGtaF7jvFq1/FSFrXreCmL2jReavJk7QjdXWxTkMbzTBWE9jHn6xjH+Xi3r6Ec/fU0tzwvv1y9X/WGdjI36A3tZW7QG9rN4PWG7hq+Q29oR3OD3tCe5ga9oV3NDXobmd7QjukGvWT+KnTz8B16yfxV6PbhG/SG7h++Qy+ZvwrdQXyHXjJ/FbqH+A69ZP4qdBfxHXrJ/FXoPuI79JL5q9CdxHfoJfNXoXuJ79BL5q9CdxPfoZfMX4XuJ75DL5m/Ct1RfIdeMn8Vuqf4Dr1k/ip0V/Edesn8Vei+4jv0kvmr0J3Fd+gl81ehe4vv0Evmr0J3F9+hl8xfhe4vvkMvmb8K3WF8h14yf3WQ+avQLdV36CXzVweZv+pk/ip0E/kdesn8Veg28jv0NjK9ZP4qdCf5HXrJ/FXoXvI79JL5q9Dd5HfoJfNXofvJ79BL5q9Cd5TfoZfMX4XuKb9DL5m/Ct1VfodeMn8Vuq/8Dr1k/ip0v/kdesn8Vew+9Bv0kvmr2J3oN+gl81exe9Fv0Mvlr3rsbvQb9HL5qx67H/0GvVz+qj8amV4uf9Vj96TfoJfLX/XYXek36CXzV7H70m/QS+avYnem36CXzF/F7li/QS+ZvyLrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bcPsv72QdbfPsj62wdZf/t4NDK9XP5qkPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vaxTt/1qOXPxaP+/M5fas912q5Nape5V432+qc8rqf4qXaZO5VJ7TL3KZPaZVKgSe0yGdCkdpkEaFK7zrw1qF2n/dikdpnsZ1K7TPIzqaXyUuu0HpvUJvVSFwVJ/dFFQWTPc7bXxf2xj3e5u3wfuj6276uPftUb2fXcoTey77lBb+he4jv0RvY+d+iN7H7u0BvZ/9yht5HpjeyB7tAb2THdoZfMX4XuJb5DL5m/Ct1LfIdeMn8Vupf4Dr1k/ip0L/Edesn8Vehe4jv0kvmr0L3Ed+gl81ehe4nv0Evmr0L3Et+hl8xfhe4lvkMvmb8K3Ut8h14yfxW6l/gOvWT+KnQv8R16yfxV6F7iO/SS+avQvcR36CXzV6F7iW/QG7rH9Vd6LW/GhG5xxatd5l5l+TRn6IZPvNpl7lMmtcukQJPaZTKgSe0yCdCiNnSvJ17tOvPWonaZ7GdSu0zyM6ltVGqpvFToLs//ovaiIKk/uigI7Hl6ebyO0euxv8vdrT9eh97L9eof/+YCu5479Ebu27xFb2Dnc4vewN7nFr2B3c8tehuZ3sAO6Ba9gT3QLXoDO6Zb9JL5q8h9m3fojdy3eYteMn8VuW/zFr1k/ipy3+Ytesn81Unmr04yf3WS+avI/bF4vfURuUH2Fr1U/uqpl8pfPfVS+aun3kaml8pfPfVS+aunXip/9dRL5a+eesn8VeTG4Fv0kvmryK3Bt+gl81eRm4Nv0UvmryI3Dd+hN3KP6+/0vn9T5Kl2mWlkUrvMver9pxufape5U5nULnOfMqldJgWa1C6TAU1ql0mAFrWRez1vULvOvLWoXSb7mdQuk/xMahuVWiovFbnL87+pvShI6o8uCiJ7nnp+vdmzne/exGrH/ufi9v9+8t//xUX2PHC1kbs2b1Ab2fPg1Ub2PHi1kT0PXm2jUhvZ8+DVRvY8eLWR/RFeLZWXitysiVcbuVfzBrVUXipyp+YNaqm8VOQ+zRvUUnmpyF2aN6il8lI7lZfaqbxU5E7YG9RSeamDyksdVF4qct/vDWqpvFTkvt8b1FJ5qch9vzeopfJSkft+b1BL5aUi9/3eoJbKS0Xu+71BLZWXitz3e4NaKi8VukcYr5bKS4XuEMarpfJSofuD8WqpvFTo7mC8WiovFbo3GK+WykuF7gzGq6XyUqH7gvFqqbxU6K5gvFoqLxW6JxivlspLhe4Ixqul8lKh+4Hxapm8VAndDYxXy+SlSuheYLxaJi9VHo1KLZOXKqH7gPFqmbxUCd0FjFdL5aVC9wDj1VJ5qdAdwHi1VF4qdP8vXi2Vlwrd/YtXS+WlCpWXKlReKnSHNV4tlZeqVF6qUnmp0P3keLVUXip0PzleLZWXCt1PjldL5aVC95Pj1VJ5qdD95Hi1VF4qdD85Xi2VlwrdT45XS+WlqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UvedlnbboUcufi0etM7XLTCCT2mXuUqO1l9rrKX6qXeYuZVK7zF3KoLau0yhsUrtM4jOpXSbxmdSuM28tateZtxa1yyQ+k9plEp9JLZOXqus0CpvUJvVS3wqytgRfFET2PK2Ol4L9KG/+xW2lvGL3Vrbr1ftVb2TXc4feyL7nDr2NTG9k73OH3sju5w69kf3PHXojO6A79Eb2QDfoDd0FfIdeMn8Vug/4Dr1k/ip0J/Adesn8Vehe4Dv0kvmr0N3Ad+gl81eh+4Hv0Evmr0J3BN+hl8xfhe4JvkMvmb8K3RV8h14yfxW6L/gOvWT+KnRn8B16yfxV6N7gO/SS+avQ3cF36CXzV6H7g+/QS+avQncI36GXzF+F7hG+Qy+ZvwrdJXyHXjJ/FbpP+A69ZP4qdKfwHXrJ/FXoXuE79JL5q9DdwnfoJfNXofuF79BL5q9CdwzfoZfMX4XuGb5DL5m/Ct01fIdeMn8Vum/4Dr1k/ip05/Adesn8Veje4Tv0kvmr0N3Dd+gl81eh+4fv0Evmr0J3EN+hl8xfhe4hvkMvmb8K3UV8h14yfxW6j/gOvWT+KnQn8R16yfzVSeavTjJ/dZL5q9A923fobWR6yfzVSeavQnep36GXzF+F7lPH691CN6rfoZfLX22hW9Xv0Mvlr7ZHI9PL5a+20O3qd+jl8ldb6Ib1O/SS+avQjex36CXzV2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3b2T97RtZf/tG1t++kfW3N7L+9kbW397I+tsbWX97ezQyvVz+qpH1tzey/vZG1t/eyPrbG1l/eyPrb29k/e2NrL+9kfW3N7L+9kbW397I+tsbWX97I+tvb2T97Y2sv72R9bc3sv72Rtbf3sj62xtZf3tbp+961PLn4lF/fueL2mWmkUntMveq0dpL7fUUP9Uuc6cyqV3mPmVSu0wKNKldJgOa1C6TAC1q1+k/NqldZ95a1C6T/Uxql0l+JrWNSi2Vl8raeXxRkNQfXRRE9jzHo74UHEdD/IuL7HngakN3EuPVRvY8eLWRPQ9ebWTPg1fbqNRG9jx4tZE9D15tZH+EV0vlpUI3EMPVhu4fxqul8lKhu4fxaqm8VOjeYbxaKi8VunMYr5bKS4XuG8arpfJSobuG8WqpvFTonmG8WiovFbpjGK+WykuF7hfGq6XyUqG7hfFqqbxU6F5hvFoqLxW6UxivlspLhe4Txqul8lKhu4ThakM3r/5K7Xa+3u3Yztm7HaF7V/Fql7lLtfL6l9zK9F/yMncpk9pl7lImtcskPpPaZRKfSe0yic+gdg/dxPk7tcfrRdk2ykztMvPWpHaZxGdSu0ziM6ltVGrX8VIWtet4KYvadbyURe06Xsqidh0vZVAbunUTr5bKS4Vu3MSrpfJSods28WqTeqmLgqT+6KIgsufpj9djg96P/X/+9TP9PXQbJl5tZM8DVxu6CROvNrLnwauN7HnwaiN7HrzaRqU2sufBq43sj/BqqbxUpfJSlcpLhW5xxaul8lIblZfaqLxU6IZevFoqLxW6oRevlspLhW7oxaul8lKhG3rxaqm8VOiGXrxaKi8VuqEXr5bKS4Vu6MWrpfJSoZt/8WqpvFTo5l+8WiovFbr5F6+WykuFbv7Fq6XyUqH7Un+l1vDm6B66LxWvdpm7lOUNtNCdmni1y9ylTGqXSXwmtcskPpPaZRKfSe0y89byGfHQnZp4tcskPpPaZRKfSe06XsqitlGpXcdLWdSu46UsatfxUha163gpi1oqLxW6UxOvlspLhe7UxKul8lKhOzX/i9qLgqT+6KIgtOc5vzbino/x5l/cuZ9/Lj6Py7X746o2tOeBqw3teeBqQ3setNrQLa54taE9D1xtaM8DVxva88DVNiq1of0RXC2Vlwrd0ItXS+WlQjf0otUeoRt68WqZvNQRuqEXr5bJSx2PRqWWyUsdoRt68WqZvNQRuqEXr5bKS4Vu6MWrpfJSoRt68WqpvFTohl68WiovFbrNF6+WykvFbv6Fq6XyUrGbf+FqqbxU7OZfuFoqLxW7+ReudpkJNOrrzdFRf37ni9plJpBFbexOzV+pff/G9xG7UxOudpm7lEntMonPpHaZxGdSu0ziM6ldZ95a1K4zbw1qY3dqwtUuk/hMaqm8VOxOTbjallPtRUFSf3RRENnznO38UnC9+p++O3WE7r7Eq43sefBqI3seuNrQ3Zd4tZE9z6/U1rq9jjGdi6G7L/FqI3sevNpGpTayP8KrXcZLmdQu46VMapfxUnV/zdvap/N2GS9lURu6xRWvdh0vZVG7jpeyqF3HS1nUNiq163gpi9p1vJRFbRovdf5Qe1GQxh9NFaTxPDMFkdtxx+Pxeho9HrX8z79/JhS5HfcGtYF9zA1qA/uYG9S2VdRaknTkdtwb1Ab2MTeoDexjblAb2PPcoDawP8KrjdyO+0u1hvwRuR33BrXLeCmT2mW8lElto1K7jpeyqF3HS1nUruOlLGrX8VIWtWm81Oxzg5GbdI0K0nieqYLQPuZ4mexR3n5a2PKUJHLj7Q1qG5Xa0D4Grja0j4GrDe1j4GpD+xi42tA+Bqy2R268vUFtaH8EV8vkpXrkxtsb1DYqtUxeqkduvL1BLZOX6pEbb29QS+WlIjfe3qCWyktFbry9QS2Vl4rceHuDWiovFbnx9ga1VF4qcuPtDWqpvFTkxtsb1FJ5qciNtzeoXWYCbeerJ3Q760ztMhPIonZb5y5VXt1WrewztevcpSxq17lLWdSuk/gsahuV2nUSn0UtVeKL3Hh7g1qqxBe58RavNnLj7Q1qqRJf5MbbG9RSPT2P3Hh7g1qqp+eRm3RvUEvlpSI36d6glspLRW7SvUFtUi91UZDUH10URPY8pe1fCs4H4l9co1Ib2fPg1Ub2PHi1kT0PXm1kz4NXG9nzwNVGbry9QW1kz4NXG9kf4dVSeanIjbc3qKXyUpEbb29QS+WlIrfj3qCWykuFbt3Fq6XyUqFbd/FqqbxU6NZdvFoqLxW6dRevlspLhW7dxaul8lKhW3fxaqm8VOjWXbxaKi8Vuqv0V2otb7KE7iqFqw3dk/m7f8mGT8SH7tTEq13nLmVR26jUrpP4LGrXSXwWtVSJL3SnJl4tU+IboTs18WqZEt8I3amJV8uU+MajUalleno+Qndq4tUyeakRulMTr5bKS4Xu1MSrTeqlLgqS+qOLgsiep26vi0dtJ+JfXKNSG9nz4NVG9jx4tZE9z6/UGna5jtDdl3i1kT0PXG3o7ku82sieB682sj/Cq13GSxk2YD6/C5XaZbyUSe0yXsqkdh0vZVG7jpeyqF3HSxnUhm7oxatdx0tZ1Ib2UufrGM/fCuLZYOiGXrzaRqU2tJeCqw3tpX6j1pKBQjf04tWG9lJwtaG9FFpt6IZevNrQXgqudhkvZXGOoRt68WobldplvJRJ7TpeyqJ2HS9lUbuOl7KoXcdLGdSGbujFq43spbb21W+7jfpG7b69Lt639nVtLeWqNrKXwquN7KXwahuV2she6ldqj218fefy5jvPT3EhE9l3+ZKJ7NF8yUT2c75kIns/VzKhW419ySzjKeFklvGfcDLLeFU4mSYyEzLywDMy8sAzMvLAMzLywDMy8sATMqHbqH3JyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QCd0i7ktGHnhGRh54RkYeeEamicyEjDzwjIw88IyMPPCMjDzwjIw88ITMKQ88IyMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh7472TO0LtFfMnIA8/IyAPPyMgDz8g0kZmQkQeekZEHnpGRB56RkQeekZEHnpAJvRPGl4w88IyMPPCMjDzwjEwTmQkZeeAZGXngGRl54BkZeeAZGXngCZnQO4J8ycgDz8jIA8/IyAPPyDSRmZCRB56RkQeekZEHnpGRB56RkQeekAm928mXjDzwjIw88IyMPPCMTBOZCRl54BkZeeAZGXngGRl54BkZeeAJmdA7uXzJyAPPyMgDz8jIA8/INJGZkJEHnpGRB56RkQeekZEHnpGRB56QCb1LzZeMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54AkZ7YmbkpEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IcO52Wo7y59rt3NKhnJqm8hQ3oFbaX+ubWWfkaG8A5vIUN6BLWQ4txSZyFA+hTCRoXwKYSJD6Wfasb/IjDIj00RmQobyKYSJDOVTCBMZTg9sIcPpgS1kOD2wgQznliITGU4PbCHD6YEtZOSBZ2SayEzIyAPPyMgDz8jIA8/IyAPPyMgD/5XM9uDcUmQiIw88IyMPPCOzjgf+xXc+99c3fj4In5FpIjMhs44H/sV3Lvv5uvj5n/1y9ePKZh0XjGezjg/Gs1nHCePZrOOF4WwW2lf0GzbH9voTd+mPn2z+8+p9ex1j39rXtbWUK8d1vLMvx3Wcti9HSl9+A8cmjhCOnJ4fz5EzH+A5cmYJPEfO3IHnyJlR4BwX2j3ly1F5BsNReQbDUXkGw7GJI4Sj8gyGo/IMhqPyDIaj8gyGo/IMhONCe8R8OSrPYDgqz2A4Ks9gOMo/vuf4OF8cy5hxlH+EcFxo55Hr/9cLbUjy5ah5jeGoeY3h2MQRwlHPHzEc5R8xHOUfH7PP2C60NwrPRs8Jp2wW2h31Gzb96+LSjykbznxgY8Pp+W1sOH28jU0TmykbTr9tY8PpoUd5vASOfvzPv/fQC22d8uXI6bfxHDm9OZzjQvuvfDlyen48R858gOfImSXwHJs4QjhyZhQ8R+UZDEflGQxH5RkMR+UZCMeuPIPhqDyD4ag8g+GoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReQbCcaHNoL4clWcwHJVnMByVZzAcmzhCOCrPYDgqz2A4Ks9gOCrPYDgqz0A4LrTl1Zej8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQTHwrlj9Jcc33eTlUcTRwhHzRnM/9eaMxiOmjMQjqS7MPEc9dwMw1HPzTAc5R8xHJs4/uR4YaNnYXM2er41Z0OaJc79JfCs54wNaT4wsSH1/BY2pDsgbWxIvbmJDanfNrHh9NDn/nocWB+1/s+/99Ck+xfxHDn9Np4jpzfHc+T08XiOnJ4fz5EzH8A5ku5fxHPkzB14jpwZBc9ReQbDsYkjhKPyDIaj8gyGo/IMhqPyDIaj8gyEI+l+WjxH5RkMR+UZDEflGQzHJo4QjsozGI7KMxiOyjMYjsozGI7KMxCOpDty8RyVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPQDiS7grGc1SewXBUnsFwVJ7BcGziCOGoPIPhqDyD4ag8g+GoPIPhqDwD4Ui6KxjPsYnjW46G7kbSnaJ4jpozmP+vNWcgHEl3OOI56rkZhqOem2E46rkZhmMTRwhH+cf/xfHCRs/C5mz0fGvOhjJL1EcrX2z6lA1lPrCx4dxzaGRD6eONbCi9uZENpd82smmUbEp5fedaev+fNx76aC8PPdrlFOeVI6WHvoEjpd++gSOlN7+BI6ePx3Pk9PxojvXBmQ/wHDmzBJ4jZ+7Ac+TMKHiOTRwhHJVnMByVZzAclWcwHJVnMByVZyAcOffT3sBReQbDUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/IMhqPyDIQj557eGzgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXDk3BV8A0flGQxH5RkMR+UZDEf5nvcc33fvVM6doniOnDscf8nxfSdC5dzheANHzRkMxyaOEI56bobhqOdmGI7yjxiO8o//i+OFjZ6FTdlw7lp8/ln4i03tJ+D/P85dizdw5Mwdv+NY6xfHffJchnPX4g0cmzhCOHLmDjxHztyB58iZO/AcOXMHniNnRvkdx++/R13zzA+OnLsWb+CoPIPhqDyD4ag8g+HYxBHCUXkGw1F55jccp5/D4dy1eANH5RkMR+UZCEfOXYs3cOTMM9v33wC3/njH0fD3mc6ZZ/AcOfPMrzie+4vGebm2PuqVYxNHCEfOPIPnyJln8Bw58wyeI2eewXPkzDO/43i+Lj7PNuHIudP3Bo7KMxiOyjMYjsozbzk+GbQvHOP4QfIvVz//H39d/RQw497E3YW78pIPd+UrH+7KYz7cld98uCvvuXAn3f/sz1150oe78qcPd+VVH+5N3F24K6/6cFde9eGuvOrDXXnVh7vyqgf3jXQfuT935VUf7sqrPtyVV324N3F34a686sNdedWHu/w7mLuhLXoj3b7tTV1eBk39/RtHG+kmZW/q8jEe1OViPKjrmbsHdT1x96Auv+5AnXS7NIz6haSen6NI6ok4iqRy4XuS5fH1NKlsZUayiSSIpPIbiqQyGYqkchaKpLITiqTykIHk/ioCL7X8fJP6n/7diHQ/tT935Scf7kpbPtyVzXy4N3F34a7c58NdKdGHuzKlD3clUB/uyqsu3Jvyqg935VUf7sqrPtyVV324N3F34a686sNdedWHu/KqD3flVR/uyqsu3HflVR/uyqs+3JVXfbjLR4K5W95E3eUiHagfmqlo6oZ3Zw5NVA/qmqce1PX014N6E3UH6nry60Fdft2Duvz6v6J+IannuCiSejILItmVC9+TrPX8IrmfM5LKeiiSym8okspkKJJNJEEklZ1QJJWHDCTnfwn6p3836kpEPtyVn3y4K225cB/KZj7cleR8uCv3+XBXSvTh3sTdhbsSqA935VUf7sqrPtyVV324K6+6cD+VV324K6/6cFde9eGuvOrDvYm7C3flVR/uyqs+3JVXfbgrr/pwV1714N603x3N3fAmans0UXegrpmKpv7+3Zn20ET1oK556kBde91dqOvZrwd1Pfn1oC6/7kG9ifq/oX4hqee4KJJ6MosiqVyIIqmshyKp/AYiWZXJUCSVs1AklZ1QJJWHUCSbSP4keWGj1DJnoxwyZ6NkMWejrDBnI/c/ZcO6ef58zfDatvpm4vd9/Lm4n9fWsytGUjOPxkjq5H+DsZTjq8mnXP6/ruUHSVInfwPJJpIgkqS+/waSpCnhBpKkmeJXJGt5fevnw4/zB8n/vNryF2DWfenO1ElzkC911l3pztQVyDyoK795UFfW86DeRN2BujKkB3XlTQ/qyqYe1JVNPagrmzpQZ92L7kxd2dSDurKpB3VlUw/qTdQdqCubelBXNvWgrmzqQV3Z1IO6sqkD9UPZ1IO6/DqauqFL62ii7kBdHsbjDiMP40FdHsaBepeH8aCu5+se1PV83YO6/LoH9Sbq/4b6haSemaNI6jk4iqRy4XuS2+P1Nm/Z2pSksh6KpPIbiORQJkORVM5CkVR2QpFUHjKQ/G4wa3v9QfIvV/e9vq4eF+5l36/cm7i7cFd+8uGutOXDXdnMh7uSnA935T4X7qyb5925K1P6cFcC9eGuvOrDvYm7C3flVR/uyqs+3JVXfbgrr/pwV1714L4/lFd9uCuv+nBXXvXhrrzqw72Juwt35VUf7sqrPtyVV324K6/6cFdedeFelFd9uCuv+nBXXvXhrrzqw72Juwt35VUf7sqrPtyVV324K6/6cFdedeFelVd9uCuv+nBXXvXhLh8J5m5ogtyrXKQD9U0zFU39fXfVvmmielDXPPWgrqe/HtSbqDtQ15NfD+ry6x7U5df/FfULST3HRZHUk9n3JJ9/n3zh2McDcCdoypAe1JUh0dRr/aJ+oXGeV+rKkB7UlSE9qDdRd6CuDOlBXRnSg7oypAd15U009aO9qPc+o65s6kB9Vzb1oK5s6kFd2dSDurKpB/Um6g7UlU3voz7ajLqyqQd1ZVMP6sqmHtSVTR2oH8qm76kfj9c5yrFvb6j/t6sv3JVOfbgrn6K5P59vfd2Tju+rf77Pciih+nBv4u7CXSnVh7tyqg93JVUf7sqqcO7Hd8bqY8ZdadWFe1de9eGuvOrDXXnVh7vyqg/3Ju5g7u08vrifP33kP3tm3JVt4/+OlIPj/46UmeF/A+hf8I7zMZsxysw+3JWZXbgPZWYf7srMPtyVmX24KzP7cG/ijuZ+fnV09sc+464c7MNd2daHu/KqD3flVR/uyqsu3E/lVR/uyqtw7vXr6l5/+vd/9sz4VLaN/ztSDo7/O2r6HYF/R+Px9fexUWZ7LU5lZh/uysw+3JWZfbgrM/twV2b24H48lJl9uCszw7nXr5b1cWme/l/clYN9uCvb+nBv4u7CXXnVh7vyqg935VUf7sqraO7/Zc/uP3pmfDyUbcP/jopycPzfkTLzB39HF+7KzD7clZn/FfcLySaSIJKcubZ9jae6l/6G5H+7+kKSM6neQZIze/6K5Pn9Qb7H9YN844fB4gyTN4DkTHx4kJUzlt0AkjM73QCSMwzdAJIz3fwK5P9j8IWjlRnJJpIgkko3KJJKNyiSSjcokoo3KJLKNwaSx/mF43qOHyQ3BRwUSSUcFElFHBRJZRwUySaSIJLKOO9JlscXjnJ9b/QnSWUcFEllHBRJZRwUSWUcEMmmjIMiqYxjIHl8kxxTkso4KJLKOCiSTSRBJJVxUCSVcVAklXEMJFv7Jvnzrw//efW5vR53nMflM9St/eXavr/+rNHP7/cL6vVjhE3RKfgvSIks9i9oV9AL/gtSfgz+C1IsDf4LUtoN/gtq+gXF/gUpmwf/BSnyB/8F6UlC8F+QniS8/wXV7Wutc21j8tBsV+QHkTyUzVEkFaJRJJV2USQVS1Ekm0i+J1ke3yTPGUkFPRRJJbJp+cehMDRnQ5BDLmoJssK32k7g5y9qCTz3RS2BL76oJfCuF7WNSi2BB7yoJfBpF7UEzuuilspLdSovNai81EjqpS4Kkvqji4KknueioKVXkNSbXBQk9RsXBZE9RPta5DbadZHbX++87Xg9XG7XPzf/vPNG9hB4tZE9BFztGdlD4NVG9hB4tZH9xq/U1q996D9O8VNtZG+CV9uo1Eb2PHi1kf0RXu0yXsqkdhkvZVK7jJeq+2ve1j6Ztz30Umq82mW8lEntOl7KonYdL2VR26jUruOlLGrX8VIWtaG9VKtfavf93+fbHnqJLF5taC+FVht6sSlebWgv9Ru1hlTQQy/mxKsN7aXgahuV2tBeCq42tJeCq13GS1mcY+gdini1y3gpi9rQ2wjxatfxUha163gpi9p1vJRFbaNSu46Xsqhdx0tZ1FJ5qdAL2/BqqbxU6MVneLVJvdRFQVJ/dFGQ1PNcFLT0CpJ6k4uCpH7joiCph7goSOoLLgqSzvpvBaGX+tgUpJ/JoZfY2BSkn8mhl7bYFKSfyaGXlNgUpJ/Jobdn2BSkn8mh9y/YFKSfyaEb/G0K0s/k0B3wNgXpZ3LoFnGbgvQzOXQPtU1B6Jnc+5eCs/5Q8Lurv/WGbmm+Q2/oef8bvef++iTUObYf3/miNrQ3gKsN7SPgahuV2tD+BK42tJeBqw3te0xTJbTvMSkI43u+zxSncfZypjD+4XKmMFP+cqYws/hypjAT83KmMHPtcqYw0+dypjAz4nKmMHf9y5kC3sfjtF1ezhTwPh6nZfJypoD38ThNkJczBbyPx2lrvJwp4H08Tkvi5UwB7+NxGgcvZwp4H4/T3nc5U8D7eJwmvMuZAt7H47TKXc4U8D4ep6HtcqZ49/ERp+3scqZ49/ERpznscqZ49/HxiHcfH3G6si5nincfH3F6py5nincfH/d2OH3/nHvbky4/p3zo59QP/ZztQz+nfejn7B/6OceHfk7/0M8ZH/o5H7of1A/dD+qH7gf1Q/eD+qH7Qf3Q/aB+6H5QP3Q/qB+6H9QP3Q/qh+4H24fuB9uH7gfbh+4H24fuB9uH7gfbh+4H24fuB9uH7gfbh+4H24fuB+1D94P2oftB+9D9oH3oftA+dD9oH7oftA/dD9qH7gftQ/eD9qH7wf6h+8H+ofvB/qH7wf6h+8H+ofvB/qH7wf6h+8H+ofvB/qH7wf6h+8HxofvB8aH7wfGh+8HxofvB8aH7wfGh+wHgzYV69K+fc93j+tdn9//t6supeshTjc+eyvAuxgC8BwA/E+A9APyZSsAz1YBn2gKeqd15psvP2T/xc9oj9M6v/7KV+99957qd5XXmtl2vfvzl6vL8k80LR9u/r67lb1fvj/PPxXsZl2t/UG+i7kA98nug61KP/D7qutQjvxe7LvXI7/LmpP5VvLL/uPYH9ci9K8tSD72rb13qkTto1qUeuQsnJ/VtfFHfZtSVTT2oN1F3oK5s6kFd2dSDurKpB3VlUzj116H3rc2oK5s6UA+9+3Rd6sqmHtSVTT2oK5t6UG+i7kBd2dSDurKpB3VlUw/qyqYe1JVNHaiH3iW9LnVlUw/qyqYe1JVNPag3UXegrmzqQV3Z1IO6sqkHdWVTD+rKpg7Um7KpB3VlUw/qyqYe1JVNPag3UXegrmzqQV3Z1IO6sqkHdWVTD+rKpg7Ud2VTD+rKph7UlU09qCubelBvou5AXdnUg7qyqQd1+fX31Gt5fetSx/mOuqEL6ZBf96Auv+5BXX7dg7r8ugf1Jupg6ob2hkN+3YO6/LoHdf0tyYO6/pbkQV3Z1IF6VzaFU3//HKYrm3pQVzb1oK5s6kG9iboDdWVTD+rKph7UlU09qCubelBXNnWgPpRNPagrm3pQVzb1oK5s6kG9iboDdWVTD+rKph7UlU09qCubelBXNnWgfiqbelBXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubPp56uWhbOpBXdnUg7qyqQd1ZVMP6k3UHagrm3pQVzb1oK5s6kFd2dSBeiH16+X1nevWH2+pfzdQPY/0TfLxt+9t6MwohdSvO1Mn9evO1JuoO1An9evO1En9+o3UW31R/9H9+IM6qV93pk7q152pk/4tyZd6Jf1b0o3U37fyPMOuqDtQVzb1oK5s6kG9iboDdWVTD+rKpnDq75+vV2VTD+rKph7UlU0dqG/Kph7UlU09qCubelBXNvWg3kTdgbqyqQd1ZVMP6sqmHtSVTT2oK5s6UG/Kph7UlU09qCubelBXNvWg3kTdgbqyqQd1ZVMP6sqmHtSVTT2oK5s6UN+VTT2oK5t6UFc29aCubOpBvYm6A3VlUw/qyqYe1JVNPagrm3pQVzZ1oH4om3pQVzb1oK5s6kFd2dSDehN1B+ry6++pP58RvnDU0t5RN3QhHfLrHtTl1x2od/l1D+ry6x7U5dfR1A0NVF1+3YN6E3UH6vpbkgd1/S0JTd3QytOVTT2oK5t6UFc2daA+lE09qCubelBXNoVTf/98fSibelBvou5AXdnUg7qyqQd1ZVMP6sqmHtSVTR2on8qmHtSVTT2oK5t6UFc29aDeRN2BurKpB3VlUw/qyqYe1JVNPagrm36een0om3pQVzb1oK5s6kFd2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQL0om3pQVzb1oK5s6kFd2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQL0qm3pQl19/T/1R2xeOcbyj/r4L6clJ1B2oy697UJdf96Auv+5BXX4dTf19A1Wt8usO1Df5dQ/q+luSB3X9LcmDurIpmvr7LqS6NVF3oK5s6kFd2dSDurKpB3VlUw/qyqZw6u//qtGUTT2oK5t6UFc29aCubOpBvYm6A3VlUw/qyqYe1JVNPagrm3pQVzZ1oL4rm3pQVzb1oK5s6kFd2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQP1QNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdnUgXpXNvWgrmzqQV3Z1IM6p18v39RL72+oW1owOqcDx3Pk9NR4jpwuGc+R0/fCOQ5OJ/s7joZ+iMHpTfEcOd0mniPn3zbwHJs4vuVoePd8KM9gOCrPYDgqz2A4Ks9gOCrPQDieyjMGju+fP57KMxiOyjMYjsozGI5NHCEclWcwHJVnMByVZzAclWcwHJVnEBy3h/IMhqPyDIaj8gyGo/IMhmMTRwhH5RkMR+UZDEflGQxH5RkMR+UZCMeiPIPhqDyD4ag8g+GoPIPh2MQRwlF5BsNReQbDUXkGw1F5BsNReQbCsSrPYDgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ6BcNwo/WM599cr/vVR6zuO7/sAto3SP97AkdI/3sCxiSOEI6V/vIEjpX/8Jcf3vQrbRukfb+BI6R9v4Ej5PBzPsVE+D/8lx/fvsW9NeQbDUXkGw1F5BsOxiSOEo/IMhqPyjIHj++ePTXkGw1F5BsNReQbCcVeewXBUnsFwVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDyD4ag8A+HIuVX9Bo7KMxiOyjMYjsozGI5NHCEclWcwHJVnMByVZzAclWcwHJVnIBw5N3HfwFF5BsNReQbDUXkGw7GJI4Sj8gyGo/IMhqPyDIaj8gyGo/IMhCPnPvYbOCrPYDgqz2A4Ks9gODZxhHDk9I+jPF4CRz/ecTT0AXDuv76BI6d/hHPk3H99A0dO/4jnyOkff8fR0KvAuf/6Bo5NHCEcOZ+H4zlyPg//HUfDe+yc+69v4Kg8g+GoPIPg2Dj3X9/AUXkGw1F5xsDx7fPHxrn/+gaOTRwhHJVnMByVZzAclWcwHJVnMByVZyAcOfdf38BReQbDUXkGw1F5BsOxiSOEo/IMhqPyDIaj8gyGo/IMhqPyDIQj5/7rGzgqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXDclGcwHJVnMByVZzAclWcwHJs4Qjgqz2A4Ks9gOCrPYDgqz2A4Ks9AOJLuY8dz5PSPx9ZeAvujv+P4vg+gke6/xnPk9I94jpz+Ec+R0z/iOXL6x99xNLynSbr/Gs6RdP81niPn83A8R87n4XiOyjMYjk0c33N8n69J91/jOSrPYDgqz2A4Ks9gOCrPQDiS7r/Gc1SewXBUnsFwVJ7BcGziCOGoPIPhqDyD4ag8g+GoPIPhqDwD4Ui6/xrPUXkGw1F5BsNReQbDsYkjhKPyDIaj8gyGo/IMhqPyDIaj8gyEI+n+azxH5RkMR+UZDEflGQzHJo4QjsozGI7KMxiOyjMYjsozGI7KMxCOpPvY8RyVZzAclWcwHNfxj19vuRxHefOdt7P8uXY7f57iQmYdR4gms47HQ5NZx7Whyazjw7Bk9oU2Q6PJrOOV0GTWcT9oMus8n0WTaSIzISMPPCND6YFbffXbtNZmZCg9sIkMpQc2kaH0wBYyC20T/g2Z8k1mn5Gh9MAmMpQe2ESG0gObyDSRmZCh9MAmMpweuLz+0NDKlAynB7aQ4fTAFjKcHthAZqENtGgypB7YQIbUAxvIkHpgA5kmMhMypB7YQEYeeEZGHnhGRh54RkYeeEJmoa2laDLywDMy8sAzMvLAMzJNZCZk5IFnZOSBZ2TkgWdk5IFnZOSBJ2QW2nSJJiMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QmahbZ1oMvLAMzLywDMy8sAzMk1kJmQi+5nS9heZcj7ekLG85xZ6ux9ebWTfAVcbelMeXm1kf4BXG3nm49VGnuN4tZFnM15t5GdOeLWRnyPh1VJ5qdCbxX6l1vLmcuj9X3C1obd04dUu46VMapfxUpa3OkPvpcKrbVRql/FSJrXLeCmT2mW8lEntOl7K8Mwx9O4huNrQG4LwatfxUha1C3kpg9qFvJRBbaNSu5CXMqhdyEsZ1C7kpQxqqbxU6L0ncLWht5Pg1VJ5qdCbPvBqqbzU2ajUUnmp0PtT8GqpvFToPSd4tUxe6gi9jwSvlslLHaH3huDVMnmp49Go1DJ5qSP0Hg68WiYvdYTel4FXS+WlQu+1wKul8lKh90/g1VJ5qdB7IvBqqbxU6H0OeLWR5+3j+HrDsTzGG7WGz54foTv08Wojz1u82sjzFq828rzFq408b/FqI89bvNrI8xavNvKzC7zayM8u8GqpvFToLvZfqTW8/XSE7lfHq13GS5nULuOlTGrbMmrfvyFzhO4rx6tdxkuZ1C7jpUxql/FSJrXLeCmL2tCd3r9U+/6ZY+iebrzadbyURe06XsqitlGpXchLGdQu5KUMahfyUga1C3kpg9qFvNR7taG7ofFqqbxU6A5nvFoqLxW6axmvlspL7VReKnQ3Nl4tlZcK3Y0NVxu6GxuvlspLhe7Gxqul8lKhu7Hxaqm8VOhubLxaKi8Vuhsbr5bKS4XuxsarpfJSobux8WqpvFTobmy8WiovFbobG6+WykuF7saGq43cn9z7+Vo+2M+3akd9ffZ81NlnzyP3J9+gNvC8vUFt4Hl7g9rA8/YGtYHn7S/VttenOkcf7+727XX/HtNPgEbuWnYmE3iOO5MJ/PzEl0zkvmdnMuv4RDSZdTwlmsw6/vMXZH61Mf141bK0UWYUmygCKK7jlz0pUvpwOEVKzw6nSOnv4RQpswCYYo/cbZ6IImXGgFOkzCNwisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABQj7xJIRFHZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorILgGLkvSyJKCq7ICgquyAoKrsgKMrpvLnWsKmiR95Ckodi5A0YQf6Pfv+eXo+8WSMRRU0XBMUmigCKejKGoKgnYwiK8osA1x1500oiinoyBqAYeTNMIorKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABQjb2JKRFHZBUGRM7v84hRbf33fbTy+r23tSpEzu6ApNlH879eeX9ee20Xd/rhS5MwuaIqc2QVNkTO7oClyZhc0Rc7sAqYYefNZIoqc2eU3FB/bF8XjB8W/XLu9znAe5w9v+Rd1+7e49nVt/fHLUSQK/MtR0gr8y2n65cT95SgXBv7lKG4G/uUoxQb+5SgcB/7lKHPH/eVEXrypX46eEAT+5egJwbtfzv4NfEwegkVel5qIYhNFAEWFYwRFpVgERcVNBEXlQgRFBTgAxaGkhaCoSPTj2gsZ5ZEZGWWMGZkmMhMyygIzMvL3MzLy7DMy8uEzMvLWEzIrral+u0a4r7R62qB2Ia9qULuQ/zSobVRqF/KJBrULeT+D2oX8nEHtQh7NoHYh3/VW7Vhpda9BLZOXGiutwjWoZfJS49Go1DJ5qbHSqlaDWiYvNVZafWpQS+WlVlolalBL5aVWWs1pUEvlpVZadWlQS+WlVlodaVBL5aVWWsVoUEvlpVZabWhQS+WlVloVaFBL5aVqo1JL5aUqlZdaaYmkQS2Vl6pUXmqj8lIrLdw0qKXyUistsDSobVRqqbzUSosbDWqpvNRKixANaqm81EqLBQ1qqbzUSov6DGqpvNRKi+8Maqm81EqL5AxqqbzUSovZDGqpvNRKi84Maqm81EqLwwxqqbzUSou4DGqpvNRKi60Maqm81EqLogxqqbzUSouXDGqpvNRKG4cMaqm81Eo7cQxqqbzUSltbDGqpvNRKe0XeqyVdN/CLZerbWf5cu511RpGzhxNNkbOzE02xiSKAImcXKJoiZ28omiJnxyiaImcfKZoiZ3cpmCLpXgA0RWUXBEVllzfXtvr6vq21GUVlFwTFJooAisouCIrKLu8olm+Ks+eLpPsR0BSVXRAUlV0AFFfa0eBIUdkFQVHZ5S3F198AW5lSVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOzy7ymeK+1EcaSo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUBxpR1EjhSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7ACiutPPLkaKyC4KisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMWVduw5UgztFx8vAb0f+xuKhnfqz9j73eBqQ/svuNrQPgmuNrSfgasN7TvgakP7A7Ta2Pvd4GpDPyuEqw39TA+ulspLxd7v9hu1htaRM/Z+N7jaZbyUSe0yXsqkdhkvZWgiOGPvd0Orjb3fDa52GS9lUruMlzKpXcZLmdS2ddS+f+YYe78bXO06Xsqidh0vZVG7kJcyqF3IS71XG3u/G1ztQl7KoHYhL2VQu5CXMqhtVGqpvFTs/W5wtVReKvZ+N7haKi/VqbxU7N19cLVUXir2Ljy42kallspLxd4BB1dL5aVi71SDq6XyUrF3lMHVUnmp2Du/4GqpvFTsHVpwtVReKvZOKrhaKi8Ve8cTXC2Vl4q9MwmulspLxd5BBFcbed4ej/pSexztjVrLZ89D71HBq408b/FqI89bvNrI8xasdn+E3vOBVxt53uLVRp63eLWRn13g1TYqtURe6ql2GS/1/u2np9plvJRJ7TJeyqR2GS9lURt678Dv1L59Q+apdhkvZVK7jJcyqV3GS5nUNiq1y3gpk9p1vNTbZ45Ptet4KYvadbyURe06XsqgNnQPOl7tQl7KoHYhL2VQu5CXMqhtVGoX8lIGtVReKnQ/NV4tlZcK3fcMVxu6lxmvlspLbVReKnQ3Nl5to1JL5aVCd2Pj1VJ5qdDd2Hi1VF4qdDc2Xi2VlwrdjY1XS+WlQndj49VSeanQ3dh4tVReKnQ3Nl4tlZcK3Y2NV0vlpUJ3Y+PVUnmp0N3YeLWR522rX1sN9+v2wb9vNayvz56POvvseej+ZLzayPMWrjZ0fzJebeR5i1cbed7+Tu0vdq+O9rp/j+knQEN3LfuSiTzHfclEfn7iSybysxZfMuv4RDSZdTwlmsw6/vOmjenzE39TDN1lnYfiOn7ZkyKlD4dTpPTscIpNFAEUKbMAnCJlboBTpMwYcIqUeQROUdkFQDF0d3weisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFEPvashDUdkFQVHZBUFR2QVBsYkigKKyC4KisguCorILgqKyC4Kissu/p1hC773JQ1HZBUFR2QVBUdkFQVFO5821hg0+JfSWlzQUQ28YCUHR8P5yCb25JA9FTRcExSaKAIp6MoagqCdjCIryi+8oHvuL4igzivKLCIp6MgagGHrzTh6Kyi4IisouCIrKLgiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXQAUQ2+6ykNR2QVBkTO7/OIUda+vb1z37XE5xX7lyJle8BybOP73a7fH1zfeHvuYceRMMHiOnBkGz5EzxeA5cuYYPEfOJAPnGHrTXCaOnGnmVxzH9sXx+mm8nxyVZzAclWcwHJs4Qjgqz2A4Ks9gOCrPYDgqz7zjWMrrMe72/PP+jKPyDIRj6G2PmTgqz2A4Ks9gOCrPYDg2cYRwVJ75DcetzDgqz2A4Ks9gOCrPYDgqz0A4LrRNF8LxQkYJZUZGmWNGRiliRqaJzISMnP6MjLz7jIzc+IyM/PWMzEKO+e1O4rLSNl2D2oW8qkHtQv7ToHYhT2lQ26jULuT9DGoX8nMGtQt5NIPahXyXQS2Vl1ppu6dBLZWXWmlbpkEtlZdaafukQS2Vl1ppm6NBLZWXWmk7okEtlZdaadugQS2Vl1ppe59BLZWXWmkbnkEtlZdaabucQS2Vl1ppW5tBLZOXqittPzOoZfJSdaVtYga1TF6qPhqVWiYvVR9MXqqutGfOoJbJS9UHlZcqVF5qpZ18BrVUXmqlHXcGtY1KLZWXWmm3m0EtlZdaaVeaQS2Vl1pp95hBLZWXWmmXl0EtlZdaaTeWQS2Vl1pp15RBLZWXWml3k0EtlZdaaReSQS2Vl1ppt5BBLZWXWmlPj0EtlZdaaeeNQS2Vl1ppf4xBLZWXWmkXi0EtlZdaaa+JQS2Vl1ppR4hBLZWXWmnfhkEtlZdaaXeFQS2Vl1ppD4RBLZWXWmmngkEtlZdaaT+BQS2Vl1qp69+glspLrdSbb1BL5aVW6qA3qKXyUit1xRvUUnmplTrdDWqpvNRK3esGtVReaqWOdINaKi9F1XteqXrPK1XveaXqPa9UveeVqve8UvWeV6re80rVe16pes8rVe95Xakb+xebk7bxdYry5trtLH+u3c46o7jQHHekyLkTD02Rc38emiLnrj00Rc69fGiKnFuvwRRX6mB3pMi5HxtNkXOXNpqisguCYhPF/35tq6/v21qbUVR2QVBUdkFQVHZBUFR2eUexfFOcPV9caTeBG8VtpZ0HjhSVXRAUlV0QFJVdEBSbKL6j+PobYCtTisouCIrKLgiKyi4IisouCIrKLgCKK+0YcaSo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUBxpZ0+jhSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7ACiutEPLkaKyC4KisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMWVdtY5UlR2QVBUdkFQjOwX6/m6uG/neEexvt6pH7XO1Eb2dXi1kf0XXm1kn4RXG9nPwNWG3u/2O7W/uNcbeiK30LvgfMlE9ge+ZCI/r/Ql00RmQmYdn4gms46nRJNZx3/eldCO/ZXQRplRXMfXelJcxy87Ugy9GzAPRUrPDqdI6e/hFCmzAJxiE0UARcqMAadImUfgFJVdEBSVXRAUlV0AFEPv4sxDUdkFQVHZBUFR2QVBsYkigKKyC4KisguCorILgqKyC4KisguAYujdt3koKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHYBUAy9DTYERcMGzi30Ntg8FDVd3v0fbXhPL/QGzjwUNV0QFPVkDEFRT8b+PcUWegNnHoryi//edbfQGzjzUNSTMQTFJooAisouCIrKLgiKyi4IisouCIrKLgCKoTdw5qGo7IKgqOyCoKjsgqDYRBFAUdkFQZEzu/ziFOVxbl8wznY5xX7lyJle8Bw588tvOB6tvmAce5lx5EwwcI6hN3Fm4siZYvAcOXMMniNnksFzbOII4ciZZn7FsbcvjmObcVSewXBUnsFwVJ7BcFSegXAMvZ0zE0flGQxH5ZnfcDwfM47KMxiOTRwhHJVnMByVZzAclWd+XHsho4QyI6PMMSETek+mLxnlghkZOf0ZGXn3GZkmMhMy8tczMgs55rc7qNpCO1Atahfyqga1C/nP92pX2oFqULuQTzSoXcj7GdQu5OcMahuV2oV8l0EtlZdaaZ+nQS2Vl1ppP+Z7tSvtsTSopfJSK+2FNKil8lIr7Vk0qKXyUivtLTSopfJSK+0BNKil8lIr7dUzqKXyUivtqTOopfJSK+19M6il8lIr7VEzqKXyUivtJTOopfJSK+35Mqil8lIr7c0yqKXyUivtoTKopfJSK+11Mqil8lKDyksNKi91UnmplTZ+GdRSeamTykudjUotlZdaaYuZQS2Vl1ppK5hBLZOX2lfasmVQy+Sl9pW2VhnUMnmp/dGo1DJ5qX2lrUoGtUxeal9pS5FBLZWXWmnrj0EtlZdaaYuOQS2Vl1ppK41BLZWXWmnLi0EtlZdaaWOKQS2Vl1pp+4hBLZWXWmmTh0EtlZdaaSuGQa02N7+5djvLn2u3s84oanMzgqI2NwMokm4JQFPU5mYERW1uRlDU5mYExSaKAIra3IygyLkZAE1R2QVBUdnlzbWtvr5va21GUdkFQJF0NwGaorILgqKyyzuK5Zvi7Pki6X4ENMUmigCKyi4IisouCIrKLgiKyi5vKb7+BtjKlKKyC4DiSjswHCkquyAoKrsgKCq7ICg2UQRQVHZBUFR2QVBUdkFQVHZBUFR2AVBcaeeMI0VlFwRFZRcERWUXBMUmigCKyi4IisouCIrKLgiKyi4IisouAIor7XhypKjsgqCo7IKgqOyCoNhEEUBR2QVBUdkFQVHZBUFR2QVBUdkFQHGlnWqOFJVdEBSVXRAUlV0QFJsoAigquyAoKrsgKEb2i+XxOkavx/6OYn29Uz9qnagNvd8Nrzay/8KrjeyT8Goj+xm82raM2l/c6y09kaF3wfmSiewPfMlEfl7pSybyM0hfMuv4RCyZI/SeO18y6/jPmxKaieI6vtaT4jp+2ZNiE0UARUrPDqdI6e/hFCmzAJwiZW6AU6TMGGiKoXdF5qGo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUAx9G7WPBSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7ACiG3u+ch6KyC4KisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMXQ22BDUDRsbD9Cb4PNQ1HT5c21hl6HI/QGzjwUNV0AFENv4MxDUU/GEBT1ZAxBUX7xHcVjf1EcZUaxiSKAop6MISjqyRiCorILgqKyC4KisguAYugNnHkoKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHZBUOTMLr84xfiiOI7j69r6OK8UObMLmGLoDZwhKJZWtxeMtl2uPq//T4fewZmJI2d+wXPkTDB4jk0cIRw5UwyeI2eOwXPkTDK/4ri1L45tm3FUlsFwVJqBcAy9lTMTR+UZDEflGQxH5RkMxyaO7zieXxz3x5Sj8gyGo/IMhqPyDIaj8sz/QDgqz0A4LrSN1pej8sw7jvtj/+JY2oyj8gyGo/IMhmMTRwhH5RkMR+UZDEflGQxH5Zm3/rE/vjnuM47KMwiOnXMT8vwUFzJKKDMyyhwzMkoRMzJNZCZk5PRnZOTdZ2Tkxmdk5K9nZBZyzG/bEftKG3UNahfyqga1C/lPg9qFPKVBbaNSu5D3M6hdyM8Z1C7k0QxqF/JdBrVUXmqlDZ8GtVReaqWNmQa1VF5qpQ2UBrVUXmqljY4GtVReaqUNiQa1VF5qpY2DBrVUXmqlDX4GtVReaqWNeAa1VF5qpQ1zBrVUXmqljW0GtVReqlF5qUblpRqVl1ppl59BbaNSS+WlGpWXWmnvoUEtlZdaaY/ge7Ur7fszqKXyUivtzzOopfJSK+2jM6il8lIr7XczqKXyUivtSzOopfJSK+0fM6il8lIr7fMyqKXyUivtxzKopfJSK+2bMqil8lIr7W8yqKXyUivtQzKopfJSK+0WMqil8lIr7ekxqKXyUivtvDGopfJSK+2PMail8lIr7WIxqKXyUivtNTGopfJSK+0IMail8lIr7dswqKXyUivtrjCopfJSK+2BMKil8lIr7VQwqKXyUivtJzCopfJSK3X9G9RSeamVevMNapm81Fipg96glslLjZW64g1qmbzUeDQqtUxeaqzUvW5Qy+Slxkod6Qa1VF6Kqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+VurGPl9q+3jznY9tfJ2ivLl2O8ufa7ezziguNMcdKS7kDxwpLuQ7/Ciu1D3uSHEhn+RIcSH/5UhxIV/nSLGJIoDiQs/0HCkquyAoKru8ubbV1/dtrc0oKrsgKCq7ACiu1PXvSFHZ5R3F8k1x9nxxpd0EjhSVXRAUmygCKCq7ICgquyAoKru8pfj6G2ArU4rKLgiKyi4Aiivt1nCkqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVAcaVdNo4UlV0QFJVdEBSVXRAUmygCKCq7ICgquyAoKrsgKCq7ICgqu/x7iudKu6McKSq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUFxpV5sjRWUXBEVlFwRFZRcExSaKAIrKLgiKgf3icbbXxf2xj3cU6+ud+lHrTG1gX4dXG3m/2w1qA/ukG9QG9jM3qA3sO36p9hf3ekNP5Bl5F5wzmcD+wJlM4OeVzmQCP4N0JrOOT0STWcdTgslE3ol3H5lfJbRjfyW0UWYU1/G1nhTX8cueFCl9OJxiE0UARUp/D6dImQXgFClzA5wiZcaAU6TMI2iKkXdQJqKo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUAx8s7XRBSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7AChG3u+ciGITxf9+rWED5xl5G2wiipou7/6PNrynF3kDZx6KkTdwJqKoJ2MIinoyhqCoJ2MIik0U/73rjryBMxFFPRlDUNSTMQRFZRcERWUXAMXIGzgTUVR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgyJldftN1OR6vQ1wpHv1CMfIGzkQUObPLL05Ryv76X7qUo804cqYXPEfO/ILn2MQRwpEzw+A5cqYYPEfOHIPnyJlkfsXxG0Y5jxlHZRkAx+MReSdnKo7KMxiOyjMYjsozGI5NHCEclWd+wbE+thlH5RkMR+UZDEflGQxH5RkIx8h7Oj04XsgooczIKHPMyChFzMg0kZmQkdOfkZF3n5GRG5+Rkb+ekVnIMb/bP3U8Ftp/alG7kFc1qF3IfxrULuQpDWobldqFvJ9B7UJ+zqB2IY9mULuQ7zKopfJSK+3yNKil8lIr7cY0qKXyUivtmjSopfJSK+1uNKil8lIr7UI0qKXyUivtFjSopfJSK+3qM6il8lIr7b4zqKXyUivtkjOopfJSK+1mM6il8lIr7TozqKXyUivtDjOopfJSK+3iMqil8lIr7bYyqKXyUivtijKopfJSK+1eMqil8lIHlZc6qLzUStu+DGqpvNRB5aUOKi+10mY0g1oqL7XSpjGDWiovtdLmLoNaKi+10iYsg1oqL7XSZimDWiovtdKmJoNaKi+10uYjg1oqL7XSJiGDWiovtdJmHoNaKi+10qYbg1oqL7XS5hiDWiovtdImFoNaKi+10l4Tg1oqL7XSjhCDWiovtdK+DYNaJi9VSHcF/GIL33aWP9duZ51R1NZmBEVtbUZQ1NZmBMUmigCK2tqMoKitzQiK2tqMoKitzQiKnJsBwBRJ9wKgKSq7vLm21df3ba3NKCq7ICgquyAoNlEEUFR2eUexfFOcPV8k3Y+ApqjsgqCo7IKgqOwCoLjS7gdHisoubym+/gbYypSisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMWVdq04UlR2QVBUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoLjSbiNHisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFFfaJeZIUdkFQVHZBUFR2QVBsYkigKKyC4KisguCorILgqKyC4KisguAYuj9bv18HeM4H/0dxfp6p37UOlMb2dfh1TYqtZF9El5tZD+DVxvZd/xO7S/u9ZaeyNC74HzJRPYHrmRC75jzJRP5GaQvmXV8IprMOp4STaYxkvlVQjv2V0IbZUZxHV/rSXEdv+xJkdKHwylSenY4RUp/j6YYekdiHoqUuQFOkTJjwClS5hE4xSaKAIrKLgiKyi4IisouCIrKLgiKyi4AiqF3kuahqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2eXfU6yh9zvnoajsgqCo7IKgqOyCoNhEEUBRTufNtYYNnDX0Ntg0FENv4Izxf/T79/Rq6A2ceShquiAo6skYgqKejCEo6skYgqL8IsB1h97AmYZi6A2ceSjqyRiCorILgqKyC4JiE0UARWUXBEVlFwRFZRcERWUXBEVlFwDF0Bs481BUdkFQVHZBUOTMLr84RXmc2xeMs11OsV85NnGEcOTML7/heLT6gnHsZcaRM8HgOXJmGDxHzhSD58iZY+AcQ+/jzMSRM8vgOXKmmV9x7O2L49hmHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrP/Ibj+ZhwDL2jMxNH5RkMR+UZDEflGQzHJo7Xay9klFBmZJQ5ZmSUImZklAtmZOT0J2QOefcZGbnxGRn56xmZhRzz2x1UdaEdqBa1C3lVg9qF/KdB7UKe0qB2IZ9oULuQ93uvdqX9owa1C3k0g9qFfJdBLZWXWmmfp0EtlZdaaT+mQS2Vl1pp36RBLZWXWml/o0EtlZdaaR+iQS2Vl1ppv6BBLZWXWmlfn0EtlZdaaf+dQS2Vl1ppn5xBLZWXWmk/m0EtlZdaad+ZQS2Vl1ppf5hBLZWXWmkfl0Etk5faVtpvZVDL5KW2lfZFGdQyeant0ajUMnmp7cHkpbYHk5faVtr4ZVBL5aUKlZcqVF5qpe1oBrVUXmqlbWMGtVReaqXtXQa1VF5qpW1YBrVUXmql7VIGtVReaqVtTQa1VF5qpe1HBrVUXmqlbUIGtVReaqXtPAa1VF5qpW03BrVUXmql7TEGtVReaqVdLAa1VF5qpb0mBrVUXmqlHSEGtVReaqV9Gwa1VF6KdFfALzbxbWf5c+121hlFbW5GUNTmZgRFbW5GUNTmZgRFbW4GUCTdD4CmqM3NCIra3IygyLkZAE2xiSKAorLLm2tbfX3f1tqMorILgqKyC4KisguCorLLO4rlm+Ls+SLpfgQ0RWUXBEVlFwRFZRcExSaKAIrKLm8pvv4G2MqUorILgqKyC4KisguCorILgOJKu0AcKSq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUFxp944jRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AiivtunKkqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2eXfU2wr7ZZzpKjsgqCo7IKgqOyCoBjZLx5fRWnHMcYbioZ36lvo/W54tZH9F15tZJ8EVxt6vxtebWTfgVcb2R/g1Uae43i1jUpt5Gd6eLVUXir0frdfqTW0jrTQ+93wapfxUha1ofe74dUu46UMTQQt9H43vNplvJRJbaNSu4yXMqldxkuZ1K7jpQzPHEPvd8OrXcdLGdSG3u+GV7uQlzKoXchLGdQu5KUMahuV2oW8lEHtQl7KoJbKS4Xe74ZXS+WlQu93w6ul8lKNyks1Ki8VencfXi2Vlwq9Cw+vlspLhd4th1dL5aVC72rDq6XyUqF3n+HVUnmp0LvE8GqpvFTo3Vx4tVReKvSuK7xaKi8VencUXi2Vlwq9iwmvlspLhd5thFdL5aVC72fZt+118d7fvQ0J3qPbQu9ccSUTeo+KL5nIM9+XTGR/4EsmspfwJdNEZkImskfxJRP52ZAvmcjPkXzJyAPPyFB6YMvbcKH3cfiSofTAJjKUHthEhtIDW97wCr3fwpcMpQc2kaH0wCYylB7YRIbSA5vIcHpgw98OQu918CXD6YEtZDg9sIUMqQc2kGkiMyFD6oENZEg9sIEMqQc2kCH1wAYy8sB/J7OH3g/gS0YeeEZGHnhGRh54RqaJzISMPPCMjDzwjIw88IyMPPCMjDzwhEzonRK+ZOSBZ2TkgWdk5IFnZJrITMjIA8/IyAPPyMgDz8jIA8/IyANPyITeBeJLRh54RkYeeEZGHnhGponMhIw88IyMPPCMjDzwhMzH93Fg31zbP75hA33+mvz8W/Lzt+Tn35Of/0h+/p78/CP5+c/c52/J528LPH8Nb6TuLfD8NZ0/8Pw1nT/w/DWdP/D8Nbz1trfA89d0/sDz13T+wPPXdP7A89dy/j3w/DWdP/L8NTx/2CPPX8v5I89fy/kjz1/L+UPPX8P5Q89fw/lDz1/D+UPPX8P5Q8/f9+c/Qs9fw/mTz98j+fw9ks/fj3euo8+ffP4eyefvkXz+Hsnn75F8/vbk87cnn789+fztyefvx7vH0edPPn978vnbk8/fnnz+9uTzdySfvyP5/B3J5+9IPn8/3nuMPn/y+TuSz9+RfP6O5PN3JJ+/iJ7SUl/nL3sHnt/y+StEm6jr+Vvy8+/Jz38kP39Pfv6R/Pxn6vMfiF5H1/OX5OfPPX+PR+D5a/j86vEIPH9N5w88f03nDzx/TecPPH8Nn588HoHnr+n8geev5fwl8Pw1nT/w/DWdP/D8NZ0/8vx9//zhQHSduZ4/8vy1nD/y/LWcP/T8NZw/9Pw1nD/0/H1//hp6/hrOH3r+Gs4fev4azp98/iJ6llzPn3z+1uTztyafvzX5/K3J5++WfP5uyefvlnz+bsnnL6J/yfX8yefvlnz+bsnn75Z8/m7J529LPn9b8vnbks/flnz+IvqXXM+ffP625PO3JZ+/Lfn8bcnn7558/u7J5y+g/+fxdaT6GBvw/JbPXwH6f3zPfyQ/f09+/pH8/Gfu8wP6f3zPX5KfvyY//5b8/Mnn7xF4/lo+v3oEnr+m8weev6bzB56/pvMHnr+Wz0/2wPPXdP7A89d0/sDz13T+wPPXdP7A89d0/sjz1/D8oUeev5bzR56/lvNHnr+W84eev+/PP0LPX8P5Q89fw/lDz1/D+UPPX8P5Q89fw/mTz9+RfP6O5PN3JJ+/I/n8PZPP3zP5/D2Tz98z+fwF9C/5nj/5/D2Tz98z+fw9k8/fM/f87Y/c87c/cs/f/sg9f/sj9/ztj9zztz9yz9/+yD1/+yP3/O2P3PO3P5LP35J8/pbk87ckn78l6/zd69b/z9/ffu/nq5D6HJfDn99fdv6jL/v7u97vv6z8sy+rv/6y3p/a/v5GTR/n19c9rr/Q7687/uHX9X/4deMfft35z77u728qGL6u/MOv+9d3hvm13z9k+8QPaf/2h5Rzf/2zLWc/39wj2rG//r8f5T/+v///R9rjHemId6Qe70jjziN9/5jzIz/m33/63fZjymd+TP3Mj9k+82PaZ37M/pkfc3zmx/TP/JgPp8by2B5f3/q4eMl2GXOf/iiw6VCf/nyv7VAl4qECJ7GjHl/X1r8PxsgfxLUcv+U+fuDHoJbjB34Kajl+4IegluMHfgZqOX7gR6CG40f+BK7l+IEfgFqOn3vqRv74reX4uadu5A/fWo6fe+pG/uit5fi5p27kD94ajh/5c7eW4+eeupE/dWs5fu6pG/kzt5bj5566kT9xazl+7qkb+fO274+/Rf6453+ta/lz/KxtP3+On/XDhn+On/Wzhn+On/Wjhn+On/WThn+On/WDhv//+Gk/Z/jn+JE/Zvj2UxNb6E8ZGo4f+UOGhuO33MePPHUNx488dQ3Hjzx1DcePPHUNx488dd8fv0aeuobj5566NffUrbmnLmCzo+vxc0/d+umpO31288+O33Mff8Q9fnns+9cxjkuv6uXDeFs9kwvYHtkFlOwCanYBW3YBLbuAPbKA959p3rbAU9gmIMwc/j5SmNn6faQw0/LrSC3M/Ps+0odXNZVSXgJK2S5vshzb5VA14qG2iIdqEQ8VeP2g5X+JwNsHLccPvHzQcvzAuwctxw+8etBw/MibBy3HD7x40HL8wHt/LccPvPbXcvyW+/i5p+6ee+ruuafunnvq7rmn7pF76h65p+6Re+oeuacuYNej6/FzT90j99Q9ck/dI/fUPXJP3Z576vbcU7fnnro999QFNMu4Hj/31O2B7/uGN4564Pu+4fgj8J3H8NbFCHznsRw/8J3HcvzAdx7L8QP7fcvxA/t9y/ED3/cNH6Acge/7huOfgf2+5fiB/b7l+JGnruH4kaeu4fiRp67h+JGnruH4kaeu4fiRp67h+Lmn7pl66rZH6qnbHqmnbnuknrrt8empC33jqD1a7uPvcY9fHv3rg6iP8yLg8kHU9jiyC+jZBYzsAs7kAsoju4CSXUCNLKCd3wLqDwH/eXU/Xy8njcfl2nFcxAae2Hixgec7XmxkN/DjtZTZ/4eR3YBJQGQ3YBIQ2Q2YBER2AxYBNbIbMAmI7AZMAiK7AcPbfa1GnvAmAZGntklAmkk8E5BmEs8EhJnE30cKM1u/jxRmWn4daQsz/76PBJho4/VTam37myOVfXt9571NjlTjHWmLd6QW70j7Z4+E/VxkAzSzuB6/5z7+yH38M/XxAd0wrscvuY9fcx9/y338lvv4uaduyz11W+6p23JP3ZZ76u65p+6ee+ruuafunnvqIvpuPI+fe+ruuafunnvq7rmn7p576h65p+6Re+oeuafukXvqIvpuPI+fe+oeuafukXvqHrmn7pF76vbcU7fnnro999Ttuacuou/G8/i5p27PPXV77qnbc0/dnnvqjtxTd+SeuiP31B25py6i68nz+Lmn7sg9dUfuqTtyT92Re+qeuafumXvqnrmn7pl76iK6njyPn3vqnrmn7pl76p65p+6Zeuruj9RTd3+knrr7I/XU3R+pp+7+SD1190fqqbs/Uk/d/ZF66u6P1FN3f+SeuiX31C25p27JPXVL7qmLaGDyPH7uqVtyT92Se+qW3FO35J66NffUrbmnbs09dWvuqYtoUPI8fu6pW3NP3Zp76tbcU7fmnrpb7qm75Z66W+6pu+Weup/um0IfP/fUzd1Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m2rP3U215+6m2nN3U+25u6n23N1Ue+5uqj13N9Weu5tqz91Ntefuptpzd1Ptubup9tzdVHvubqo9dzfVnrubas/dTbXn7qbac3dT7bm7qfbc3VR77m6qPXc31Z67m+rI3U115O6mOnJ3Ux25u6mOR+qpe+Tupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5vqyN1NdeTupjpyd1MdubupjtzdVEfubqojdzfVkbub6sjdTXXk7qY6cndTHbm7qY7c3VRH7m6qI3c31ZG7m+rI3U115O6mOnJ3Ux25u6mO3N1UR+5uqiN3N9WRu5uq5+6m6rm7qXrubqqeu5uqP1JP3Z67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupeu5uqp67m6rn7qbqubupRu5uqpG7m2rk7qYaubupxiP11B25u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbubauTuphq5u6lG7m6qkbub6szdTXXm7qY6c3dTnbm7qc5H6ql75u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m+rM3U115u6mOnN3U525u6nO3N1UZ+5uqjN3N9WZu5vqzN1Ndebupjpzd1OdubupztzdVGfubqozdzfVmbub6szdTXXm7qY6c3dTnbm7qc7c3VRn7m6qM3c31Zm7m6o8cpdTPc+feu4+z5968D7Pn3ryPs+fevQ+z5969j7Pn3r4Ps+fevo+z596/D7Pn3z+5q6pep4/+fzNXVT1PH/y+Zu7qup5/uTzN3dZ1fP8yedv7rqq5/mTz9/chVXP0yWfv7krq56nSz5/c5dWPU+XfP7mrq16ni75/M1dXPU8XfL5m7u66nn+5PM3d3nV8/zJ52/u+qrn+ZPP39wFVs/zJ5+/uSusnudPPn9zl1g9z598/uausXqeP/n8zV1k9Tx/8vmbu8rqef7k8zd3mdXz/Mnnb+46q+f5k8/f3IVWz/Mnn7+5K62e508+f3OXWj3Pn3z+5q61ep4/+fzNXWz1PH/y+Zu72up5/uTzN3e51fP8yedv7nqr5/mTz9/cBVfP8yefv7krrp7nTz5/c5dcPc+ffP7mrrl6nj/5/M1ddPU8f/L5m7vq6nn+5PM3d9nV8/zJ52/uuqvn+ZPP39yFV8/zJ5+/uSuvnudPPn9zl149z598/uauvXqeP/n8zV189Tx/8vmbu/rqef7k8zd3+dXz/Mnnb+76q+f5c8/fkrz/qiTvvyrJ+69K8v6r8sg9f0vy/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/Ksn7r0ry/quSvP+qJO+/qsn7r2ry/quavP+qJu+/qo/c87cm77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77+qyfuvavL+q5q8/6om77/aIvcvbWf5c+12Ts8f+P5vOn/g+08r7c+1reyz8we+/5jOH/j+Yzp/4PuP6fyB/b/p/IH9v+X8kft/2rG/zj/K7PyB7/+m8wf2/6bzB/b/pvNHnr+W80eev5bzR56/lvNHnr+W80eev5bzR56/hvNH7v8xnT/5/I3c/2M6f/L5G7n/x3T+5PM3cv+P6fzJ52/k/h/T+ZPP34/3/0yfyf7ntee+/bn2HNvs/CX5+Wvc8x9tfz1AOVrv31ef2z/917ZRqW1UancqtUdOtRcFPb2CkV7BmV1BC+wfjAoCOwijgqQe4qIgqS+4KEg66y8Kks7vi4LIM3nfXmHg2N86kH4+/lw8HpfvPI6r2sjzG6828qzHq43sC+Bq98ge4ldq0Z9O2yN7E18ykT2PL5nIXsqXTBOZCZnI3s+XzDKeEk5mGf8JJ7OMV4WTWcbXoskc8sAzMvLAMzLywDMy8sAzMk1kJmTkgWdk5IFnZOSBZ2TkgWdk5IEnZLo88IyMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54AmZIQ88IyMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QuaUB56RkQeekZEHnpGRB56RaSIzISMPPCMjDzwjIw88IyMPPCMjD/x3Mu0hDzwjQ+lnDF3q7dFEZkKGcjYZ+q/bg3I2mchQziYLmUI5m0xkKJ/PmMhQPp8xkaH0M4aOtfbxbvo8ZCifz5jIUD6fMZHh9MAWMpwe2EKG0wMbyFROD2whw+mBLWQ4PbCFjDzwjEwTmQkZeeAZGXngGZl1PPAvvnPdX2Rqn5JZxwOjyazjgX9Fpr8E1v18fF99jAubyNtD3Nms44PxbNZxwng263hhPJsmNlM26/hhPJt1HPFv2Bz715mP45yx4fTENjacrtjGhtMXm9iE3orjzYbTF9vYcPpiGxtOX9y3+vWI4nrmn2ya2EzZcPpiGxtOX2xjw+mLbWw4fbGNDacvNrFZaNPTr9g8zm82xw82/3n1ub0uPq9eqLW/XNv319/H+tm+rq2PK3JOu+2KnNPFuyInDQeeyJuQfxo5aZTxRE6akDyRkwYvT+Skec4TOWlMdES+0I61NMg50+d4vMjUUcvkYchC69vwbDjznI1NE5spG86EZGPDGWVsbDgzh40NaTjo5zeb+sY29fPx5+LxuFw7jitHUseP5rjQmjhfjqTefG9fHI8+uecttFYOz4bUm5vYNLGZsiH15iY2pN7cxIbUm5vYcHrzK5s++7DRQkvm4GwWWjOHZ8Ppi8/H17vwZxkzNpy+2MaG0xfb2DSxmbLh9MU2Npy+2MaG0xfb2HD64iubeszYcPpiE5uFVs/h2ZD64qN8seltxobUF5vYkPpiE5smNlM2pL7YxIbUF5vYkPpiExtSX3xhM2afc1loGR2azb7QOjo8G/niORv54jkbAl98Uduo1BJ414taAjd6URvZXx6P+nXxdeXYX9UaKtP30Asi8Woje0C42tCLHPFqI/u0X6mt9XVL+3GKn2ojOy+82sheCq+2UamN7KXwaiN7KbzaZbyUYZXIHnrRIF7tMl7Kojb0QkC82nW8lEXtOl7KonYdL2VR26jUruOlLGpDe6nWvi4e443a8XXxmHqp0Mvt8GpDeym42tBeCq029Fo5vNrQXgquNrSXgqsN7aXgahuV2tBeCq6WykuFXoqGV0vlpUIvLoOrDb2KDK+WykuFXheGV0vlpUKv9MKrpfJSoddu4dVSeanQq7Hwaqm8VOj1VXi1VF4q9NImvFoqLxV6VRFeLZWXCr2gB6+WykuFXkuDV0vlpUIvY8GrpfJSoTeb4NVSeanQ20fwapeZt9v5eiV1O2dvtoXe9ABXG7r//ldqW3ld3MrsX3LoRnu82mXuySa1y9yTTWqXybcmtcvkW5PaZeat5Y3U0O3teLXL5FuL2tAN63i163gpi9p1vJRF7TpeyqK2Ualdx0tZ1K7jpSxqqbxU6MZvvFoqLxW6lRuvNqmXuihI6o8uCiJ7nr69tvYefS+If3GNSm1kz4NXG9nz4NVG9jy/Umtpzwnd5oxXG9nzoNUeoRuX8Wojex682sj+CK92GS9l6Bw5Ho1K7TJeyqR2GS9lUruOl7KoXcdLWdSu46UMakP3HOPVruOlLGrX8VIWtWm81OTJ2hG6u9imII3nmSoI7WPO1zGO8/FuX0M5+utpbnlefrl6v+oN7WRu0Bvay9ygN7SbwesN3TV8h97QjuYGvaE9zQ16Q7uaG/Q2Mr2hHdMNesn8Vejm4Tv0kvmr0O3DN+gN3T98h14yfxW6g/gOvWT+KnQP8R16yfxV6C7iO/SS+avQfcR36CXzV6E7ie/QS+avQvcS36GXzF+F7ia+Qy+ZvwrdT3yHXjJ/Fbqj+A69ZP4qdE/xHXrJ/FXoruI79JL5q9B9xXfoJfNXoTuL79BL5q9C9xbfoZfMX4XuLr5DL5m/Ct1ffIdeMn8VusP4Dr1k/uog81ehW6rv0Evmrw4yf9XJ/FXoJvI79JL5q9Bt5HfobWR6yfxV6E7yO/SS+avQveR36CXzV6G7ye/QS+avQveT36GXzF+F7ii/Qy+ZvwrdU36HXjJ/Fbqr/A69ZP4qdF/5HXrJ/FXofvM79JL5q9h96DfoJfNXsTvRb9BL5q9i96LfoJfLX/XY3eg36OXyVz12P/oNern8VX80Mr1c/qrH7km/QS+Xv+qxu9Jv0Evmr2L3pd+gl8xfxe5Mv0Evmb+K3bF+g14yf0XW397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn62/vZP3tnay/vZP1t3ey/vZO1t/eyfrbO1l/eyfrb+9k/e2drL+9k/W3d7L+9k7W397J+ts7WX97J+tv72T97Z2sv72T9bd3sv72Ttbf3sn62ztZf3sn628fZP3tg6y/fZD1tw+y/vbxaGR6ufzVIOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e2DrL99kPW3D7L+9kHW3z7I+tsHWX/7IOtvH2T97YOsv32Q9bcPsv72QdbfPsj62wdZf/sg628fZP3tg6y/fZD1tw+y/vZB1t8+yPrbB1l/+yDrbx9k/e1jnb7rUcufi0f9+Z2/1J7rtF2b1C5zrxrt9U95XE/xU+0ydyqT2mXuUya1y6RAk9plMqBJ7TIJ0KR2nXlrULtO+7FJ7TLZz6R2meRnUkvlpdZpPTapTeqlLgqS+qOLgsie52yvi/tjH+9yd/k+dH1s31cf/ao3suu5Q29k33OD3tC9xHfojex97tAb2f3coTey/7lDbyPTG9kD3aE3smO6Qy+ZvwrdS3yHXjJ/FbqX+A69ZP4qdC/xHXrJ/FXoXuI79JL5q9C9xHfoJfNXoXuJ79BL5q9C9xLfoZfMX4XuJb5DL5m/Ct1LfIdeMn8Vupf4Dr1k/ip0L/Edesn8Vehe4jv0kvmr0L3Ed+gl81ehe4nv0Evmr0L3Et+gN3SP66/0Wt6MCd3iile7zL3K8mnO0A2feLXL3KdMapdJgSa1y2RAk9plEqBFbeheT7zadeatRe0y2c+kdpnkZ1LbqNRSeanQXZ7/Re1FQVJ/dFEQ2PP08ngdo9djf5e7W3+8Dr2X69U//s0Fdj136I3ct3mL3sDO5xa9gb3PLXoDu59b9DYyvYEd0C16A3ugW/QGdky36CXzV5H7Nu/QG7lv8xa9ZP4qct/mLXrJ/FXkvs1b9JL5q5PMX51k/uok81eR+2PxeusjcoPsLXqp/NVTL5W/euql8ldPvY1ML5W/euql8ldPvVT+6qmXyl899ZL5q8iNwbfoJfNXkVuDb9FL5q8iNwffopfMX0VuGr5Db+Qe19/pff+myFPtMtPIpHaZe9X7Tzc+1S5zpzKpXeY+ZVK7TAo0qV0mA5rULpMALWoj93reoHadeWtRu0z2M6ldJvmZ1DYqtVReKnKX539Te1GQ1B9dFET2PPX8erNnO9+9idWO/c/F7f/95L//i4vseeBqI3dt3qA2sufBq43sefBqI3sevNpGpTay58Grjex58Goj+yO8WiovFblZE682cq/mDWqpvFTkTs0b1FJ5qch9mjeopfJSkbs0b1BL5aV2Ki+1U3mpyJ2wN6il8lIHlZc6qLxU5L7fG9RSeanIfb83qKXyUpH7fm9QS+WlIvf93qCWyktF7vu9QS2Vl4rc93uDWiovFbnv9wa1VF4qdI8wXi2VlwrdIYxXS+WlQvcH49VSeanQ3cF4tVReKnRvMF4tlZcK3RmMV0vlpUL3BePVUnmp0F3BeLVUXip0TzBeLZWXCt0RjFdL5aVC9wPj1TJ5qRK6GxivlslLldC9wHi1TF6qPBqVWiYvVUL3AePVMnmpEroLGK+WykuF7gHGq6XyUqE7gPFqqbxU6P5fvFoqLxW6+xevlspLFSovVai8VOgOa7xaKi9VqbxUpfJSofvJ8WqpvFTofnK8WiovFbqfHK+WykuF7ifHq6XyUqH7yfFqqbxU6H5yvFoqLxW6nxyvlspLUfWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes8LVe95oeo9L1S954Wq97xQ9Z4Xqt7zQtV7Xqh6zwtV73mh6j0vVL3nhar3vFD1nheq3vNC1XteqHrPC1XveaHqPS9UveeFqve8UPWeF6re80LVe16oes/LOm3Ro5Y/F49aZ2qXmUAmtcvcpUZrL7XXU/xUu8xdyqR2mbuUQW1dp1HYpHaZxGdSu0ziM6ldZ95a1K4zby1ql0l8JrXLJD6TWiYvVddpFDapTeqlvhVkbQm+KIjseVodLwX7Ud78i9tKecXurWzXq/er3siu5w69kX3PHXobmd7I3ucOvZHdzx16I/ufO/RGdkB36I3sgW7QG7oL+A69ZP4qdB/wHXrJ/FXoTuA79JL5q9C9wHfoJfNXobuB79BL5q9C9wPfoZfMX4XuCL5DL5m/Ct0TfIdeMn8Vuiv4Dr1k/ip0X/Adesn8VejO4Dv0kvmr0L3Bd+gl81ehu4Pv0Evmr0L3B9+hl8xfhe4QvkMvmb8K3SN8h14yfxW6S/gOvWT+KnSf8B16yfxV6E7hO/SS+avQvcJ36CXzV6G7he/QS+avQvcL36GXzF+F7hi+Qy+ZvwrdM3yHXjJ/Fbpr+A69ZP4qdN/wHXrJ/FXozuE79JL5q9C9w3foJfNXobuH79BL5q9C9w/foZfMX4XuIL5DL5m/Ct1DfIdeMn8Vuov4Dr1k/ip0H/Edesn8VehO4jv0kvmrk8xfnWT+6iTzV6F7tu/Q28j0kvmrk8xfhe5Sv0Mvmb8K3aeO17uFblS/Qy+Xv9pCt6rfoZfLX22PRqaXy19todvV79DL5a+20A3rd+gl81ehG9nv0Evmr8j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tv38j62zey/vaNrL99I+tvb2T97Y2sv72R9bc3sv729mhkern8VSPrb29k/e2NrL+9kfW3N7L+9kbW397I+tsbWX97I+tvb2T97Y2sv72R9bc3sv72Rtbf3sj62xtZf3sj629vZP3tjay/vZH1tzey/va2Tt/1qOXPxaP+/M4XtctMI5PaZe5Vo7WX2uspfqpd5k5lUrvMfcqkdpkUaFK7TAY0qV0mAVrUrtN/bFK7zry1qF0m+5nULpP8TGoblVoqL5W18/iiIKk/uiiI7HmOR30pOI6G+BcX2fPA1YbuJMarjex58Gojex682sieB6+2UamN7HnwaiN7HrzayP4Ir5bKS4VuIIarDd0/jFdL5aVCdw/j1VJ5qdC9w3i1VF4qdOcwXi2VlwrdN4xXS+WlQncN49VSeanQPcN4tVReKnTHMF4tlZcK3S+MV0vlpUJ3C+PVUnmp0L3CeLVUXip0pzBeLZWXCt0njFdL5aVCdwnD1YZuXv2V2u18vduxnbN3O0L3ruLVLnOXauX1L7mV6b/kZe5SJrXL3KVMapdJfCa1yyQ+k9plEp9B7R66ifN3ao/Xi7JtlJnaZeatSe0yic+kdpnEZ1LbqNSu46UsatfxUha163gpi9p1vJRF7TpeyqA2dOsmXi2VlwrduIlXS+WlQrdt4tUm9VIXBUn90UVBZM/TH6/HBr0f+//862f6e+g2TLzayJ4HrjZ0EyZebWTPg1cb2fPg1Ub2PHi1jUptZM+DVxvZH+HVUnmpSuWlKpWXCt3iildL5aU2Ki+1UXmp0A29eLVUXip0Qy9eLZWXCt3Qi1dL5aVCN/Ti1VJ5qdANvXi1VF4qdEMvXi2Vlwrd0ItXS+WlQjf/4tVSeanQzb94tVReKnTzL14tlZcK3fyLV0vlpUL3pf5KreHN0T10Xype7TJ3KcsbaKE7NfFql7lLmdQuk/hMapdJfCa1yyQ+k9pl5q3lM+KhOzXxapdJfCa1yyQ+k9p1vJRFbaNSu46Xsqhdx0tZ1K7jpSxq1/FSFrVUXip0pyZeLZWXCt2piVdL5aVCd2r+F7UXBUn90UVBaM9zfm3EPR/jzb+4cz//XHwel2v3x1VtaM8DVxva88DVhvY8aLWhW1zxakN7Hrja0J4Hrja054GrbVRqQ/sjuFoqLxW6oRevlspLhW7oRas9Qjf04tUyeakjdEMvXi2TlzoejUotk5c6Qjf04tUyeakjdEMvXi2Vlwrd0ItXS+WlQjf04tVSeanQDb14tVReKnSbL14tlZeK3fwLV0vlpWI3/8LVUnmp2M2/cLVUXip28y9c7TITaNTXm6Oj/vzOF7XLTCCL2tidmr9S+/6N7yN2pyZc7TJ3KZPaZRKfSe0yic+kdpnEZ1K7zry1qF1n3hrUxu7UhKtdJvGZ1FJ5qdidmnC1Lafai4Kk/uiiILLnOdv5peB69T99d+oI3X2JVxvZ8+DVRvY8cLWhuy/xaiN7nl+prXV7HWM6F0N3X+LVRvY8eLWNSm1kf4RXu4yXMqldxkuZ1C7jper+mre1T+ftMl7KojZ0iyte7TpeyqJ2HS9lUbuOl7KobVRq1/FSFrXreCmL2jRe6vyh9qIgjT+aKkjjeWYKIrfjjsfj9TR6PGr5n3//TChyO+4NagP7mBvUBvYxN6htq6i1JOnI7bg3qA3sY25QG9jH3KA2sOe5QW1gf4RXG7kd95dqDfkjcjvuDWqX8VImtct4KZPaRqV2HS9lUbuOl7KoXcdLWdSu46UsatN4qdnnBiM36RoVpPE8UwWhfczxMtmjvP20sOUpSeTG2xvUNiq1oX0MXG1oHwNXG9rHwNWG9jFwtaF9DFhtj9x4e4Pa0P4IrpbJS/XIjbc3qG1Uapm8VI/ceHuDWiYv1SM33t6glspLRW68vUEtlZeK3Hh7g1oqLxW58fYGtVReKnLj7Q1qqbxU5MbbG9RSeanIjbc3qKXyUpEbb29Qu8wE2s5XT+h21pnaZSaQRe22zl2qvLqtWtlnate5S1nUrnOXsqhdJ/FZ1DYqteskPotaqsQXufH2BrVUiS9y4y1ebeTG2xvUUiW+yI23N6ilenoeufH2BrVUT88jN+neoJbKS0Vu0r1BLZWXityke4PapF7qoiCpP7ooiOx5Stu/FJwPxL+4RqU2sufBq43sefBqI3sevNrIngevNrLngauN3Hh7g9rIngevNrI/wqul8lKRG29vUEvlpSI33t6glspLRW7HvUEtlZcK3bqLV0vlpUK37uLVUnmp0K27eLVUXip06y5eLZWXCt26i1dL5aVCt+7i1VJ5qdCtu3i1VF4qdFfpr9Ra3mQJ3VUKVxu6J/N3/5INn4gP3amJV7vOXcqitlGpXSfxWdSuk/gsaqkSX+hOTbxapsQ3Qndq4tUyJb4RulMTr5Yp8Y1Ho1LL9PR8hO7UxKtl8lIjdKcmXi2VlwrdqYlXm9RLXRQk9UcXBZE9T91eF4/aTsS/uEalNrLnwauN7HnwaiN7nl+pNexyHaG7L/FqI3seuNrQ3Zd4tZE9D15tZH+EV7uMlzJswHx+Fyq1y3gpk9plvJRJ7TpeyqJ2HS9lUbuOlzKoDd3Qi1e7jpeyqA3tpc7XMZ6/FcSzwdANvXi1jUptaC8FVxvaS/1GrSUDhW7oxasN7aXgakN7KbTa0A29eLWhvRRc7TJeyuIcQzf04tU2KrXLeCmT2nW8lEXtOl7KonYdL2VRu46XMqgN3dCLVxvZS23tq992G/WN2n17Xbxv7evaWspVbWQvhVcb2Uvh1TYqtZG91K/UHtv4+s7lzXeen+JCJrLv8iUT2aP5kons53zJRPZ+rmRCtxr7klnGU8LJLOM/4WSW8apwMk1kJmTkgWdk5IFnZOSBZ2TkgWdk5IEnZEK3UfuSkQeekZEHnpGRB56RaSIzISMPPCMjDzwjIw88IyMPPCMjDzwhE7pF3JeMPPCMjDzwjIw88IxME5kJGXngGRl54BkZeeAZGXngGRl54AmZUx54RkYeeEZGHnhGRh54RqaJzISMPPCMjDzwjIw88IyMPPCMjDzw38mcoXeL+JKRB56RkQeekZEHnpFpIjMhIw88IyMPPCMjDzwjIw88IyMPPCETeieMLxl54BkZeeAZGXngGZkmMhMy8sAzMvLAMzLywDMy8sAzMvLAEzKhdwT5kpEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IRN6t5MvGXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sATMqF3cvmSkQeekZEHnpGRB56RaSIzISMPPCMjDzwjIw88IyMPPCMjDzwhE3qXmi8ZeeAZGXngGRl54BmZJjITMvLAMzLywDMy8sAzMvLAMzLywBMy2hM3JSMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QoZzs9V2lj/XbueUDOXUNpGhvAO30v5c28o+I0N5BzaRobwDW8hwbikykaF8CmEiQ/kUwkSG0s+0Y3+RGWVGponMhAzlUwgTGcqnECYynB7YQobTA1vIcHpgAxnOLUUmMpwe2EKG0wNbyMgDz8g0kZmQkQeekZEHnpGRB56RkQeekZEH/iuZ7cG5pchERh54RkYeeEZmHQ/8i+987q9v/HwQPiPTRGZCZh0P/IvvXPbzdfHzP/vl6seVzTouGM9mHR+MZ7OOE8azWccLw9kstK/oN2yO7fUn7tIfP9n859X79jrGvrWva2spV47reGdfjus4bV+OlL78Bo5NHCEcOT0/niNnPsBz5MwSeI6cuQPPkTOjwDkutHvKl6PyDIaj8gyGo/IMhmMTRwhH5RkMR+UZDEflGQxH5RkMR+UZCMeF9oj5clSewXBUnsFwVJ7BcJR/fM/xcb44ljHjKP8I4bjQziPX/68X2pDky1HzGsNR8xrDsYkjhKOeP2I4yj9iOMo/PmafsV1obxSejZ4TTtkstDvqN2z618WlH1M2nPnAxobT89vYcPp4G5smNlM2nH7bxobTQ4/yeAkc/fiff++hF9o65cuR02/jOXJ6czjHhfZf+XLk9Px4jpz5AM+RM0vgOTZxhHDkzCh4jsozGI7KMxiOyjMYjsozEI5deQbDUXkGw1F5BsNReQbDsYkjhKPyDIaj8gyGo/IMhqPyDIaj8gyE40KbQX05Ks9gOCrPYDgqz2A4NnGEcFSewXBUnsFwVJ7BcFSewXBUnoFwXGjLqy9H5RkMR+UZDEflGQzHJo4QjsozGI7KMxiOyjMYjsozGI7KMwiOhXPH6C85vu8mK48mjhCOmjOY/681ZzAcNWcgHEl3YeI56rkZhqOem2E4yj9iODZx/MnxwkbPwuZs9HxrzoY0S5z7S+BZzxkb0nxgYkPq+S1sSHdA2tiQenMTG1K/bWLD6aHP/fU4sD5q/Z9/76FJ9y/iOXL6bTxHTm+O58jp4/EcOT0/niNnPoBzJN2/iOfImTvwHDkzCp6j8gyGYxNHCEflGQxH5RkMR+UZDEflGQxH5RkIR9L9tHiOyjMYjsozGI7KMxiOTRwhHJVnMByVZzAclWcwHJVnMByVZyAcSXfk4jkqz2A4Ks9gOCrPYDg2cYRwVJ7BcFSewXBUnsFwVJ7BcFSegXAk3RWM56g8g+GoPIPhqDyD4djEEcJReQbDUXkGw1F5BsNReQbDUXkGwpF0VzCeYxPHtxwN3Y2kO0XxHDVnMP9fa85AOJLucMRz1HMzDEc9N8Nw1HMzDMcmjhCO8o//i+OFjZ6Fzdno+dacDWWWqI9Wvtj0KRvKfGBjw7nn0MiG0scb2VB6cyMbSr9tZNMo2ZTy+s619P4/bzz00V4eerTLKc4rR0oPfQNHSr99A0dKb34DR04fj+fI6fnRHOuDMx/gOXJmCTxHztyB58iZUfAcmzhCOCrPYDgqz2A4Ks9gOCrPYDgqz0A4cu6nvYGj8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQhHzj29N3BUnsFwVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDyD4ag8A+HIuSv4Bo7KMxiOyjMYjsozGI7yPe85vu/eqZw7RfEcOXc4/pLj+06EyrnD8QaOmjMYjk0cIRz13AzDUc/NMBzlHzEc5R//F8cLGz0Lm7Lh3LX4/LPwF5vaT8D/f5y7Fm/gyJk7fsex1i+O++S5DOeuxRs4NnGEcOTMHXiOnLkDz5Ezd+A5cuYOPEfOjPI7jt9/j7rmmR8cOXct3sBReQbDUXkGw1F5BsOxiSOEo/IMhqPyzG84Tj+Hw7lr8QaOyjMYjsozEI6cuxZv4MiZZ7bvvwFu/fGOo+HvM50zz+A5cuaZX3E89xeN83JtfdQrxyaOEI6ceQbPkTPP4Dly5hk8R848g+fImWd+x/F8XXyebcKRc6fvDRyVZzAclWcwHJVn3nJ8MmhfOMbxg+Rfrn7+P/66+ilgxr2Juwt35SUf7spXPtyVx3y4K7/5cFfec+FOuv/Zn7vypA935U8f7sqrPtybuLtwV1714a686sNdedWHu/KqD3flVQ/uG+k+cn/uyqs+3JVXfbgrr/pwb+Luwl151Ye78qoPd/l3MHdDW/RGun3bm7q8DJr6+zeONtJNyt7U5WM8qMvFeFDXM3cP6nri7kFdft2BOul2aRj1C0k9P0eR1BNxFEnlwvcky+PraVLZyoxkE0kQSeU3FEllMhRJ5SwUSWUnFEnlIQPJ/VUEXmr5+Sb1P/27Eel+an/uyk8+3JW2fLgrm/lwb+Luwl25z4e7UqIPd2VKH+5KoD7clVdduDflVR/uyqs+3JVXfbgrr/pwb+Luwl151Ye78qoPd+VVH+7Kqz7clVdduO/Kqz7clVd9uCuv+nCXjwRzt7yJustFOlA/NFPR1A3vzhyaqB7UNU89qOvprwf1JuoO1PXk14O6/LoHdfn1f0X9QlLPcVEk9WQWRLIrF74nWev5RXI/ZySV9VAkld9QJJXJUCSbSIJIKjuhSCoPGUjO/xL0T/9u1JWIfLgrP/lwV9py4T6UzXy4K8n5cFfu8+GulOjDvYm7C3clUB/uyqs+3JVXfbgrr/pwV1514X4qr/pwV1714a686sNdedWHexN3F+7Kqz7clVd9uCuv+nBXXvXhrrzqwb1pvzuau+FN1PZoou5AXTMVTf39uzPtoYnqQV3z1IG69rq7UNezXw/qevLrQV1+3YN6E/V/Q/1CUs9xUST1ZBZFUrkQRVJZD0VS+Q1EsiqToUgqZ6FIKjuhSCoPoUg2kfxJ8sJGqWXORjlkzkbJYs5GWWHORu5/yoZ18/z5muG1bfXNxO/7+HNxP6+tZ1eMpGYejZHUyf8GYynHV5NPufx/XcsPkqRO/gaSTSRBJEl9/w0kSVPCDSRJM8WvSNby+tbPhx/nD5L/ebXlL8Cs+9KdqZPmIF/qrLvSnakrkHlQV37zoK6s50G9iboDdWVID+rKmx7UlU09qCubelBXNnWgzroX3Zm6sqkHdWVTD+rKph7Um6g7UFc29aCubOpBXdnUg7qyqQd1ZVMH6oeyqQd1+XU0dUOX1tFE3YG6PIzHHUYexoO6PIwD9S4P40Fdz9c9qOv5ugd1+XUP6k3U/w31C0k9M0eR1HNwFEnlwvckt8frbd6ytSlJZT0USeU3EMmhTIYiqZyFIqnshCKpPGQg+d1g1vb6g+Rfru57fV09LtzLvl+5N3F34a785MNdacuHu7KZD3clOR/uyn0u3Fk3z7tzV6b04a4E6sNdedWHexN3F+7Kqz7clVd9uCuv+nBXXvXhrrzqwX1/KK/6cFde9eGuvOrDXXnVh3sTdxfuyqs+3JVXfbgrr/pwV1714a686sK9KK/6cFde9eGuvOrDXXnVh3sTdxfuyqs+3JVXfbgrr/pwV1714a686sK9Kq/6cFde9eGuvOrDXT4SzN3QBLlXuUgH6ptmKpr6++6qfdNE9aCueepBXU9/Pag3UXegrie/HtTl1z2oy6//K+oXknqOiyKpJ7PvST7/PvnCsY8H4E7QlCE9qCtDoqnX+kX9QuM8r9SVIT2oK0N6UG+i7kBdGdKDujKkB3VlSA/qypto6kd7Ue99Rl3Z1IH6rmzqQV3Z1IO6sqkHdWVTD+pN1B2oK5veR320GXVlUw/qyqYe1JVNPagrmzpQP5RN31M/Hq9zlGPf3lD/b1dfuCud+nBXPkVzfz7f+ronHd9X/3yf5VBC9eHexN2Fu1KqD3flVB/uSqo+3JVV4dyP74zVx4y70qoL96686sNdedWHu/KqD3flVR/uTdzB3Nt5fHE/f/rIf/bMuCvbxv8dKQfH/x0pM8P/BtC/4B3nYzZjlJl9uCszu3Afysw+3JWZfbgrM/twV2b24d7EHc39/Oro7I99xl052Ie7sq0Pd+VVH+7Kqz7clVdduJ/Kqz7clVfh3OvX1b3+9O//7JnxqWwb/3ekHBz/d9T0OwL/jsbj6+9jo8z2WpzKzD7clZl9uCsz+3BXZvbhrszswf14KDP7cFdmhnOvXy3r49I8/b+4Kwf7cFe29eHexN2Fu/KqD3flVR/uyqs+3JVX0dz/y57df/TM+Hgo24b/HRXl4Pi/I2XmD/6OLtyVmX24KzP/K+4Xkk0kQSQ5c237Gk91L/0Nyf929YUkZ1K9gyRn9vwVyfP7g3yP6wf5xg+DxRkmbwDJmfjwICtnLLsBJGd2ugEkZxi6ASRnuvkVyP/H4AtHKzOSTSRBJJVuUCSVblAklW5QJBVvUCSVbwwkj/MLx/UcP0huCjgokko4KJKKOCiSyjgokk0kQSSVcd6TLI8vHOX63uhPkso4KJLKOCiSyjgokso4IJJNGQdFUhnHQPL4JjmmJJVxUCSVcVAkm0iCSCrjoEgq46BIKuMYSLb2TfLnXx/+8+pzez3uOI/LZ6hb+8u1fX/9WaOf3+8X1OvHCJuiU/BfkBJZ7F/QrqAX/Bek/Bj8F6RYGvwXpLQb/BfU9AuK/QtSNg/+C1LkD/4L0pOE4L8gPUl4/wuq29da59rG5KHZrsgPInkom6NIKkSjSCrtokgqlqJINpF8T7I8vkmeM5IKeiiSSmTT8o9DYWjOhiCHXNQSZIVvtZ3Az1/UEnjui1oCX3xRS+BdL2oblVoCD3hRS+DTLmoJnNdFLZWX6lRealB5qZHUS10UJPVHFwVJPc9FQUuvIKk3uShI6jcuCiJ7iPa1yG206yK3v9552/F6uNyuf27+eeeN7CHwaiN7CLjaM7KHwKuN7CHwaiP7jV+prV/70H+c4qfayN4Er7ZRqY3sefBqI/sjvNplvJRJ7TJeyqR2GS9V99e8rX0yb3vopdR4tct4KZPadbyURe06XsqitlGpXcdLWdSu46UsakN7qVa/1O77v8+3PfQSWbza0F4KrTb0YlO82tBe6jdqDamgh17MiVcb2kvB1TYqtaG9FFxtaC8FV7uMl7I4x9A7FPFql/FSFrWhtxHi1a7jpSxq1/FSFrXreCmL2kaldh0vZVG7jpeyqKXyUqEXtuHVUnmp0IvP8GqTeqmLgqT+6KIgqee5KGjpFST1JhcFSf3GRUFSD3FRkNQXXBQknfXfCkIv9bEpSD+TQy+xsSlIP5NDL22xKUg/k0MvKbEpSD+TQ2/PsClIP5ND71+wKUg/k0M3+NsUpJ/JoTvgbQrSz+TQLeI2BelncugeapuC0DO59y8FZ/2h4HdXf+sN3dJ8h97Q8/43es/99Umoc2w/vvNFbWhvAFcb2kfA1TYqtaH9CVxtaC8DVxva95imSmjfY1IQxvd8nylO4+zlTGH8w+VMYab85UxhZvHlTGEm5uVMYeba5Uxhps/lTGFmxOVMYe76lzMFvI/Habu8nCngfTxOy+TlTAHv43GaIC9nCngfj9PWeDlTwPt4nJbEy5kC3sfjNA5ezhTwPh6nve9ypoD38ThNeJczBbyPx2mVu5wp4H08TkPb5Uzx7uMjTtvZ5Uzx7uMjTnPY5Uzx7uPjEe8+PuJ0ZV3OFO8+PuL0Tl3OFO8+Pu7tcPr+Ofe2J11+TvnQz6kf+jnbh35O+9DP2T/0c44P/Zz+oZ8zPvRzPnQ/qB+6H9QP3Q/qh+4H9UP3g/qh+0H90P2gfuh+UD90P6gfuh/UD90Ptg/dD7YP3Q+2D90Ptg/dD7YP3Q+2D90Ptg/dD7YP3Q+2D90Ptg/dD9qH7gftQ/eD9qH7QfvQ/aB96H7QPnQ/aB+6H7QP3Q/ah+4H7UP3g/1D94P9Q/eD/UP3g/1D94P9Q/eD/UP3g/1D94P9Q/eD/UP3g/1D94PjQ/eD40P3g+ND94PjQ/eD40P3g+ND9wPAmwv16F8/57rH9a/P7v/b1ZdT9ZCnGp89leFdjAF4DwB+JsB7APgzlYBnqgHPtAU8U7vzTJefs3/i57RH6J1f/2Ur97/7znU7y+vMbbte/fjL1eX5J5sXjrZ/X13L367eH+efi/cyLtf+oN5E3YF65PdA16Ue+X3UdalHfi92XeqR3+XNSf2reGX/ce0P6pF7V5alHnpX37rUI3fQrEs9chdOTurb+KK+zagrm3pQb6LuQF3Z1IO6sqkHdWVTD+rKpnDqr0PvW5tRVzZ1oB569+m61JVNPagrm3pQVzb1oN5E3YG6sqkHdWVTD+rKph7UlU09qCubOlAPvUt6XerKph7UlU09qCubelBvou5AXdnUg7qyqQd1ZVMP6sqmHtSVTR2oN2VTD+rKph7UlU09qCubelBvou5AXdnUg7qyqQd1ZVMP6sqmHtSVTR2o78qmHtSVTT2oK5t6UFc29aDeRN2BurKpB3VlUw/q8uvvqdfy+taljvMddUMX0iG/7kFdft2Duvy6B3X5dQ/qTdTB1A3tDYf8ugd1+XUP6vpbkgd1/S3Jg7qyqQP1rmwKp/7+OUxXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubOpAfSibelBXNvWgrmzqQV3Z1IN6E3UH6sqmHtSVTT2oK5t6UFc29aCubOpA/VQ29aCubOpBXdnUg7qyqQf1JuoO1JVNPagrm3pQVzb1oK5s6kFd2fTz1MtD2dSDurKpB3VlUw/qyqYe1JuoO1BXNvWgrmzqQV3Z1IO6sqkD9ULq18vrO9etP95S/26geh7pm+Tjb9/b0JlRCqlfd6ZO6tedqTdRd6BO6tedqZP69Rupt/qi/qP78Qd1Ur/uTJ3UrztTJ/1bki/1Svq3pBupv2/leYZdUXegrmzqQV3Z1IN6E3UH6sqmHtSVTeHU3z9fr8qmHtSVTT2oK5s6UN+UTT2oK5t6UFc29aCubOpBvYm6A3VlUw/qyqYe1JVNPagrm3pQVzZ1oN6UTT2oK5t6UFc29aCubOpBvYm6A3VlUw/qyqYe1JVNPagrm3pQVzZ1oL4rm3pQVzb1oK5s6kFd2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQP1QNvWgrmzqQV3Z1IO6sqkH9SbqDtTl199Tfz4jfOGopb2jbuhCOuTXPajLrztQ7/LrHtTl1z2oy6+jqRsaqLr8ugf1JuoO1PW3JA/q+lsSmrqhlacrm3pQVzb1oK5s6kB9KJt6UFc29aCubAqn/v75+lA29aDeRN2BurKpB3VlUw/qyqYe1JVNPagrmzpQP5VNPagrm3pQVzb1oK5s6kG9iboDdWVTD+rKph7UlU09qCubelBXNv089fpQNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdnUgXpRNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdnUgXpVNvWgLr/+nvqjti8c43hH/X0X0pOTqDtQl1/3oC6/7kFdft2Duvw6mvr7Bqpa5dcdqG/y6x7U9bckD+r6W5IHdWVTNPX3XUh1a6LuQF3Z1IO6sqkHdWVTD+rKph7UlU3h1N//VaMpm3pQVzb1oK5s6kFd2dSDehN1B+rKph7UlU09qCubelBXNvWgrmzqQH1XNvWgrmzqQV3Z1IO6sqkH9SbqDtSVTT2oK5t6UFc29aCubOpBXdnUgfqhbOpBXdnUg7qyqQd1ZVMP6k3UHagrm3pQVzb1oK5s6kFd2dSDurKpA/WubOpBXdnUg7qyqQd1Tr9evqmX3t9Qt7RgdE4HjufI6anxHDldMp4jp++FcxycTvZ3HA39EIPTm+I5crpNPEfOv23gOTZxfMvR8O75UJ7BcFSewXBUnsFwVJ7BcFSegXA8lWcMHN8/fzyVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPIDhuD+UZDEflGQxH5RkMR+UZDMcmjhCOyjMYjsozGI7KMxiOyjMYjsozEI5FeQbDUXkGw1F5BsNReQbDsYkjhKPyDIaj8gyGo/IMhqPyDIaj8gyEY1WewXBUnsFwVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDwD4bhR+sdy7q9X/Ouj1ncc3/cBbBulf7yBI6V/vIFjE0cIR0r/eANHSv/4S47vexW2jdI/3sCR0j/ewJHyeTieY6N8Hv5Lju/fY9+a8gyGo/IMhqPyDIZjE0cIR+UZDEflGQPH988fm/IMhqPyDIaj8gyE4648g+GoPIPhqDyD4ag8g+HYxBHCUXkGw1F5BsNReQbDUXkGw1F5BsKRc6v6DRyVZzAclWcwHJVnMBybOEI4Ks9gOCrPYDgqz2A4Ks9gOCrPQDhybuK+gaPyDIaj8gyGo/IMhmMTRwhH5RkMR+UZDEflGQxH5RkMR+UZCEfOfew3cFSewXBUnsFwVJ7BcGziCOHI6R9HebwEjn6842joA+Dcf30DR07/COfIuf/6Bo6c/hHPkdM//o6joVeBc//1DRybOEI4cj4Px3PkfB7+O46G99g591/fwFF5BsNReQbBsXHuv76Bo/IMhqPyjIHj2+ePjXP/9Q0cmzhCOCrPYDgqz2A4Ks9gOCrPYDgqz0A4cu6/voGj8gyGo/IMhqPyDIZjE0cIR+UZDEflGQxH5RkMR+UZDEflGQhHzv3XN3BUnsFwVJ7BcFSewXBs4gjhqDyD4ag8g+GoPIPhqDyD4ag8A+G4Kc9gOCrPYDgqz2A4Ks9gODZxhHBUnsFwVJ7BcFSewXBUnsFwVJ6BcCTdx47nyOkfj629BPZHf8fxfR9AI91/jefI6R/xHDn9I54jp3/Ec+T0j7/jaHhPk3T/NZwj6f5rPEfO5+F4jpzPw/EclWcwHJs4vuf4Pl+T7r/Gc1SewXBUnsFwVJ7BcFSegXAk3X+N56g8g+GoPIPhqDyD4djEEcJReQbDUXkGw1F5BsNReQbDUXkGwpF0/zWeo/IMhqPyDIaj8gyGYxNHCEflGQxH5RkMR+UZDEflGQxH5RkIR9L913iOyjMYjsozGI7KMxiOTRwhHJVnMByVZzAclWcwHJVnMByVZyAcSfex4zkqz2A4Ks9gOK7jH7/ecjmO8uY7b2f5c+12/jzFhcw6jvD/svdGa27jsLLuG51PpCiRerj17sf723G3e69wDM+UmgCq7ubC00H9SYwqxS6gyeTxeGgyeVwbmkweH4YlcyS6DI0mk8crocnkcT9oMnmez6LJNJGZkJEHnpGh9MCtPvttWmszMpQe2ESG0gObyFB6YAuZRNeEPyFTvskcMzKUHthEhtIDm8hQemATmSYyEzKUHthEhtMDl+c/NLQyJcPpgS1kOD2whQynBzaQSXSBFk2G1AMbyJB6YAMZUg9sINNEZkKG1AMbyMgDz8jIA8/IyAPPyMgDT8gkulqKJiMPPCMjDzwjIw88I9NEZkJGHnhGRh54RkYeeEZGHnhGRh54QibRpUs0GXngGRl54BkZeeAZmSYyEzLywDMy8sAzMvLAMzLywDMy8sATMomudaLJyAPPyMgDz8jIA8/INJGZkPHsZ0o7nmTKtb0hY/mem+vrfni1nn0HXK3rS3l4tZ79AV6t552PV+t5j+PVet7NeLWenznh1Xp+joRXS+WlXF8W+0it5ZvLru9/wdW6vtKFV5vGS5nUpvFSlm91ur5LhVfbqNSm8VImtWm8lEltGi9lUpvHSxmeObq+PQRX6/pCEF5tHi9lUZvISxnUJvJSBrWNSm0iL2VQm8hLGdQm8lIGtVReyvXdE7ha19dJ8GqpvJTrSx94tVRe6mpUaqm8lOv7KXi1VF7K9Z0TvFomL3W6vkeCV8vkpU7Xd0Pwapm81Lk1KrVMXup0fYcDr5bJS52u72Xg1VJ5Kdd3LfBqqbyU6/sTeLVUXsr1nQi8Wiov5fqeA16t5327nV/fcCzbeKPW8Nnz03WHPl6t532LV+t53+LVet63eLWe9y1ered9i1fred/i1Xp+doFX6/nZBV4tlZdy3cX+kVrDt59O1/3qeLVpvJRJbRovZVLb0qh9/w2Z03VfOV5tGi9lUpvGS5nUpvFSJrVpvJRFretO7w/Vvn/m6LqnG682j5eyqM3jpSxqG5XaRF7KoDaRlzKoTeSlDGoTeSmD2kRe6r1a193QeLVUXsp1hzNeLZWXct21jFdL5aUOKi/luhsbr5bKS7nuxoardd2NjVdL5aVcd2Pj1VJ5Kdfd2Hi1VF7KdTc2Xi2Vl3LdjY1XS+WlXHdj49VSeSnX3dh4tVReynU3Nl4tlZdy3Y2NV0vlpVx3Y8PVeu5P7v16Hh/s11u1oz4/ez7q7LPnnvuTb1DreN/eoNbxvr1BreN9e4Nax/v2Q7Xt+anO0ce7d/v2fP8e00+Aeu5aXkzG8R5fTMbx85O1ZDz3PS8mk8cnosnk8ZRoMnn85wdkPrqYfj5rWdooM4pNFAEU8/jllRQpfTicIqVnh1Ok9PdwipRZAEyxe+42D0SRMmPAKVLmEThFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4Aip5vCQSiqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVA0fNdlkAUlV0QFJVdEBSVXRAU5XTevNZwqaJ7vkISh6LnCxhO/ka//55e93xZIxBFbRcExSaKAIp6MoagqCdjCIryiwDX7fnSSiCKejIGoOj5MkwgisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFD1fYgpEUdkFQZEzu3wwxd6fP3cf2/drW3ulyJld0BSbKP7za6+v1177i7pje6XImV3QFDmzC5oiZ3ZBU+TMLmiKnNkFTNHz5bNAFDmzyycUt/2L4vmD4l9euz9nuM7rh7f8i7rjW1z7em398ZujSOT4N0dJy/FvTtNvjt/fHOVCx785ipuOf3OUYh3/5igcO/7NUeb2+5vj+fCmfnP0hMDxb46eELz7zTm+gY/JQzDP51IDUWyiCKCocIygqBSLoKi4iaCoXIigqAAHoDiUtBAUFYl+vPaFjPLIjIwyxoxME5kJGWWBGRn5+xkZefYZGfnwGRl56wmZTGeq354R7plOTxvUJvKqBrWJ/KdBbaNSm8gnGtQm8n4GtYn8nEFtIo9mUJvId71VOzKd7jWoZfJSI9MpXINaJi81tkallslLjUynWg1qmbzUyHT61KCWyktlOiVqUEvlpTKd5jSopfJSmU5dGtRSealMpyMNaqm8VKZTjAa1VF4q02lDg1oqL5XpVKBBLZWXqo1KLZWXqlReKtMRSYNaKi9VqbzUTuWlMh3cNKil8lKZDlga1DYqtVReKtPhRoNaKi+V6RCiQS2Vl8p0WNCglspLZTrUZ1BL5aUyHb4zqKXyUpkOyRnUUnmpTIfZDGqpvFSmQ2cGtVReKtPhMINaKi+V6RCXQS2Vl8p02MqglspLZToUZVBL5aUyHV4yqKXyUpkuDhnUUnmpTDdxDGqpvFSmqy0GtVReKtNdkfdqSc8NfHBMfb/Kn9fuV51R5OzhRFPk7OxEU2yiCKDI2QWKpsjZG4qmyNkxiqbI2UeKpsjZXQqmSHoXAE1R2QVBUdnlzWtbff7c1tqMorILgmITRQBFZRcERWWXdxTLN8XZ80XS+whoisouCIrKLgCKmW40LKSo7IKgqOzyluLz3wBbmVJUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7PLfKV6ZbqIspKjsgqCo7IKgqOyCoNhEEUBR2QVBUdkFQVHZBUFR2QVBUdkFQDHTDaKFFJVdEBSVXRAUlV0QFJsoAigquyAoKrsgKCq7ICgquyAoKrsAKGa6+bWQorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcAxUw39hZSdO0Xt6eA3s/jDUXDd+ov3/fd4Gpd+y+4Wtc+Ca7WtZ+Bq3XtO+BqXfsDtFrf993gal0/K4Srdf1MD66Wykv5vu/2iVpD68jl+74bXG0aL2VSm8ZLmdSm8VKGJoLL9303tFrf993gatN4KZPaNF7KpDaNlzKpbXnUvn/m6Pu+G1xtHi9lUZvHS1nUJvJSBrWJvNR7tb7vu8HVJvJSBrWJvJRBbSIvZVDbqNRSeSnf993gaqm8lO/7bnC1VF6qU3kp37f74GqpvJTvW3hwtY1KLZWX8n0DDq6Wykv5vqkGV0vlpXzfKIOrpfJSvm9+wdVSeSnfN7Tgaqm8lO+bVHC1VF7K940nuFoqL+X7ZhJcLZWX8n2DCK7W8749t/pUe57tjVrLZ89d31HBq/W8b/FqPe9bvFrP+xas9thc3/nAq/W8b/FqPe9bvFrPzy7wahuVWiIv9VCbxku9//bTQ20aL2VSm8ZLmdSm8VIWta7vDnym9u03ZB5q03gpk9o0XsqkNo2XMqltVGrTeCmT2jxe6u0zx4faPF7KojaPl7KozeOlDGpd96Dj1SbyUga1ibyUQW0iL2VQ26jUJvJSBrVUXsp1PzVeLZWXct33DFfrupcZr5bKS+1UXsp1NzZebaNSS+WlXHdj49VSeSnX3dh4tVReynU3Nl4tlZdy3Y2NV0vlpVx3Y+PVUnkp193YeLVUXsp1NzZeLZWXct2NjVdL5aVcd2Pj1VJ5Kdfd2Hi1nvdtq19XDY/X64N/v2pYn589H3X22XPX/cl4tZ73LVyt6/5kvFrP+xav1vO+/UztB7dXR3u+f4/pJ0Bddy2vJeN5j68l4/n5yVoynp+1rCWTxyeiyeTxlGgyefznTRfT5xN/U3TdZR2HYh6/vJIipQ+HU6T07HCKTRQBFCmzAJwiZW6AU6TMGHCKlHkETlHZBUDRdXd8HIrKLgiKyi4IisouCIpNFAEUlV0QFJVdEBSVXRAUlV0QFJVdABRd32qIQ1HZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4KisguCorLLf6dYXN+9iUNR2QVBUdkFQVHZBUFRTufNaw0XfIrrKy9hKLq+MOKCouH7y8X15ZI4FLVdEBSbKAIo6skYgqKejCEoyi++o3geT4qjzCjKLyIo6skYgKLryztxKCq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUHR96SoORWUXBEXO7PLBFPWozx9cj317meJ45ciZXvAcmzj+82v37esH79sxZhw5EwyeI2eGwXPkTDF4jpw5Bs+RM8nAObq+NBeJI2ea+Yjj2L84vn4a7ydH5RkMR+UZDMcmjhCOyjMYjsozGI7KMxiOyjPvOJbyfIy7P/55f8ZReQbC0fW1x0gclWcwHJVnMByVZzAcmzhCOCrPfMJxLzOOyjMYjsozGI7KMxiOyjMQjomu6UI4vpBRQpmRUeaYkVGKmJFpIjMhI6c/IyPvPiMjNz4jI389I5PIMb+9SVwyXdM1qE3kVQ1qE/lPg9pEntKgtlGpTeT9DGoT+TmD2kQezaA2ke8yqKXyUpmuexrUUnmpTNcyDWqpvFSm65MGtVReKtM1R4NaKi+V6TqiQS2Vl8p0bdCglspLZbreZ1BL5aUyXcMzqKXyUpmuyxnUUnmpTNfaDGqZvFTNdP3MoJbJS9VM18QMapm8VN0alVomL1U3Ji9VM92ZM6hl8lJ1o/JShcpLZbrJZ1BL5aUy3bgzqG1Uaqm8VKbbbga1VF4q0600g1oqL5Xp9phBLZWXynTLy6CWyktluo1lUEvlpTLdmjKopfJSmW43GdRSealMt5AMaqm8VKbbQga1VF4q050eg1oqL5Xp5o1BLZWXynQ/xqCWyktlusViUEvlpTLdNTGopfJSmW6EGNRSealM9zYMaqm8VKbbFQa1VF4q0x0Ig1oqL5XppoJBLZWXynSfwKCWyktl6vo3qKXyUpl68w1qqbxUpg56g1oqL5WpK96glspLZep0N6il8lKZutcNaqm8VKaOdINaKi9F1XteqXrPK1XveaXqPa9UveeVqve8UvWeV6re80rVe16pes8rVe95zdSN/cHlpH18TVHevHa/yp/X7ledUUy0xxdS5LyJh6bIeT8PTZHz1h6aIuddPjRFzqvXYIqZOtgXUuS8j42myHlLG01R2QVBsYniP7+21efPba3NKCq7ICgquyAoKrsgKCq7vKNYvinOni9muk2wjOKe6ebBQorKLgiKyi4IisouCIpNFN9RfP4bYCtTisouCIrKLgiKyi4IisouCIrKLgCKmW6MLKSo7IKgqOyCoKjsgqDYRBFAUdkFQVHZBUFR2QVBUdkFQVHZBUAx002fhRSVXRAUlV0QFJVdEBSbKAIoKrsgKCq7ICgquyAoKrsgKCq7AChmuqG1kKKyC4KisguCorILgmITRQBFZRcERWUXBEVlFwRFZRcERWUXAMVMN+sWUlR2QVBUdkFQ9OwX6/V8cd+v8Y5ifX6nftQ6U+vZ1+HVevZfeLWefRJerWc/A1fr+r7bZ2o/eK839ETurm/BrSXj2R+sJeP5eeVaMk1kJmTy+EQ0mTyeEk0mj/+8K6GdxzOhjTKjmMfXrqSYxy8vpOj6NmAcipSeHU6R0t/DKVJmATjFJooAipQZA06RMo/AKSq7ICgquyAoKrsAKLq+xRmHorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcARde3b+NQVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOwCoOj6GqwLioYLnLvra7BxKGq7vPsbbfienusLnHEoarsgKOrJGIKinoz9d4rN9QXOOBTlF/+7626uL3DGoagnYwiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXQAUXV/gjENR2QVBUdkFQVHZBUGxiSKAorILgiJndvlgirJd+xeMq71Mcbxy5EwveI6c+eUTjmerTxjnUWYcORMMnKPrS5yROHKmGDxHzhyD58iZZPAcmzhCOHKmmY849vbFcewzjsozGI7KMxiOyjMYjsozEI6ur3NG4qg8g+GoPPMJx2ubcVSewXBs4gjhqDyD4ag8g+GoPPPjtS9klFBmZJQ5JmRc38lcS0a5YEZGTn9GRt59RqaJzISM/PWMTCLH/PYGVUt0A9WiNpFXNahN5D/fq810A9WgNpFPNKhN5P0MahP5OYPaRqU2ke8yqKXyUpnueRrUUnmpTPcx36vNdMfSoJbKS2W6C2lQS+WlMt1ZNKil8lKZ7hYa1FJ5qUx3AA1qqbxUprt6BrVUXirTnTqDWiovlenum0EtlZfKdEfNoJbKS2W6S2ZQS+WlMt35Mqil8lKZ7mYZ1FJ5qUx3qAxqqbxUprtOBrVUXmpQealB5aUuKi+V6eKXQS2Vl7qovNTVqNRSealMV8wMaqm8VKarYAa1TF7qyHRly6CWyUsdma5WGdQyealja1RqmbzUkemqkkEtk5c6Ml0pMqil8lKZrv4Y1FJ5qUxXdAxqqbxUpqs0BrVUXirTlReDWiovleliikEtlZfKdH3EoJbKS2W65GFQS+WlMl3FMKjV5eY3r92v8ue1+1VnFHW5GUFRl5sBFEmvBKAp6nIzgqIuNyMo6nIzgmITRQBFXW5GUOS8DICmqOyCoKjs8ua1rT5/bmttRlHZBUCR9DYBmqKyC4Kisss7iuWb4uz5Iul9BDTFJooAisouCIrKLgiKyi4Iisoubyk+/w2wlSlFZRcAxUw3MBZSVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKgmOnmzEKKyi4IisouCIrKLgiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXQAUM914WkhR2QVBUdkFQVHZBUGxiSKAorILgqKyC4KisguCorILgqKyC4BipptqCykquyAoKrsgKCq7ICg2UQRQVHZBUFR2QVD07BfL9hyj1/N4R7E+v1M/ap2odX3fDa/Ws//Cq/Xsk/BqPfsZvNqWRu0H7/WWnkjXt+DWkvHsD9aS8fy8ci0Zz88g15LJ4xOxZE7Xd+7WksnjP29KaCaKeXztSop5/PJKik0UARQpPTucIqW/h1OkzAJwipS5AU6RMmOgKbq+FRmHorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFZRcARde3WeNQVHZBUFR2QVBUdkFQbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKg6Pq+cxyKyi4IisouCIrKLgiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXQAUXV+DdUHRcLH9dH0NNg5FbZc3rzX0OpyuL3DGoajtAqDo+gJnHIp6MoagqCdjCIryi+8onseT4igzik0UART1ZAxBUU/GEBSVXRAUlV0QFJVdABRdX+CMQ1HZBUFR2QVBUdkFQbGJIoCisguCorILgqKyC4IiZ3b5YIrxRXGc59dr63a9UuTMLmCKri9wuqBYWt2fMNr+8urr9e+06xuckThy5hc8R84Eg+fYxBHCkTPF4Dly5hg8R84k8xHHvX1xbPuMo7IMhqPSDISj66uckTgqz2A4Ks9gOCrPYDg2cXzH8frieGxTjsozGI7KMxiOyjMYjsozGI7KMxCOia7RruWoPPOO47EdXxxLm3FUnsFwVJ7BcGziCOGoPIPhqDyD4ag8g+GoPPPWP/btm+Mx46g8g+DYOS8hz6d4IaOEMiOjzDEjoxQxI9NEZkJGTn9GRt59RkZufEZG/npGJpFjftuO2DNd1DWoTeRVDWoT+U+D2kSe0qC2UalN5P0MahP5OYPaRB7NoDaR7zKopfJSmS58GtRSealMFzMNaqm8VKYLlAa1VF4q00VHg1oqL5XpQqJBLZWXynRx0KCWyktluuBnUEvlpTJdxDOopfJSmS7MGdRSealMF9sMaqm8VKPyUo3KSzUqL5Xplp9BbaNSS+WlGpWXynT30KCWyktluiP4Xm2me38GtVReKtP9PINaKi+V6R6dQS2Vl8p0382glspLZbqXZlBL5aUy3R8zqKXyUpnueRnUUnmpTPexDGqpvFSme1MGtVReKtP9JoNaKi+V6R6SQS2Vl8p0W8iglspLZbrTY1BL5aUy3bwxqKXyUpnuxxjUUnmpTLdYDGqpvFSmuyYGtVReKtONEINaKi+V6d6GQS2Vl8p0u8KglspLZboDYVBL5aUy3VQwqKXyUpnuExjUUnmpTF3/BrVUXipTb75BLZOXGpk66A1qmbzUyNQVb1DL5KXG1qjUMnmpkal73aCWyUuNTB3pBrVUXoqq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez6oes8HVe/5oOo9H1S954Oq93xQ9Z4Pqt7zQdV7Pqh6zwdV7/mg6j0fVL3ng6r3fFD1ng+q3vNB1Xs+qHrPB1Xv+aDqPR9UveeDqvd8UPWeD6re80HVez4ydWNfT7V9vPnJ5z6+pihvXrtf5c9r96vOKCba4wspJvIHCykm8h3rKGbqHl9IMZFPWkgxkf9aSDGRr1tIsYkigGKiZ3oLKSq7ICgqu7x5bavPn9tam1FUdkFQVHYBUMzU9b+QorLLO4rlm+Ls+WKm2wQLKSq7ICg2UQRQVHZBUFR2QVBUdnlL8flvgK1MKSq7ICgquwAoZrqtsZCisguCorILgqKyC4JiE0UARWUXBEVlFwRFZRcERWUXBEVlFwDFTLdsFlJUdkFQVHZBUFR2QVBsogigqOyCoKjsgqCo7IKgqOyCoKjs8t8pXpluRy2kqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2QVAMdOttoUUlV0QFJVdEBSVXRAUmygCKCq7ICg69ovn1Z4v7tsx3lGsz+/Uj1pnah37Orxaz/fdblDr2CfdoNaxn7lBrWPf8aHaD97rDT2Rl+dbcIvJOPYHi8k4fl65mIzjZ5CLyeTxiWgyeTwlmIznm3j3kfkooZ3HM6GNMqOYx9eupJjHL6+kSOnD4RSbKAIoUvp7OEXKLACnSJkb4BQpMwacImUeQVP0fIMyEEVlFwRFZRcERWUXBMUmigCKyi4IisouCIrKLgiKyi4IisouAIqeb74GoqjsgqCo7IKgqOyCoNhEEUBR2QVBUdkFQVHZBUFR2QVBUdkFQNHzfedAFJso/vNrDRc4L8/XYANR1HZ59zfa8D09zxc441D0fIEzEEU9GUNQ1JMxBEU9GUNQbKL431235wucgSjqyRiCop6MISgquyAoKrsAKHq+wBmIorILgqKyC4KisguCYhNFAEVlFwRFZRcERWUXBEVlFwRFzuzySdfl2J5DvFI8+wtFzxc4A1HkzC4fTFHK8fwrXcrZZhw50wueI2d+wXNs4gjhyJlh8Bw5UwyeI2eOwXPkTDIfcfyGUa5zxlFZBsDx3Dzf5AzFUXkGw1F5BsNReQbDsYkjhKPyzAcc67bPOCrPYDgqz2A4Ks9gOCrPQDh6vtO5guMLGSWUGRlljhkZpYgZmSYyEzJy+jMy8u4zMnLjMzLy1zMyiRzzu/tT55bo/qlFbSKvalCbyH8a1CbylAa1jUptIu9nUJvIzxnUJvJoBrWJfJdBLZWXynTL06CWyktluo1pUEvlpTLdmjSopfJSmW43GtRSealMtxANaqm8VKbbgga1VF4q060+g1oqL5Xp9p1BLZWXynRLzqCWyktlus1mUEvlpTLdOjOopfJSmW6HGdRSealMt7gMaqm8VKbbVga1VF4q060og1oqL5Xp9pJBLZWXOqm81EnlpTJd+zKopfJSJ5WXOqm8VKbLaAa1VF4q06Uxg1oqL5XpcpdBLZWXynQJy6CWyktluixlUEvlpTJdajKopfJSmS4fGdRSealMl4QMaqm8VKbLPAa1VF4q06Ubg1oqL5XpcoxBLZWXynSJxaCWyktlumtiUEvlpTLdCDGopfJSme5tGNQyealCeivggyt8+1X+vHa/6oyirjYjKOpqM4KirjYjKDZRBFDU1WYERV1tRlDU1WYERV1tRlDkvAwApkh6FwBNUdnlzWtbff7c1tqMorILgqKyC4JiE0UARWWXdxTLN8XZ80XS+whoisouCIrKLgiKyi4AipluPyykqOzyluLz3wBbmVJUdkFQVHZBUGyiCKCo7IKgqOyCoKjsgqCo7IKgqOwCoJjp1spCisouCIrKLgiKyi4Iik0UARSVXRAUlV0QFJVdEBSVXRAUlV0AFDPdNlpIUdkFQVHZBUFR2QVBsYkigKKyC4KisguCorILgqKyC4KisguAYqZbYgspKrsgKCq7ICgquyAoNlEEUFR2QVBUdkFQVHZBUFR2QVBUdgFQdH3frV/PMc5r6+8o1ud36ketM7WefR1ebaNS69kn4dV69jN4tZ59x2dqP3ivt/REur4Ft5aMZ3+wlIzrG3NryXh+BrmWTB6fiCaTx1OiyTRGMh8ltPN4JrRRZhTz+NqVFPP45ZUUKX04nCKlZ4dTpPT3aIqubyTGoUiZG+AUKTMGnCJlHoFTbKIIoKjsgqCo7IKgqOyCoKjsgqCo7AKg6PomaRyKyi4IisouCIrKLgiKTRQBFJVdEBSVXRAUlV0QFJVdEBSVXf47xer6vnMcisouCIrKLgiKyi4Iik0UARTldN681nCBs7q+BhuGousLnD7+Rr//nl51fYEzDkVtFwRFPRlDUNSTMQRFPRlDUJRfBLhu1xc4w1B0fYEzDkU9GUNQVHZBUFR2QVBsogigqOyCoKjsgqCo7IKgqOyCoKjsAqDo+gJnHIrKLgiKyi4IipzZ5YMpynbtXzCu9jLF8cqxiSOEI2d++YTj2eoTxnmUGUfOBIPnyJlh8Bw5UwyeI2eOgXN0fY8zEkfOLIPnyJlmPuLY2xfHsc84Ks9gODZxhHBUnsFwVJ7BcFSewXBUnsFwVJ75hOO1TTi6vtEZiaPyDIaj8gyGo/IMhmMTx9fXvpBRQpmRUeaYkVGKmJFRLpiRkdOfkDnl3Wdk5MZnZOSvZ2QSOea3N6hqohuoFrWJvKpBbSL/aVCbyFMa1CbyiQa1ibzfe7WZ7o8a1CbyaAa1iXyXQS2Vl8p0z9OglspLZbqPaVBL5aUy3Zs0qKXyUpnuNxrUUnmpTPcQDWqpvFSm+4IGtVReKtO9PoNaKi+V6f6dQS2Vl8p0T86glspLZbrPZlBL5aUy3TszqKXyUpnuhxnUUnmpTPe4DGqZvNSe6b6VQS2Tl9oz3YsyqGXyUvvWqNQyeal9Y/JS+8bkpfZMF78Maqm8VKHyUoXKS2W6jmZQS+WlMl0bM6il8lKZrncZ1FJ5qUzXsAxqqbxUputSBrVUXirTtSaDWiovlen6kUEtlZfKdE3IoJbKS2W6zmNQS+WlMl27Mail8lKZrscY1FJ5qUy3WAxqqbxUprsmBrVUXirTjRCDWiovlenehkEtlZcivRXwwSW+/Sp/XrtfdUZRl5sRFHW5GUFRl5sRFHW5GUFRl5sBFEnvA6Ap6nIzgqIuNyMocl4GQFNsogigqOzy5rWtPn9ua21GUdkFQVHZBUFR2QVBUdnlHcXyTXH2fJH0PgKaorILgqKyC4KisguCYhNFAEVll7cUn/8G2MqUorILgqKyC4KisguCorILgGKmWyALKSq7ICgquyAoKrsgKDZRBFBUdkFQVHZBUFR2QVBUdkFQVHYBUMx0e2chRWUXBEVlFwRFZRcExSaKAIrKLgiKyi4IisouCIrKLgiKyi4AipluXS2kqOyCoKjsgqCo7IKg2EQRQFHZBUFR2QVBUdkFQVHZBUFR2eW/U2yZbsstpKjsgqCo7IKgqOyCoOjZL55fRWnnOcYbiobv1DfX993waj37L7xazz4Jrtb1fTe8Ws++A6/Wsz/Aq/W8x/FqG5Vaz8/08GqpvJTr+24fqTW0jjTX993watN4KYta1/fd8GrTeClDE0Fzfd8NrzaNlzKpbVRq03gpk9o0XsqkNo+XMjxzdH3fDa82j5cyqHV93w2vNpGXMqhN5KUMahN5KYPaRqU2kZcyqE3kpQxqqbyU6/tueLVUXsr1fTe8Wiov1ai8VKPyUq5v9+HVUnkp17fw8GqpvJTr23J4tVReyvWtNrxaKi/l+vYZXi2Vl3J9SwyvlspLub7NhVdL5aVc37rCq6XyUq5vR+HVUnkp17eY8GqpvJTr20Z4tVReyvV9lmPfny9+jPtGLfiObnN9c2UpGdd3VNaS8bzz15Lx7A/WkvHsJdaSaSIzIePZo6wl4/nZ0Foynp8jrSUjDzwjQ+mBLd+Gc32PYy0ZSg9sIkPpgU1kKD2w5Rteru9brCVD6YFNZCg9sIkMpQc2kaH0wCYynB7Y8G8Hru86rCXD6YEtZDg9sIUMqQc2kGkiMyFD6oENZEg9sIEMqQc2kCH1wAYy8sB/J3O4vg+wlow88IyMPPCMjDzwjEwTmQkZeeAZGXngGRl54BkZeeAZGXngCRnXNyXWkpEHnpGRB56RkQeekWkiMyEjDzwjIw88IyMPPCMjDzwjIw88IeP6FshaMvLAMzLywDMy8sAzMk1kJmTkgWdk5IFnZOSBJ2R+/R4H9ptrx69f2EDPX4PPvwefvwWf/wg+/xl8/h58/hF8/iv2/C34/m2O96/hG6lHc7x/TfM73r+m+R3vX9P8jvev4VtvR3O8f03zO96/pvkd71/T/I73r2X+w/H+Nc3vef8anj8cnvevZX7P+9cyv+f9a5nf9f41zO96/xrmd71/DfO73r+G+V3v3/fzn673r2H+4Pv3DL5/z+D799c719HzB9+/Z/D9ewbfv2fw/XsG3789+P7twfdvD75/e/D9++vd4+j5g+/fHnz/9uD7twffvz34/h3B9+8Ivn9H8P07gu/fX+89Rs8ffP+O4Pt3BN+/I/j+HcH3L6KntNTn/OXowPktn79CtIkunb8Fn/8IPv8ZfP4efP4RfP4r9Pwnotdx6fwl+Pyx9++5Od6/hs+vnpvj/Wua3/H+Nc3veP+a5ne8fw2fnzw3x/vXNL/j/WuZvzjev6b5He9f0/yO969pfs/79/3zhxPRdbZ0fs/71zK/5/1rmd/1/jXM73r/GuZ3vX/fz19d71/D/K73r2F+1/vXMH/w/YvoWVo6f/D9W4Pv3xp8/9bg+7cG37978P27B9+/e/D9uwffv4j+paXzB9+/e/D9uwffv3vw/bsH378t+P5twfdvC75/W/D9i+hfWjp/8P3bgu/fFnz/tuD7twXfv0fw/XsE37+A/p/ta6S6jR04v+XzV4D+n7Xzn8Hn78HnH8Hnv2LPD+j/WTt/CT5/DT7/Hnz+4Pv3dLx/LZ9fPR3vX9P8jvevaX7H+9c0v+P9a/n8ZHe8f03zO96/pvkd71/T/I73r2l+x/vXNL/n/Wt4/tA971/L/J73r2V+z/vXMr/r/ft+/uF6/xrmd71/DfO73r+G+V3vX8P8rvevYf7g+3cE378j+P4dwffvCL5/r+D79wq+f6/g+/cKvn8B/Utr5w++f6/g+/cKvn+v4Pv3ir1/+xZ7//Yt9v7tW+z927fY+7dvsfdv32Lv377F3r99i71/+xZ7//Yt+P4twfdvCb5/S/D9W6Lu3/9T/fz//f3b7/16FlJf42X46/t/u/7V//b373q//9/Kv/vf6qf/2+M386Ht79+o6eP6+v+219/Q7//v/Jf/X/+X/9/4l//f9e/+v79/U8Hw/5V/+f/953eG+Wu/f5H9N36R9l9/kXIdzz+25erXm/eIdh7Pv/ej/L9/7/+MdPgb6fQ3Uvc30rhzpO9f5vqVX+a/f/rd9suU3/ll6u/8Mvvv/DLtd36Z43d+mfN3fpn+O7/ML6fGsu3b148+X7xke1lzv/1RYNNQv/35XttQxeNQjpPYWc+v19a/L0bPH8S1jN9ij+/4MahlfMdPQS3jO34Iahnf8TNQy/iOH4Eaxvf8CVzL+I4fgFrGj711PX/81jJ+7K3r+cO3lvFjb13PH721jB9763r+4K1hfM+fu7WMH3vrev7UrWX82FvX82duLePH3rqeP3FrGT/21vX8edv34++eP+75j3Utf8aP2vbzZ/yoHzb8M37Uzxr+GT/qRw3/jB/1k4Z/xo/6QcP/O37Yzxn+Gd/zxwzffmpid/0pQ8P4nj9kaBi/xR7f89Y1jO956xrG97x1DeN73rqG8T1v3ffjV89b1zB+7K1bY2/dGnvrAi47Lh0/9tatv711p89u/t34Pfb4w+/4ZTuOrzHOl17Vlw/j7fUKLmDfogso0QXU6AL26AJadAGHZwHvP9O87463sE2Amz38PZKb3fo9kptt+TVSc7P/vkf65VNNpZSngFL2l2+ynPvLUNXjULvHoZrHoRyfH7T8lXB8fdAyvuPjg5bxHd8etIzv+PSgYXzPlwct4zs+PGgZ3/HdX8v4js/+WsZvscePvXWP2Fv3iL11j9hb94i9dc/YW/eMvXXP2Fv3jL11Abcel44fe+uesbfuGXvrnrG37hl76/bYW7fH3ro99tbtsbcuoFlm6fixt253/L5v+MZRd/y+bxh/OH7nMXzrYjh+57GM7/idxzK+43cey/iO/b5lfMd+3zK+4/d9wwcoh+P3fcP4l2O/bxnfsd+3jO956xrG97x1DeN73rqG8T1vXcP4nreuYXzPW9cwfuyte4Xeum0LvXXbFnrrti301m3bb29d6DeO2tZij3/4Hb9s/euDqNv1IuDlg6htO6ML6NEFjOgCruACyhZdQIkuoHoW0K5vAfWHgP/96n49v5w0tpfXjvNFrOONjRfreL/jxXp2Az++ljL7e+jZDZgEeHYDJgGe3YBJgGc3YBFQPbsBkwDPbsAkwLMbMHy7r1XPG94kwPPWNgkIs4lnAsJs4pkAN5v4eyQ3u/V7JDfb8muk3c3++x4JsNHG81eptR1vRirH/vzJR5uMVP2NtPsbqfkb6fjdkbCfi2yAZpal4/fY44/Y41+hxwd0wywdv8Qev8Yef489fos9fuyt22Jv3RZ767bYW7fF3rpH7K17xN66R+yte8Teuoi+m5Xjx966R+yte8TeukfsrXvE3rpn7K17xt66Z+yte8beuoi+m5Xjx966Z+yte8beumfsrXvG3ro99tbtsbduj711e+yti+i7WTl+7K3bY2/dHnvr9thbt8feuiP21h2xt+6IvXVH7K2L6HpaOX7srTtib90Re+uO2Ft3xN66V+yte8XeulfsrXvF3rqIrqeV48feulfsrXvF3rpX7K17hd66xxZ66x5b6K17bKG37rGF3rrHFnrrHlvorXtsobfusYXeuscWeuseW+ytW2Jv3RJ765bYW7fE3rqIBqaV48feuiX21i2xt26JvXVL7K1bY2/dGnvr1thbt8beuogGpZXjx966NfbWrbG3bo29dWvsrbvH3rp77K27x966e+yt+9t9U+jxY2/d2N1UR+xuqiN2N9URu5vqiN1NdcTupjpid1MdsbupjtjdVEfsbqojdjfVEbub6ojdTXXE7qY6YndTHbG7qY7Y3VRH7G6qI3Y31RG7m+qI3U11xO6mOmJ3Ux2xu6mO2N1UR+xuqiN2N9URu5vqiN1NdcTupjpid1MdsbupjtjdVEfsbqojdjfVEbub6ojdTXXE7qY6YndTHbG7qY7Y3VRH7G6qI3Y31RG7m+qI3U11xO6mOmJ3Ux2xu6mO2N1UR+xuqiN2N9URu5vqiN1NdcTupjpid1MdsbupjtjdVEfsbqojdjfVEbub6ojdTXXE7qY6YndTHbG7qc7Y3VRn7G6qM3Y31Rm7m+rcQm/dM3Y31Rm7m+qM3U11xu6mOmN3U52xu6nO2N1UZ+xuqjN2N9UZu5vqjN1Ndcbupjpjd1OdsbupztjdVGfsbqozdjfVGbub6ozdTXXG7qY6Y3dTnbG7qc7Y3VRn7G6qM3Y31Rm7m+qM3U11xu6mOmN3U52xu6nO2N1UZ+xuqjN2N9UZu5vqjN1Ndcbupjpjd1OdsbupztjdVGfsbqozdjfVGbub6ozdTXXG7qY6Y3dTnbG7qc7Y3VRn7G6qM3Y31Rm7m+qM3U11xu6mOmN3U52xu6nO2N1UZ+xuqjN2N9UZu5vqjN1Ndcbupjpjd1OdsbupztjdVGfsbqozdjfVGbub6ozdTXXG7qY6Y3dTnbG7qc7Y3VRn7G6qM3Y31Rm7m+qM3U11xu6mOmN3U52xu6nO2N1UZ+xuqjN2N9UZu5vqjN1Ndcbupjpjd1OdsbupztjdVGfsbqozdjfVGbub6ozdTXXG7qY6Y3dTnbG7qc7Y3VQ9djdVj91N1WN3U/XY3VR9C711e+xuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qbqsbupeuxuqh67m6rH7qYasbupRuxuqhG7m2rE7qYaW+itO2J3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfViN1NNWJ3U43Y3VQjdjfVFbub6ordTXXF7qa6YndTXVvorXvF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbubqmyxy6ke84feu4/5Qy/ex/yhN+9j/tCr9zF/6N37mD/08n3MH3r7PuYPvX4f8wffv7Frqh7zB9+/sYuqHvMH37+xq6oe8wffv7HLqh7zB9+/seuqHvMH37+xC6se0wXfv7Erqx7TBd+/sUurHtMF37+xa6se0wXfv7GLqx7TBd+/saurHvMH37+xy6se8wffv7Hrqx7zB9+/sQusHvMH37+xK6we8wffv7FLrB7zB9+/sWusHvMH37+xi6we8wffv7GrrB7zB9+/scusHvMH37+x66we8wffv7ELrR7zB9+/sSutHvMH37+xS60e8wffv7FrrR7zB9+/sYutHvMH37+xq60e8wffv7HLrR7zB9+/seutHvMH37+xC64e8wffv7Errh7zB9+/sUuuHvMH37+xa64e8wffv7GLrh7zB9+/sauuHvMH37+xy64e8wffv7Hrrh7zB9+/sQuvHvMH37+xK68e8wffv7FLrx7zB9+/sWuvHvMH37+xi68e8wffv7Grrx7zB9+/scuvHvMH37+x668e88fevyV4/1UJ3n9VgvdfleD9V2WLvX9L8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB+69K8P6rErz/qgTvvyrB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1DJ5qZqnUdikNqiX+lYQtSX4RYFnz9PqeCo4zvLmT9xeyjN272V/ffXxqtez67lDr2ffc4feRqbXs/e5Q69n93OHXs/+5w69nh3QHXo9e6Ab9LruAr5DL5m/ct0HfIdeMn/luhP4Dr1k/sp1L/Adesn8letu4Dv0kvkr1/3Ad+gl81euO4Lv0Evmr1z3BN+hl8xfue4KvkMvmb9y3Rd8h14yf+W6M/gOvWT+ynVv8B16yfyV6+7gO/SS+SvX/cF36CXzV647hO/QS+avXPcI36GXzF+57hK+Qy+Zv3LdJ3yHXjJ/5bpT+A69ZP7Kda/wHXrJ/JXrbuE79JL5K9f9wnfoJfNXrjuG79BL5q9c9wzfoZfMX7nuGr5DL5m/ct03fIdeMn/lunP4Dr1k/sp17/Adesn8levu4Tv0kvkr1/3Dd+gl81euO4jv0Evmr1z3EN+hl8xfue4ivkMvmb9y3Ud8h14yf+W6k/gOvWT+6iLzVxeZv7rI/JXrnu079DYyvWT+6iLzV6671O/QS+avXPep4/XurhvV79DL5a92163qd+jl8lf71sj0cvmr3XW7+h16ufzV7rph/Q69ZP7KdSP7HXrJ/BVZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97TtZf/tO1t++k/W372T97Y2sv72R9bc3sv72Rtbf3rZGppfLXzWy/vZG1t/eyPrbG1l/eyPrb29k/e2NrL+9kfW3N7L+9kbW397I+tsbWX97I+tvb2T97Y2sv72R9bc3sv72Rtbf3sj62xtZf3sj629vefquRy1/Xjzqz5/8ojbNNjKp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N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N1WP3U3VY3dT9djdVD12N9WI3U01YndTjdjdVCN2N9XYQm/dEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6lG7G6qEbubasTuphqxu6mu2N1UV+xuqit2N9UVu5vq2kJv3St2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UV+xuqit2N9UVu5vqit1NdcXuprpid1NdsbuprtjdVFfsbqordjfVFbub6ordTXXF7qa6YndTXbG7qa7Y3VRX7G6qK3Y31RW7m+qK3U11xe6mumJ3U12xu6mu2N1UZYtdTvWYP/TefcwfevE+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les+4Tv0kvkr153Cd+gl81eue4Xv0Evmr1x3C9+hl8xfue4XvkMvmb9y3TF8h14yf+W6Z/gOvWT+ynXX8B16yfyV677hO/SS+SvXncN36CXzV657h+/QS+avXHcP36GXzF+57h++Qy+Zv3LdQXyHXjJ/5bqH+A69ZP7KdRfxHXrJ/JXrPuI79JL5K9edxHfoJfNXF5m/usj81UXmr1z3bN+ht5HpJfNXF5m/ct2lfodeMn/luk8dr3d33ah+h14uf7W7blW/Qy+Xv9q3RqaXy1/trtvV79DL5a921w3rd+gl81euG9nv0Evmr8j623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tv38n623ey/vadrL99J+tvb2T97Y2sv72R9bc3sv72tjUyvVz+qpH1tzey/vZG1t/eyPrbG1l/eyPrb29k/e2NrL+9kfW3N7L+9kbW397I+tsbWX97I+tvb2T97Y2sv72R9bc3sv72Rtbf3sj62xtZf3vL03c9avnz4lF//uQXtWm2kUltmveq0dpT7esUP9WmeacyqU3zPmVSmyYFmtSmyYAmtWkSoEVtnv5jk9o8+9aiNk32M6lNk/xMahuVWiovFbXz+EVBUH/0osCz5zm3+lRwng3xJ86z54Grdd1JjFfr2fPg1Xr2PHi1nj0PXm2jUuvZ8+DVevY8eLWe/RFeLZWXct1ADFfrun8Yr5bKS7nuHsarpfJSrnuH8WqpvJTrzmG8Wiov5bpvGK+Wyku57hrGq6XyUq57hvFqqbyU645hvFoqL+W6XxivlspLue4Wxqul8lKue4Xxaqm8lOtO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" }, { "name": "spend_private_authwit", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735] }, "bytecode": "", "debug_symbols": "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" }, { "name": "approve_public_authwit", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "outer_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "outer_hash": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "H4sIAAAAAAAA/+2YzU7DMAyA0x/W/zJgsPIn9chxlXbYsQ/BC0yjErtsaC08PqLeYtXNGBfcg6VZipKmafLZSRM7ljrIY5ssXXbadKGOBd+XOp/9TwrGvmZDclpCOG0hnA4jJ7BN1LDr1B3ArtyMFwIYRwIYPQGMvgDGQABjKIAxEsAYC2BMBDCmAhgvBTCOBTBeCWC8FsB4I4BxIoDxVgDjnQDGKSOjRRhdXc7adN+mB3WI2Re63ledlFwM82IFPjsOnqm+gG9i44Pb1TnITeqQ3yZ1eMfguJ0OI3YdZnPo1+PuV8cKGbG/y2//hU/sxMg+lE32axbXIsakHnlGWwW6zHi3UtCxLZ0CMqbSc4TlKWmL7dAeuK6RHfxHXJvBH9+5xncpaTP6Rf9S8ervGTyewQxzEOsy+CCZ29nFZOO894J+Q/5+e3PuGnMSknps86zzsa6L+edhHqn+fow6UylJOSa2j/h5ioH03M9povv6Vrx7SGrYyjdslZI2CbFfOoD9LDIu9k05QM7MZ+ZTzJHq/+NYR99jbhu6UH8K2wfqeD9hVQgHpA6fpeHgHWyocJDAgeap7tAIibKJBoYLA9hs4bCBgBICNgiIIOAAh35Kxjjl5FJHGOVJ5y86f31f1/lqu2l2y1WTv22rOt9sm/yzrvKP3fpr2VTwXNXqB8Nw3LryGgAA", "debug_symbols": "nZBLCoAgFEX38sYS0T+3Eg1eZSCIiVoQ4t7zES0gZ/fDmZwA6ljRy0M74AHKomqATwGcQU2D82g98GpoGQi9pTSWkcEulaBcx5kR1OZAXQ7U50DDTyi1C63ERQnSQuep189Sqv427xMf" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "35": { "source": "use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n", "path": "std/option.nr" }, "50": { "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::state_vars::{Map, PublicMutable};\nuse dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, hash::{pedersen_hash}};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_outer_authwit_hash};\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<Field, PublicMutable<bool>>,\n}\n\nimpl AccountActions {\n    pub fn init(\n        context: Context,\n        approved_action_storage_slot: Field,\n        is_valid_impl: fn(&mut PrivateContext, Field) -> bool\n    ) -> Self {\n        AccountActions {\n            context,\n            is_valid_impl,\n            approved_action: Map::new(\n                context,\n                approved_action_storage_slot,\n                |context, slot| {\n          PublicMutable::new(context, slot)\n        }\n            )\n        }\n    }\n\n    pub fn private(\n        context: &mut PrivateContext,\n        approved_action_storage_slot: Field,\n        is_valid_impl: fn(&mut PrivateContext, Field) -> bool\n    ) -> Self {\n        AccountActions::init(\n            Context::private(context),\n            approved_action_storage_slot,\n            is_valid_impl\n        )\n    }\n\n    pub fn public(\n        context: &mut PublicContext,\n        approved_action_storage_slot: Field,\n        is_valid_impl: fn(&mut PrivateContext, Field) -> bool\n    ) -> Self {\n        AccountActions::init(\n            Context::public(context),\n            approved_action_storage_slot,\n            is_valid_impl\n        )\n    }\n\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload) {\n        let valid_fn = self.is_valid_impl;\n        let mut private_context = self.context.private.unwrap();\n\n        let fee_hash = fee_payload.hash();\n        assert(valid_fn(private_context, fee_hash));\n        fee_payload.execute_calls(private_context);\n        private_context.capture_min_revertible_side_effect_counter();\n\n        let app_hash = app_payload.hash();\n        assert(valid_fn(private_context, app_hash));\n        app_payload.execute_calls(private_context);\n    }\n    // docs:end:entrypoint\n\n    // docs:start:spend_private_authwit\n    pub fn spend_private_authwit(self, inner_hash: Field) -> Field {\n        let context = self.context.private.unwrap();\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can \n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_outer_authwit_hash(context.msg_sender(), inner_hash);\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(context, message_hash) == true, \"Message not authorized by account\");\n        context.push_new_nullifier(message_hash, 0);\n        IS_VALID_SELECTOR\n    }\n    // docs:end:spend_private_authwit\n\n    // docs:start:spend_public_authwit\n    pub fn spend_public_authwit(self, inner_hash: Field) -> Field {\n        let context = self.context.public.unwrap();\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can \n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_outer_authwit_hash(context.msg_sender(), inner_hash);\n        let is_valid = self.approved_action.at(message_hash).read();\n        assert(is_valid == true, \"Message not authorized by account\");\n        context.push_new_nullifier(message_hash, 0);\n        IS_VALID_SELECTOR\n    }\n    // docs:end:spend_public_authwit\n\n    // docs:start:approve_public_authwit\n    pub fn approve_public_authwit(self, message_hash: Field) {\n        self.approved_action.at(message_hash).write(true);\n    }\n    // docs:end:approve_public_authwit\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/account.nr" }, "52": { "source": "use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 4 (function call) + 1\nglobal FEE_PAYLOAD_SIZE: Field = 9;\n\n// 2*97 + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 226;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        false,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        false,\n                        false\n                    );\n                }\n            }\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr" }, "53": { "source": "use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 420;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        false,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        false,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr" }, "55": { "source": "use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER},\n    hash::{hash_args, pedersen_hash}\n};\nuse dep::aztec::context::{PrivateContext, PublicContext, Context};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_private_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_private_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_public_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_public_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(caller: AztecAddress, consumer: AztecAddress, selector: FunctionSelector, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_outer_authwit_hash(consumer: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [consumer.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/auth.nr" }, "57": { "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/auth_witness.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "63": { "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "98": { "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "130": { "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "150": { "source": "use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "155": { "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "167": { "source": "use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "181": { "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x134b57e317f1554b9c4f547e617338fcc8ff04c6d96a278f1752b26a462c5d25;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr" }, "184": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "186": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "189": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr" }, "192": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr" }, "193": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr" }, "195": { "source": "use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr" }, "198": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "199": { "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr" }, "200": { "source": "use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<1> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<1> for U128 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr" }, "201": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "202": { "source": "use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr" }, "209": { "source": "use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr" }, "210": { "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr" }, "211": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "293": { "source": "// docs:start:contract\n// Account contract that uses Schnorr signatures for authentication using a hardcoded public key.\ncontract SchnorrHardcodedAccount {\n    use dep::std;\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, PrivateContext};\n\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    global public_key_x: Field = 0x0ede3d33c920df8fdf43f3e39ed38b0882c25b056620ef52fd016fe811aa2443;\n    global public_key_y: Field = 0x29155934ffaa105323695b5f91faadd84acc21f4a8bda2fad760f992d692bc7f;\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: pub AppPayload, fee_payload: pub FeePayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload);\n    }\n\n    #[aztec(private)]\n    fn spend_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.spend_private_authwit(inner_hash)\n    }\n\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.spend_public_authwit(inner_hash)\n    }\n\n    #[aztec(private)]\n    #[aztec(internal)]\n    fn cancel_authwit(outer_hash: Field) {\n        context.push_new_nullifier(outer_hash, 0);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn approve_public_authwit(outer_hash: Field) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.approve_public_authwit(outer_hash)\n    }\n\n    // docs:start:is-valid\n    #[contract_library_method]\n    fn is_valid_impl(_context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = get_auth_witness(outer_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature using hardcoded public key\n        let verification = std::schnorr::verify_signature(\n            public_key_x,\n            public_key_y,\n            signature,\n            outer_hash.to_be_bytes(32)\n        );\n        assert(verification == true);\n        true\n    }\n    // docs:end:is-valid\n}\n// docs:end:contract\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/schnorr_hardcoded_account_contract/src/main.nr" } } }

{ "noir_version": "0.25.0+d1ed549202e5a840845298c931418e173eb5437c", "name": "SlowTree", "functions": [{ "name": "read_leaf_at_pub", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "key": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "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wGYosBkKbIYCm6HAZiiwGQpshgKbocD+CRTw59j3T3//avDfdIcPvna0yPevHU/82affe2q9nvIR7MkEe3LBnpZgTyHY0xbsKQV7KsGeBDmeghwvQY6XIMdLkOP1Mzhu75srt6of9LTefz1L2PfK9tR7S6HX0tZrKfVaKr2Wjl5LLdfSefRaMr2WXK8lPXofPXofPXofPXofPXofPXofPXq3Hr1bj96tR+/Wo3fr0bv16N169G49ercevVuO3vnI0TsfOXrnI0fvfOTonY8cvfORo3c+cvTOR47e+cjROx89epsevU2P3qZHb9Ojt+nR2/TobXr0Nj16mx69TY/erkdv16O369Hb9ejtevR2PXq7Hr1dj96uR2/Xo/fSo/fSo/fSo/fSo/fSo/fSo/fSo/fSo/fSo/fSo3fo0Tv06B169A49eocevUOP3qFH79Cjd+jRO/TovfXovfXovfXovfXovfXovfXovfXovfXovfXovfXonXr0Tj16px69U4/eqUfv1KN36tE79eidevROPXqXHr1Lj96lR2+9rGXqZS1TL2uZelnL1Mtapl7WMvWylqmXtUy9rGXqZS1TL2uZelnL1Mtapl7WMvWylqmXtUy9rGXqZS1TL2uZelnL1Mtapl7WMvWylqmXtUy9rGXqZS1TL2tZelnL0stall7WsvSylvXI0bv0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWpZe1rL0spall7Usvaxl6WUtSy9rWXpZy9LLWh69rOXRy1oevazl0ctankeO3kcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9refSylkcva3n0spZHL2t59LKWRy9r2XpZy9bLWrZe1rL1spb9yNG79bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcvWy1q2Xtay9bKWrZe1bL2sZetlLVsva9l6WcuWy1r6I5e1fLWkRu9XS2r0frWkRu9XS2r0frWkRu9XS2r0frWkRu9XS5fp/XZMI8f8nEzkqbdPvz7+g/+B/9Kn35oyxaacbmp1v/9V/PPP2ntLS6+l0Gtp67WUei2VXktHr6WmWwp/fx+t/VFL/ui1ZHotuV5LS6+l0Gtp67WE0zsi3lra9WFLpdfS0Wup5Vpaj15LpteS67W09FoKvZYu0/vtmGSOKeaYwxzTyDHxMMcYc4wzxyzmmGCOYSgQDAWCoUAwFAiGApuhwGYosBkKbIYCm6HAZiiwGQpshgKbocBmKJAMBZKhQDIUSIYCyVAgGQokQ4FkKJAMBZKhQDEUKIYCxVCgGAoUQ4FiKFAMBYqhQDEU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" }, { "name": "initialize", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238] }, "bytecode": "", "debug_symbols": "" }, { "name": "un_read_leaf_at", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "address": [{ "start": 0, "end": 1 }], "key": [{ "start": 1, "end": 2 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "slow_updates_tree::leaf::Leaf", "fields": [{ "name": "next_change", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "field" } }, { "name": "after", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [2, 3, 4] }, "bytecode": "H4sIAAAAAAAA/81YTY/aMBB1PoCFQPhYYOmp/gWrAO2th/TeXro9tScqoKrEEjUJavvnq5LsTPcxpOp+2FIsBU/G9sx7z46d4Ki74h8vh2zveLnqvHB7THX0vDI3GCuyidMxiNMDnC7ozXPwnewL6Bebyv8qet3kROp8jgP0+fc+xueQr3W82jhGxCvH+KfcCp/vn4RWQxjrAe+mad5RtAggLxdH3MdgNwFPwzyeuSWeURG3RbF+K7PPgFyTvtAqhD4t0O/Cgn4O5OXYOGdFeSxmtwaYcV1oZXZdtM1zWvQpLuvaFvoir4Bsg+uy3Pc7FKsB+QLI2yPb5D5exOpSLD47GUcP/F2Yy6IMCFNoYS4CwKCAM5YY7BA06prHM7fEs9S+Lzh1BKcQ+uAa7Fvg6UBejs33fZiHx2D2aoDZUu6/e0ZH5MM9WQl8uFZt7c1K6KEgp8Tj1ABPoM6f76ACL77X4fm8hfYh2fgONyLbq4g9BN+A7FHFWNRpCFxisqPnlVInzBXDPefrAY5RTfCEFXgs7JUlHp4fjs33YU1yW5iH8n3n0nzcZcFpTLEaFJfxcz4f+rynuuCNYxmXfJ5wbYxBIwtcyvN5YkmjqdCI8U9AI+7zUWjEfqnRJWjE2kxBIwtcFkXcK0sazYRGjP8KNOI+n4VG7JcaTUAj1mYGGs3Mczl5znnPG4jceE7gucS4x+DjMVPwucCfffiOxD5f5G1TO/c1+O2xtPQNv6zbfxUddf89leVJuvq6+bBZrR2AxnA98HGN0LndBZ/7n3ZF6ZmmDz7+m6EBPlfIgkuF+7fVuaRGn4cqIv8SwiNSfkW/l1S/ofrmTn+d7ZJcR3p//F3tdsmPzfpaY1umbw9ZrrN8leZ6mya3en6Ncd9R/YLqt2m6+qW/7debnzo55DrZ6i/JYb/OcNDNUwZ9eugg9Qe7mL9LjBYAAA==", "debug_symbols": "1dvdaupAFIbhe5lj2ay/WWvGW9nsg+zWgiC2VFso4r03YpK2KA0VK1/ODK7JPFF5VcRdWj3eNdvl43qT5rtEf2qa/92lzVOzPhxvts3zNs2zap6lxfr+cDN4P0sPy9UizaWW/exkunI/XL0Ms05nRkOVu9nQmj9OTLz/N2s5TGAeBvMImEfBPAbmyWAeB/MEmKeAecD6LGB9FrA+C1ifBazPAtZnAeuzXKHPTKbdNDPR9yLqJmnkpIV7eJGPi9T29Ed3TNRdJuqu03QrTdTNE3WPvx+VOrKFUOn3EBb6ssmZq2Tz4SqLfZruRAonMjhRhhM5nCjgRAVOVNFERnAihhPBNdvgmm1wzTa4Zhtcs+0azebhU5RwxIhIQ7phYx1mmaIDFTRQBQNlQgMxGkjQQIoGMjRQRgM5Ggit1Bmt1Bmt1I5WakcrtaOV2tFK7WildrRSO1qpHa3U/sulPm5Sb7BJXKWoJfpN2m9QIw/td9NHEuOR5NYkrXV4AX6e7X5DC0UDGRooo4EcDRRooIIGqrcGmQzvO5pPQYXQQIwGEjSQooEMDZTRQDcvtZn1oBxnQIEGKmigCgaqhAZiNJCggRQNZGAgprPPmXi/hZKdfllm0otW2UWr8kWr/KJV8cNV7dFr87xs/q8Wh7+mHO58Wd/1/1RpD7dvT8d79u8=" }, { "name": "_assert_current_root", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "caller", "type": { "kind": "field" }, "visibility": "private" }, { "name": "expected", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "caller": [{ "start": 37, "end": 38 }], "expected": [{ "start": 38, "end": 39 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240] }, "bytecode": "", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "un_read_root", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "address": [{ "start": 0, "end": 1 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "slow_updates_tree::leaf::Leaf", "fields": [{ "name": "next_change", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "field" } }, { "name": "after", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1, 2, 3] }, "bytecode": "H4sIAAAAAAAA/81YTW/TQBRcx05cx03z0Vy4wP6Cap32CJIRnOAGEnejpAgpjSXbEfDnEbHzRoxX5jNrNSu1u377dt7MeO1N4qlj8w9/XseYG2Kp9Oa0ljjEMn4HzwHpyWR8QXmpq/p35m5UgwTt+mgxcUFOSFzqeS9oc27WBD/5I+YHLRg1p7U+aRy61mjMKqYaaLbWlMZD4hO455P0pNPUuCPB+u6Qb+1VaHnlW15dUc6I/At78M+jusDGNer9K+fBGXDmfaGV231x4V7TanrAiFT7+VW/0DWWscN9aZTUR03UG1PdSxl7DuvWWLFgBYINHpcUR84z6WfquOdUhz+R+/uT/O4dh3rMxzsDPrHqPociyzM+m3juA81PZMxnE/T6HdgTiuHeXXWsZZ8mpCWVsTmtNT5xrZSuJ9R7FsfH5hN28OnrXYr7A2xch2dSu4f70LzHp+5xb2tNM8EaCi74o15AOS+kr695LXjZzxPvjRl51IOW5rPVvCePFpZH4D8nj5Dz2vIIcdujKXkEbxbkUQ9aVjXudU8eLS2PwP+aPELOW8sjxG2P5uQRvFmSR0v3WlrPOd55sVWbzwk+lyLShRjWLCjG5xJ6nEt8HgZW3Uh0I9fhZ6pb/g6ROsRlHYp85ZbSmL9D9PBdKRmT72WVF9mnzbtNtvaIGuj6Fl1PtaljfkCxwR/mlZSHzIBi2EpDig0sW3irID9SHT9/pNKb01rzPNhGqA6RnpD1SRTnP5X+ufTvj97rcptX2ujd4X+23eZfNusbzXOlftiXlS6rrKj0fZE/6OSGcYH3RPqXRZF90593681Xne8rnd/rj/l+ty550av/WfTmbxepH/7CL0ykEgAA", "debug_symbols": "1drZasJAGAXgd5lrKf82m69SepFaC4KoqC0U8d0byWKLwdBgw8mdIeef+Vw4wZCTW28XxXG13Rzc/OToKbn588kddsXmcnw4Fvujm3uLYeaWm7fypWc5z9z7ar10c8npPLtJZ/Z1OIfUZgN1RKMq19mo2V8XJj6/zEpOxuIwgXkYzCNgHgXzGJjHg3kCmCeCecDqmcH6WcD6WcD6WcD6WcD6WcD6WR7Qz0ymdZqZ6L6I6iT1LJq4gSe5vkktl6/cYaLuOFF3mqg7T9OtNFF3//VIrNdNTcExafi1yW1ao9RhY22zTLEGCRpI0UCGBvJooIAGimighAbKYCAjNBBaUxtaUxtaUxtaUxtaUxtaUxtaUxtaUxtaU3u0pvZoTe3/uamrTXSMTR7SqBbaTSL3fLT30hXJ45HC2CTNuf0Byo9sfdfKRzRQQgNlMFAgNBCjgQQNpGODTNrrjvoOkKGBPBoooIEiGiihgTIYKI7e1GbWgHzsADEaSNBAigYyNJBHAwU0UEQDJTBQ6vzKJMR6SMlu/yunOGQoDRnKA4YyDRniPw6VR5/FflW8rpeXp0AvJz82i+ah0PLw+LWrzpy/AQ==" }, { "name": "update_at_public", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "p", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateProof", "fields": [{ "name": "index", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateInner", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "sibling_path", "type": { "kind": "array", "length": 254, "type": { "kind": "field" } } }] } }, { "name": "after", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateInner", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "sibling_path", "type": { "kind": "array", "length": 254, "type": { "kind": "field" } } }] } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "p": [{ "start": 37, "end": 549 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750] }, "bytecode": "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", "debug_symbols": "" }, { "name": "_update", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "caller", "type": { "kind": "field" }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_value", "type": { "kind": "field" }, "visibility": "private" }, { "name": "before", "type": { "kind": "field" }, "visibility": "private" }, { "name": "after", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_root", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "after": [{ "start": 41, "end": 42 }], "before": [{ "start": 40, "end": 41 }], "caller": [{ "start": 37, "end": 38 }], "index": [{ "start": 38, "end": 39 }], "inputs": [{ "start": 0, "end": 37 }], "new_root": [{ "start": 42, "end": 43 }], "new_value": [{ "start": 39, "end": 40 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244] }, "bytecode": "", "debug_symbols": "" }, { "name": "read_at", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "index": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830] }, "bytecode": "", "debug_symbols": "" }, { "name": "update_at_private", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_value", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "index": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }], "new_value": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627] }, "bytecode": "", "debug_symbols": "" }, { "name": "read_at_pub", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "key": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "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", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n", "path": "std/option.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "184": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "186": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "198": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "201": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "211": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "241": { "source": "use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr" }, "297": { "source": "// docs:start:pop_capsule\n#[oracle(popCapsule)]\nfn pop_capsule_oracle<N>() -> [Field; N] {}\n\n// A capsule is a \"blob\" of data that is passed to the contract through an oracle.\nunconstrained pub fn pop_capsule<N>() -> [Field; N] {\n    pop_capsule_oracle()\n}\n// docs:end:pop_capsule\n\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/slow_tree_contract/src/capsule.nr" }, "298": { "source": "mod capsule;\nmod types;\n\n// This contract allow us to \"read\" public storage in private through a delayed tree.\n// More documentation need to be outlined for this properly, but there is some in \n// https://github.com/AztecProtocol/aztec-packages/issues/1291\n// This is made as a separate contract for one thing mainly. Making it simpler to use.\n// TODO(#4760): Rename slow updates to shared mutable and ideally move the impl to state-vars in aztec-nr.\ncontract SlowTree {\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteViewerOptions, PrivateContext,\n        Map, PublicMutable, PrivateSet\n    };\n\n    use dep::value_note::{balance_utils, utils::{increment, decrement}, value_note::ValueNote};\n    use dep::aztec::{context::{PublicContext, Context}, protocol_types::type_serialization::FIELD_SERIALIZED_LEN};\n    use dep::slow_updates_tree::{SlowMap, Leaf, SlowUpdateProof, compute_merkle_root, deserialize_slow_update_proof};\n\n    // docs:start:import_pop_capsule\n    use crate::capsule::pop_capsule;\n    // docs:end:import_pop_capsule\n    use crate::types::{MembershipProof, deserialize_membership_proof};\n\n    // docs:start:constants_and_storage\n    global TREE_HEIGHT: u64 = 254;\n    global MEMBERSHIP_SIZE: Field = 256; // TREE_HEIGHT + 2\n    global UPDATE_SIZE: Field = 512; // TREE_HEIGHT * 2 + 4\n\n    global EMPTY_ROOT: Field = 5785871043333994658400733180052743689641713274194136017445890613179954325976;\n\n    struct Storage {\n        trees: Map<Field, SlowMap<TREE_HEIGHT, UPDATE_SIZE>>,\n    }\n    // docs:end:constants_and_storage\n\n    // docs:start:initialize\n    #[aztec(public)]\n    fn initialize() {\n        storage.trees.at(context.msg_sender().to_field()).initialize(EMPTY_ROOT);\n    }\n    // docs:end:initialize\n    // docs:start:read_at_pub\n    #[aztec(public)]\n    fn read_at_pub(key: Field) -> Field {\n        storage.trees.at(context.msg_sender().to_field()).read_at(key)\n    }\n    // docs:end:read_at_pub\n    #[aztec(public)]\n    fn read_leaf_at_pub(key: Field) -> Leaf {\n        storage.trees.at(context.msg_sender().to_field()).read_leaf_at(key)\n    }\n    // docs:start:read_at_private\n    #[aztec(private)]\n    fn read_at(index: Field) -> Field {\n        // docs:start:pop_capsule\n        let fields = pop_capsule();\n        // docs:end:pop_capsule\n        let p: MembershipProof<TREE_HEIGHT, MEMBERSHIP_SIZE> = deserialize_membership_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n\n        let expected_root = compute_merkle_root(p.value, p.index, p.sibling_path);\n        let selector = FunctionSelector::from_signature(\"_assert_current_root(Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [context.msg_sender().to_field(), expected_root]\n        );\n\n        p.value\n    }\n    // docs:end:read_at_private\n    // docs:start:assert_current_root\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_current_root(caller: Field, expected: Field) {\n        let root = storage.trees.at(caller).current_root();\n        assert(root == expected, \"Root does not match expected\");\n    }\n    // docs:end:assert_current_root\n\n    // docs:start:update_at_pub\n    #[aztec(public)]\n    fn update_at_public(p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE>) {\n        storage.trees.at(context.msg_sender().to_field()).update_at(p);\n    }\n    // docs:end:update_at_pub\n    // docs:start:update_at_private\n    #[aztec(private)]\n    fn update_at_private(index: Field, new_value: Field) {\n        let fields = pop_capsule();\n        let p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE> = deserialize_slow_update_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n        assert(new_value == p.new_value, \"New value does not match expected\");\n\n        // We compute the root before.\n        let before_root = compute_merkle_root(p.before.value, p.index, p.before.sibling_path);\n        let after_root = compute_merkle_root(p.after.value, p.index, p.after.sibling_path);\n        let new_after_root = compute_merkle_root(p.new_value, p.index, p.after.sibling_path);\n\n        let selector = FunctionSelector::from_signature(\"_update(Field,Field,Field,Field,Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [\n            context.msg_sender().to_field(),\n            p.index,\n            p.new_value,\n            before_root,\n            after_root,\n            new_after_root\n        ]\n        );\n    }\n    // docs:end:update_at_private\n    // docs:start:_update\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _update(\n        caller: Field,\n        index: Field,\n        new_value: Field,\n        before: Field,\n        after: Field,\n        new_root: Field\n    ) {\n        let current_root = storage.trees.at(caller).current_root();\n        let after_root = storage.trees.at(caller).read_root().after;\n\n        assert(current_root == before, \"Before root does not match expected\");\n        assert(after_root == after, \"After root does not match expected\");\n\n        storage.trees.at(caller).update_unsafe_at(index, new_value, new_root);\n    }\n    // docs:end:_update\n    unconstrained fn un_read_leaf_at(address: AztecAddress, key: Field) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_leaf_at(key)\n    }\n\n    unconstrained fn un_read_root(address: AztecAddress) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_root()\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/slow_tree_contract/src/main.nr" }, "300": { "source": "use crate::{leaf::Leaf, slow_update_proof::SlowUpdateProof};\nuse dep::aztec::{\n    context::Context, oracle::storage::{storage_read, storage_write},\n    protocol_types::traits::{Serialize, Deserialize}\n};\nuse dep::std::hash::pedersen_hash;\nuse dep::std::merkle::compute_merkle_root;\n\n// The epoch length is just a random number for now.\nglobal EPOCH_LENGTH: u64 = 100;\n\nfn compute_next_change(time: Field) -> Field {\n    ((time as u64 / EPOCH_LENGTH + 1) * EPOCH_LENGTH) as Field\n}\n\n// TODO(#4760): Rename slow updates to shared mutable and ideally move the impl to state-vars in aztec-nr.\n// The simple slow map which stores a sparse tree\nstruct SlowMap<N,M> {\n  context: Context,\n  storage_slot: Field\n}\n\nimpl<N,M> SlowMap<N,M> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    pub fn read_root(self: Self) -> Leaf {\n        let fields = storage_read(self.storage_slot);\n        Leaf::deserialize(fields)\n    }\n\n    // Beware that the initial root could include much state that is not shown by the public storage!\n    pub fn initialize(self: Self, initial_root: Field) {\n        let mut root_object = self.read_root();\n        assert(root_object.next_change == 0, \"cannot initialize twice\");\n        root_object = Leaf {\n      next_change: 0xffffffffffffffffffffffffffffff,\n      before: initial_root,\n      after: initial_root,\n    };\n        let fields = root_object.serialize();\n        storage_write(self.storage_slot, fields);\n    }\n\n    // Reads the \"CURRENT\" value of the root\n    pub fn current_root(self: Self) -> Field {\n        let time = self.context.public.unwrap().timestamp() as u64;\n        let root_object = self.read_root();\n        if time <= root_object.next_change as u64 {\n            root_object.before\n        } else {\n            root_object.after\n        }\n    }\n\n    // docs:start:read_leaf_at\n    pub fn read_leaf_at(self: Self, key: Field) -> Leaf {\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key]);\n        let fields = storage_read(derived_storage_slot);\n        Leaf::deserialize(fields)\n    }\n    // docs:end:read_leaf_at\n\n    // docs:start:read_at\n    // Reads the \"CURRENT\" value of the leaf\n    pub fn read_at(self: Self, key: Field) -> Field {\n        let time = self.context.public.unwrap().timestamp() as u64;\n        let leaf = self.read_leaf_at(key);\n        if time <= leaf.next_change as u64 {\n            leaf.before\n        } else {\n            leaf.after\n        }\n    }\n    // docs:end:read_at\n\n    // Will update values in the \"AFTER\" tree\n    // - updates the leaf and root to follow current values, moving from after to before if \n    //  needed.\n    // - checks that the provided merkle paths match state values\n    // - update the leaf and compute the net root\n    // Should only be used when updates from public are desired, since the hashing will be\n    // costly since done by sequencer.\n    pub fn update_at(self: Self, p: SlowUpdateProof<N, M>) {\n        // The calling function should ensure that the index is within the tree.\n        // This must be done separately to ensure we are not constraining too tight here.\n\n        let time = self.context.public.unwrap().timestamp() as u64;\n        let next_change = compute_next_change(time as Field);\n\n        let mut root = self.read_root();\n        let mut leaf = self.read_leaf_at(p.index);\n\n        // Move leaf if needed\n        if time > leaf.next_change as u64 {\n            leaf.before = leaf.after;\n        }\n\n        // Move root if needed\n        if time > root.next_change as u64 {\n            root.before = root.after;\n        }\n\n        // Ensures that when before is active, it is not altered by this update\n        assert(\n            root.before == compute_merkle_root(leaf.before, p.index, p.before.sibling_path), \"Before root don't match\"\n        );\n\n        // Ensures that the provided sibling path is valid for the CURRENT \"after\" tree.\n        // Without this check, someone could provide a sibling path for a different tree\n        // and update the entire \"after\" tree at once, causing it to be out of sync with leaf storage.\n        assert(\n            root.after == compute_merkle_root(leaf.after, p.index, p.after.sibling_path), \"After root don't match\"\n        );\n\n        // Update the leaf \n        leaf.after = p.new_value;\n        leaf.next_change = next_change;\n\n        // Update the after root\n        root.after = compute_merkle_root(leaf.after, p.index, p.after.sibling_path);\n        root.next_change = next_change;\n\n        self.update_unsafe(p.index, leaf, root);\n    }\n\n    // A variation of `update_at` that skips the merkle-membership checks.\n    // To be used by a contract which has already checked the merkle-membership.\n    // This allows us to check the merkle-memberships in private and then update\n    // in public, limiting the cost of the update.\n    pub fn update_unsafe_at(self: Self, index: Field, leaf_value: Field, new_root: Field) {\n        // User must ensure that the checks from update_at is performed for safety\n        let time = self.context.public.unwrap().timestamp() as u64;\n        let next_change = compute_next_change(time as Field);\n\n        let mut root = self.read_root();\n        let mut leaf = self.read_leaf_at(index);\n\n        // Move leaf if needed\n        if time > leaf.next_change as u64 {\n            leaf.before = leaf.after;\n        }\n\n        // Move root if needed\n        if time > root.next_change as u64 {\n            root.before = root.after;\n        }\n\n        // Update the leaf \n        leaf.after = leaf_value;\n        leaf.next_change = next_change;\n\n        // Update the root\n        root.after = new_root;\n        root.next_change = next_change;\n\n        self.update_unsafe(index, leaf, root);\n    }\n\n    // Updates the value in the in storage with no checks.\n    fn update_unsafe(self: Self, index: Field, leaf: Leaf, root: Leaf) {\n        let derived_storage_slot = pedersen_hash([self.storage_slot, index]);\n        let fields = leaf.serialize();\n        storage_write(derived_storage_slot, fields);\n\n        let fields = root.serialize();\n        storage_write(self.storage_slot, fields);\n    }\n}\n\n/*pub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n    current = pedersen_hash([hash_left, hash_right]);\n    };\n    current\n}\n*/\n", "path": "/usr/src/noir-projects/aztec-nr/slow-updates-tree/src/slow_map.nr" }, "301": { "source": "use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\n// A leaf in the tree.\nstruct Leaf {\n  next_change: Field,\n  before: Field,\n  after: Field,\n}\n\nimpl Serialize<3> for Leaf {\n  fn serialize(leaf: Leaf) -> [Field; 3] {\n      [leaf.next_change, leaf.before, leaf.after]\n  }\n}\n\nimpl Deserialize<3> for Leaf {\n  fn deserialize(serialized: [Field; 3]) -> Leaf {\n      Leaf { next_change: serialized[0], before: serialized[1], after: serialized[2] }\n  }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/slow-updates-tree/src/leaf.nr" }, "302": { "source": "// Subset of the MembershipProof that is needed for the slow update.\nstruct SlowUpdateInner<N> {\n  value: Field, // Value only really used for the private flow though :thinking:\n  sibling_path: [Field; N],\n}\n\n// The slow update proof. Containing two merkle paths\n// One for the before and one for the after trees.\n// M = 2 * N + 4\nstruct SlowUpdateProof<N, M> {\n  index: Field,\n  new_value: Field,\n  before: SlowUpdateInner<N>,\n  after: SlowUpdateInner<N>,\n}\n\npub fn deserialize_slow_update_proof<N, M>(serialized: [Field; M]) -> SlowUpdateProof<N, M> {\n    SlowUpdateProof::deserialize(serialized)\n}\n\nimpl<N, M> SlowUpdateProof<N, M> {\n    pub fn serialize(self: Self) -> [Field; M] {\n        let mut serialized = [0; M];\n        serialized[0] = self.index;\n        serialized[1] = self.new_value;\n        serialized[2] = self.before.value;\n        serialized[3 + N] = self.after.value;\n\n        for i in 0..N {\n            serialized[3 + i] = self.before.sibling_path[i];\n            serialized[4 + N + i] = self.after.sibling_path[i];\n        }\n        serialized\n    }\n\n    pub fn deserialize(serialized: [Field; M]) -> Self {\n        let mut before_sibling_path = [0; N];\n        let mut after_sibling_path = [0; N];\n\n        for i in 0..N {\n            before_sibling_path[i] = serialized[3 + i];\n            after_sibling_path[i] = serialized[4 + N + i];\n        }\n\n        Self {\n            index: serialized[0],\n            new_value: serialized[1],\n            before: SlowUpdateInner { value: serialized[2], sibling_path: before_sibling_path },\n            after: SlowUpdateInner { value: serialized[3 + N], sibling_path: after_sibling_path }\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/slow-updates-tree/src/slow_update_proof.nr" } } }

{ "noir_version": "0.25.0+d1ed549202e5a840845298c931418e173eb5437c", "name": "TokenBridge", "functions": [{ "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "H4sIAAAAAAAA/+2YzU7DMAyA0x/W/zJgsPIn9chxlXbYsQ/BC0yjErtsaC08PqLeYtXNGBfcg6VZipKmafLZSRM7ljrIY5ssXXbadKGOBd+XOp/9TwrGvmZDclpCOG0hnA4jJ7BN1LDr1B3ArtyMFwIYRwIYPQGMvgDGQABjKIAxEsAYC2BMBDCmAhgvBTCOBTBeCWC8FsB4I4BxIoDxVgDjnQDGKSOjRRhdXc7adN+mB3WI2Re63ledlFwM82IFPjsOnqm+gG9i44Pb1TnITeqQ3yZ1eMfguJ0OI3YdZnPo1+PuV8cKGbG/y2//hU/sxMg+lE32axbXIsakHnlGWwW6zHi3UtCxLZ0CMqbSc4TlKWmL7dAeuK6RHfxHXJvBH9+5xncpaTP6Rf9S8ervGTyewQxzEOsy+CCZ29nFZOO894J+Q/5+e3PuGnMSknps86zzsa6L+edhHqn+fow6UylJOSa2j/h5ioH03M9povv6Vrx7SGrYyjdslZI2CbFfOoD9LDIu9k05QM7MZ+ZTzJHq/+NYR99jbhu6UH8K2wfqeD9hVQgHpA6fpeHgHWyocJDAgeap7tAIibKJBoYLA9hs4bCBgBICNgiIIOAAh35Kxjjl5FJHGOVJ5y86f31f1/lqu2l2y1WTv22rOt9sm/yzrvKP3fpr2VTwXNXqB8Nw3LryGgAA", "debug_symbols": "ndBNCoUgFAXgvZyxPMLXr1uJBrcyEMQiLQhx7ynRAnJ2zz18k+Oh14mcWo2F8Ch+vIToPexGJj2so91B8LZikGaOV1cEhkVpCfHnPAwsoSoH1TmoyUHtRxTTSbuiUcs0SyoPM70rxeiu7WnCDQ==" }, { "name": "constructor", "is_unconstrained": false, "custom_attributes": ["aztec(private)", "aztec(initializer)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "token", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "token": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320] }, "bytecode": "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", "debug_symbols": "7ZzdbuM4DIXfxddFIVISJfZVFnvRne0CBYrOYNpdYFH03cfpRD+OOdYkDpKU0VUblHLP+SrTx6nDt+Hp65f718evzy/D3dsAZrj74214+Xb/vHn58nr//XW4MzfDw/Pf49f3m+Gfx6eH4c4ivt/M6sDzthIi5NoYhFKEmGoRHeViNCBUB2thWx0s+0n1nzcDwKdUjadSbdEm1TbalartGtUeKG5LPZpYdIsWjcHk0WAxCd4K1Y4xHzmUWhc/VLtPqdp/StW0al+7mFSDh6IawEke8171oRwZjP0QEk4oxBQhMBEiHDk4l44cqpMXUTp72aYTnYkr1pKK4JPkwK46cz9oxBPSiMkgGd+ggYAhdydvGjQiJc7sqaJBIo3kjmO9S/0BXY81wAsFHrXgAbBPmi3bFuplfGguFJ/xBR+18AFTkowAZtL39kcCZ0ECYbdL4soYUnoZATWEjATTphrRY6O6RXBVEgHCHKAouImUzcHdqoOHfFpC8K7hEyFA3leRdq+n6C9HCl2OlHUX91DFZ2MaUhbjDsZLEcIXIsSaSxECK7crFSGw2yGs2DcBSmPG8BtNqJglrNqQGNKPevtp7en1H/NG1Lpj6LemXL6s9bX+ze/wR2HEsPQ76Cg+XN6r5KogKN/sRUe5E0dityspnF4SA+QbUAYflsspn5pEVYyw8q2ty3vUcFVNUiQMnPpDNFXteAHagIkdjAyGOxgRjDMdjAwGOhgZDHYwMhjbwchgXAcjg/EdjAyGOhgZjK7kOwpPRx7fxJ2A2ZjVlWYbZnUl1GWzXlfqbJjVlSQbZnWlw4ZZXYmvYdZdk1ldyaxhVlfaapg9R4LC8k9IxhiPZ3bUmt9xD9U77kDSv3yP9aiGj7oYhswwIjYYLsZzzx2MCIZMByODgQ5GBoMdjAzGdjAyGNfByGB8ByODoQ5GBqMsJB8PTE++vwCjK/lG7zKY4CdgRrNBV5ptmNWVUBtmdaXOhlldSbJh1l2TWV2Jr2FWV4prmNWVzBpmdaUtNvnDJYw0M6srQS2bjboSVMOsrgTVMKsrQTXM6kpQDbPumszqSlANs7oSVMOsrgTVMKssQeUPiCNXgwmSWWUJatEsK0tQy2aVJahls8oS1LJZZQlq2ay7JrPKEtSyWWUJatmssgS1bPaaEhSfPkGhGVUnSSaY3c96gzFn0BSw0lQNzEqa4ByaYh5OYKKg6fSxAUcQ+f1bMA5nmuwFanLn0DSZzDT/2/kzaMLcN8bveX7e0Rk02fxU+Ph9oJmmcAZNnJ97wLFZhZmm018gcLOhsiY08z1+hj6OGLBoqqaniOUxT29jLEeGKE7lKjsVME6f6J9XN2exms7ml2zg0tmwTc2dPTfYUPkMA0VbvTfG8RA2eOlsygNaY2jyEzgfBtZNxvUpfUxm9MlDr2KeA+UYZh1z5bDb4wmhW3lups3Th1yVR9PUVrqVx0U2V8FBq/CgVXbvVdbdilfXwGnHcnUnwrxdEw9YI0J3eff66i/FbrtGbtutRbD3opHd/pbGRXzAInkQXWsRHLII91s0vvjv/vvj/V9PD5u565uf/fv8JY1hH1++/v/t50/efwA=" }, { "name": "token", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [0] }, "bytecode": "H4sIAAAAAAAA/81UzU7DMAx20jZrmYbgyAHUC/dM4gHCK/AGRS2Iyyp1mwQvjyDD1j4y35YiLFV2v/zY/uzY0FEM60LBRDzrGrDA32H9HHnwaxcvKUmVxfdXsb2EfZaxa8AMxCnrn7ni9H59Sacc1cBdyOgrrUEAuwA+0n1LWLeA2eRs5PUe1ivljFP8iY01kdI55SzyVEEugW1/nhx4Ql8B/sXfCuJwfxAPtnKA/+qf+F7k9+1rOs6H3Dk1kEOA+MVfCXvuWF/RT80Fl7iw/6OsgJsG7m1mykXqYZL6iD98T/jGLOQq+3H25Jxz8V43Q/6YGwEPKAHsud/qBXMbZbsbp+51eBq63kBoZRImaqOkYQFDu1Awot+jsgRM2lNrARyzaTs3dEpp1v4tSBeNDMRuWd+wfpym7qN92/TDezvud+340j6P+02/pS876jhFnggAAA==", "debug_symbols": "zdjLaoNAGAXgd5m1lP8yN32V0sU0tSCICdEWivjuVaxmEQlUWjk7B8/PfHg5gr2pz6fUVeemNUVv6MmZ4rk37SU107rt0rUzhScXMlM2b9NhCENm3qu6NIWKDNldmpmXNLONa9rrRliD/GQt6xplCsNLNnI8FidgcSIWJ8fiMIF5GMwjYB4F81gwD1g3M1g5M1g7M1g9M1g/C1g/y//287yHHLDHn/Soi+sekR5f1wfhGWTRQO5oEDm3hMnb27M33r5Z5OFEAU4U4UQ5mkgJTsRwIjlcpHQTuQ2Rwok2337xC0jJ3n9ANe4ZyncMWdozxHuG5JdD4+ozXav0WpfTL5Xp5EdzWv6wjMvu6zKfGb4B" }, { "name": "exit_to_l1_private", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "token", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "callerOnL1", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 35, "end": 36 }], "callerOnL1": [{ "start": 36, "end": 37 }], "inputs": [{ "start": 0, "end": 33 }], "nonce": [{ "start": 37, "end": 38 }], "recipient": [{ "start": 34, "end": 35 }], "token": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801] }, "bytecode": "", "debug_symbols": "" }, { "name": "_initialize", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)", "aztec(noinitcheck)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "token", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "token": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "1d3djmDHeZ3he+GxEOyq71+3EuRAcRRAgEAZFhMgEHTvGdrdTQlqYabUrLfXHJm2e1eVVFxLdPn5ev7ywx//9G+/++kPf/rxzz/89i8/PP9t1/PDb//7X37487//7sef/yd//ul3//HTD799fvPD73/8X1/+619/88P//sMff//Db23vv/6P3/znF+v4i338hR1/4cdfxPEXefxFHX/R3/7Fb/7h57pef7I73n52eb+uPjdX7+fq6uvq6vvq6nZ1db+6elxdPa+uXldXv5rVvprVuZrVuZrV+dDf7+798pPu8/azXa+Lx83FP/R3jNfr4rGedxafe4vb89xcfN1cfN9c3G4u7jcXj5uL583F6+bifXPxmwldNxO6biZ03UzoupnQdTOh62ZC182ErpsJXQcJffniQ7HLt+Pk/PJPI2kvi+/n5uIfit2KefnJ1etv/408+NGXc2yRcxh2DtuvPxtebz+8n/V6FNc5SlFHySdffzafd4/SOkcZmaPYo3OUpXOUrXMU0zmK6xwldI6SOkfRaVvTaVvTaVvXaVvXaVvXaVvXaVvXaVvXaVvXaVvXaVvXaVvXadvQadvQadvQadvQadvQadvQadvQadvQadvQadvQadvUadvUadvUadvUadvUadvUadvUadvUadvUadvUadvSadvSadvSadvSadvSadvSadvSadvSadvSadvSadvWadvWadvWadvWadvWadvWadvWadvWadvWadvWadvRadvRadvRadvRadvRadvRadvRadvRadvRaduRaVt/ZNrWH5m29Uembf2RaVt/ZNrWH5m29Uembf2RaVt/ZNrWH522XTptu3Tadum07dJp26XTtkunbZdO2y6dtl06bbt02nbrtO3Wadut07Zbp223TttunbbdOm2rM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2SuM0vmOrNkrjNL5jqzZK4zS+Y6s2QOjiqFvR2l/L2jmM5RqL9t9+7XX2/45S/nvaOUzlFa5ygjcxRsKOcbjkL9Q8K2/ZqgbW1/d5Szn345+P5eD26SBy+z9fLTZX/za1P/5uD+vR48vteD5/d68PpOD84N8NR6XfXLX673jrJ0jrJ1jmI6R3Gdo2D/51v5289WvZug1DlK6RyldY4yKkcJboDn60dZOkfZOkcxnaNwbTtvvxq+f17sH4+C9Urn26tDp793lNY5ysgchRtV+fpRls5Rts5RTOcornOU0DlK6hxFp22XTtsunbbdOm27ddp267Tt1mnbrdO2W6dtt07bbp223Tptu3Xa1nTa1nTa1nTa1nTa1nTa1nTa1nTa1nTa1nTa1nTa1nXa1nXa1nXa1nXa1nXa1nXa1nXa1nXa1nXa1nXaNnTaNnTaNnTaNnTaNnTaNnTaNnTaNnTaNnTaNnTaNnXaNnXaNnXaNnXaNnXaNnXaNnXaNnXaNnXaNnXatnTatnTatnTatnTatnTatnTatnTatnTatnTatnTatnXatnXatnXatnXatnXatnXatnXatnXatnXatnXadnTadnTadnTadnTadnTadnTadnTadnTadnTadmTaNh+Zts1Hpm3zkWnbfGTaNh+Zts1Hpm3zkWnb1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy1JklS51ZstSZJUudWbLUmSVLnVmy5EaVZr397Ph67yimcxTs1/g+Uy8/++Uv+72jlM5RWucoI3MUbCjnG46C/Wr41a8/u7fn3x3lH3/6q7/EObERnl/94Pa9Hty/14PH93rw/F4PXt/rwVvg4P91FGyW6BuOovAfEi9HUaj9l6MoFPnLURSq+eUoCmX7chSZP60pdf60ptT505pS509rSp0/rSm5P63p60fZOkcxnaO4zlFC5yg6bds6bds6bds6bTs6bTs6bTs6bTs6bTs6bTs6bTs6bTs6bTs6bTsybVuPTNvWI9O29ci0bT0ybVuPTNvWI9O29ci0bT0ybVuPTNvWo9O2S6dtl07bLp22XTptu3TalpuamX79f8Ls56n3jtI6RxmZo3BTM18/ytI5ytY5iukcxXWOEjpHyc84ynt/lnPt0jlK6xxlZI5iHNGyfDtKvPefzNh8yDccxXWOEjpHSZ2jlM5ROErzvP5Zznutfu8oI3MUf3SOsnSOsnWOYjpHcZ2jhM5RUucopXMUGWhfLgPtK2SgfWF/1tA3HGXrHMV0juI6Rwmdo8iMNZXOWFPpjDWVzlhT6Yw1Veq0beq0beq0beq0beq0beq0beq0beq0beq0bem0bem0bem0bem0bem0bem0bem0bem0bem0bem0beu0beu0betUXOtUXOtUXOtUXOtUHDfdYPv1l+lsa3vvKK5zlDt/274snjcX/9DfWl/9rQD1sbGCb1h/rq7fHxsA+Ib11+X19+X17fL6fnn9uLx+Xl6/Lq/fl9f/UH79y7+/Lz/65S9/gWv1Um/9MVH+9eXX3eX33eXt7vJ+d/mD5L58kcdf1PEXffzFnH5xwplfvljHX+zjL+z4Cz/+4vjO9/Gd7+M738d3vo/v3I7v3I7v3I7v3I7v3I7v3I7v3I7v3I7v3I7v3I7v3I/v3I/v3I/v3I/v3I/v3I/v3I/v3I/v3I/v3I/vPI7vPI7vPI7vPI7vPI7vPI7vPI7vPI7vPI7vPI7vPI/vPI/vPI/vPI/vPI/vPI/vPI/vPI/vPI/vPI/vvI7vvI7vvI7vvI7vvI7vvI7vvI7vvI7vvI7vvI7vvI/vvI/vvI/vvI/vvI/vvI/vvI/vvI/vvI/vvI/vfI7vfI7vfI7vfI7vfI7vfI7vfI7vfI7vfI7vfE7vfJ7n+It1/MU+/sKOv/DjL+L4izz+oo6/6OMvju98Hd/5Or7zdXzn6/jO1/GdH7/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/DzfE73By/w83xO9wcv8PN8TvcHL/Dref4Ie7LJ+v8k33+iZ1/4uefxPknef5JnX/S55+c3/46v/11fvvr/PbX+e2v89tf57e/zm9/nd/+Or/9dX77+/z29/nt7/Pb3+e3v89vf5/f/j6//X1++/v89vf57dv57dv57dv57dv57dv57dv57dv57dv57dv57dv57fv57fv57fv57fv57fv57fv57fv57fv57fv57fv57cf57cf57cf57cf57cf57cf57cf57cf57cf57cf57ef57ef57ef57ef57ef57ef57ef57ef57ef57ef57df57df57df57df57df57df57df57df57df57df57ff57ff57ff57ff57ff57ff57ff57ff57ff57ff57c/57c/57c/57c/57c/57c/57c/57c/57c/57Z+/9a3zt751/ta3zt/61vlb35d/6j3/JM4/yfNP6vyTPv/k/PbP3/rW+VvfOn/rW+dvfev8rW+dv/Wt87e+df7Wt87f+tb5W986f+tb52996/ytb52/9a3zt771sT8nxuf192PH/mXMenm/LZ93l6+7y/fd5efq8h/7s1S+vvy6u/y+u7zdXd7vLn83tXY3tXY3tXY3tXY3tX43tX43tX43tX43tX43tX43tX43tX43tX43tR/70zHSXn+JW4b/svx63vuNb/X6a/Ds+Zt14/UkH/vDMX7VkyyZk2yZk5jMSVzmJCFzkpQ5ScmcpGVOItOxKdOxKdOxKdOxKdOxKdOxKdOxKdOxKdOxKdOxKdOxJdOxJdOxJdOxJdOxJdOxJdOxJdOxJdOxJdOxJdOxLdOxLdOxLdOxLdOxLdOxLdOxLdOxLdOxLdOxLdOxI9OxI9OxI9OxI9OxI9OxI9OxI9Oxc6ljX5fvu8vPzeX389xdft1dft9d3u4u73eXj7vL593l6+7yfXf5u6ldd1O77qZ23U3tupvadTe1625q193UrrupXXdTu+6mdt9N7f5YajNel6/52D9x7b1lTmIyJ3GZk4TMSVLmJCVzkpY5yaic5GNc/Vc9iUzHmkzHmkzHmkzHmkzHmkzHmkzHmkzHmkzHukzHukzHukzHukzHukzHukzHukzHukzHukzHukzHhkzHhkzHhkzHhkzHhkzHhkzHhkzHhkzHhkzHhkzHpkzHpkzHpkzHpkzHpkzHpkzHpkzHpkzHpkzHpkzHlkzHlkzHlkzHlkzHlkzHlkzHlkzHlkzHlkzHlkzHtkzHtkzHtkzHtkzHtkzHtkzHtkzHtkzHtkzHtkzHjkzHjkzHjkzHjkzHjkzHjkzHjkzHjkzHjkzHjkrH2qPSsfaodKw9Kh1rj0rH2qPSsfaodKw9Kh1rj0rH2qPSsfbIdOyS6dgl07FLpmOXTMcumY5dMh27ZDp2yXTskunYJdOxW6ZjZea8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8TGbOy2TmvExmzstk5rxMZs7LZOa8XGbOy2XmvFxmzstl5rz8UelYl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfNymTkvl5nzcpk5L5eZ83KZOS+XmfMKmTmvkJnzCpk5r5CZ84pHpWNDZs4rZOa8QmbOK2TmvEJmzitk5rxCZs4rZOa8QmbOK2TmvEJmzis+OOc1++Un68m/O8nr8nV3+b67/Fxd/oOzU19dft1dft9d3u4u73eXj7vL303tvpvafTe1+25q7W5q7W5q7W5q7W5q7W5q7W5q7W5q7W5q7W5q7W5qPzbf8bV/ivrYzMZXV99XV7erq/vV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" }, { "name": "get_token", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238] }, "bytecode": "", "debug_symbols": "" }, { "name": "_call_mint_on_token", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "secret_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }], "secret_hash": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240] }, "bytecode": "", "debug_symbols": "" }, { "name": "claim_public", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "to", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "secret", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 38, "end": 39 }], "inputs": [{ "start": 0, "end": 37 }], "secret": [{ "start": 39, "end": 40 }], "to": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241] }, "bytecode": "", "debug_symbols": "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7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq8v1nt9sd7ri/VeX6z3+mK91xfrvb5Y7/XFeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZ6r2+u9/rmeq9vrvf65nqvb673+uZyr0+P5V7f+Sey/ie6/ie2/ie+/idt/U/6+p+M9T+J9T9ZP31ZP31ZP31ZP31ZP31ZP31ZP31ZP31ZP31ZP31ZP31dP31dP31dP31dP31dP31dP31dP31dP31dP31dP31bP31bP31bP31bP31bP31bP31bP31bP31bP31bP31fP31fP31fP31fP31fP31fP31fP31fP31fP31fP/22fvpt/fTb+um39dNv66ff1k+/rZ9+Wz/9tn76bf30+/rp9/XT7+un39dPv6+ffl8//b5++n399Pv66ff10x/rpz/WT3+sn/5YP/2xfvpj/fTH+umP9dMf66c/1k8/1k8/1k8/1k8/1k8/1k8/1k8/1k8/1k8/1k8/1k9/rp/+XD/9uX76c/305/rpz/XTn+unP9dPf66f/nqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/pkvdcn670+We/1yXqvT9Z7fbLe65P1Xp+s9/p0vden670+Xe/16Xqv7/wv3Ot/0tb/pK//yVj/k1j/k/XTX+/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16XqvT9d7fbre69P1Xp+u9/p0vden670+Xe/16Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/psvddn670+W+/12Xqvz9Z7fbbe67P1Xp+t9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvz9d7fb7e6/P1Xp+v9/p8vdfn670+X+/1+Xqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vrff62nqvr633+tp6r6+t9/raeq+vr/f6+nqvr6/3+vp6r6+v9/r6eq+vr/f6+nqvr6/3+vp6r6+v9/r6eq+vr/f6+nqvr6/3+vp6r6+v9/r6eq+vr/f6+nqvr6/3+vp6r6+v9/r6Sq/vP/7pc+LWf35UvP36tB7yfIBnP6BlP6BnP2BkPyCyHzCTH7DSLf33HiDZD9DsB2RnsmVnsmVnsmVnsmVnsmVn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M16SPeMl2TNekj3jJdkzXpI94yXZM16SPeMl2TNekj3jJdkzXpI94yXZM16SPeMl2TNekj3jJdkzXpI94yXZM16SPeMl2TNekj3jJdkzXpI94yXZM16SPeMl2TNekj3jpdkzXpo946XZM16aPeOlh2c/oGU/oGc/YGQ/ILIfkJ3J2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeOl2TNemj3jpdkzXpo946XZM16aPeNl2TNelj3jZdkzXpY942WHZz+gZT+gZz9gZD8gsh+QncnZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY942XZM16WPeNl2TNelj3jZdkzXpY94+XZM16ePePl2TNenj3j5YdnP6BlP6BnP2BkPyCyH5CdydkzXp494+XZM16ePePl2TNenj3j5dkzXp494+XZM16ePePl2TNenj3j5dkzXp494+XZM16ePePl2TNenj3j5dkzXp494+XZM16ePePl2TNenj3j5dkzXp494+XZM16ePePl2TNenj3j5dkzXv5nM17D289PjtmfnxXxF59tZj8/28x/hSK/QlGcUAwnFMcJpeGE0nFCGTihBE4oEyaUP5uuuzYUHLVtOGrbytR2znjUw0OPLz48zOTxzed/lXhVPZvTRt5oI++0kQ/ayIM28skaeT9oIxfayJU2ctoa+mfjuh+NnLaGdtoa2mlraKetoZ22hg7aGjpoa+igraGDtob+2aD8RyOnraGDtoaOshoqRx+P0EW//rQ+/3OFmP7l04/Qgzf0SRt6HLyhC2/oyhu68YbuvKE33tA7b+i81TR4q2mgVlMdj+uX6LQ/v6xN1Np7+UJRK/XlC0Wt65cvFPUWcPlCfZeFot4wLl8o6n3k8oWi3l4uXyjqXefyhW5yM2rHJjejdmxyM2rHJjejdmxyM2qH77LQTW5G7djkZtSOTW5G7djkZtSOXW5GssvNSHa5GckuNyMhuBnZ4X/59CN05w2d4Pbyd6ET3Ef+LnSCG8bfhU5wZ/i70AluAX8TuhLU9b8LnaBS/13oBLX370LnraZ/5oTy2dALq+nf/4fyf/60iT2+2rTNv1y//q3LmvZdFjp2WWjsstC5yULt2GWhsstCdZeF2i4L9V0WusvNyHa5GdkuNyPb5WZku9yMfJebkUPcjB7BQNxeHsFA3DAewThSMBCV+hEMRDV9BANR8R7BQFSlRzAQleNnMA1C3R/BIClwQ1LgP/N+i0N/fjLaV//x+e8/+wjFcUJpOKF0nFAGTiiBE8qECeXPLMuuDUVwQlGcUHDUtuOobS9T2/PN7vmfGm2M56eHvPywtl8fjt8//Ai8swY+WAMP1sAnaeDjYA1cWANX1sCNNXBnDZy1cg7WyjlYK+dgrZyDtXIGa+UM1soZrJUzCivn38bybwXurIE31sA7a+CDNfBgDXxCBu7PAe4m/iLseXCGLZxhK2bY9vDcbb8hAb+FjVkxvwwbs15+GTZmtfwybMxa+WXYmJXyy7Ax6+SXYYNWyX8ddj9Aq+RXYYNWya/CpqyS/aCskv2grJL9oKyS/aCskv2grJL9oKyS/eCsksJZJYWzSgpnlRTOKvlnfjefC5uzSgpnlRTOKimcVVI4q6RyVknlrJLKWSWVs0r+mY/N58LmrJLKWSWVs0oqZ5VUzippnFXSOKukcVZJ46ySf+aA8rmwOaukcVZJ46ySxlkljbNKOmeVdM4q6ZxV0jmr5J85hHwubM4q6ZxV0jmrpHNWSeesko2zSjbOKtk4q2TjrJJ1Pi7Xhs1ZJRtnlWycVbJxVsnGWSU7Z5XsnFWyc1bJzlkl6/x3rg2bs0p2zirZOatk56ySnbNKDs4qOTir5OCskoOzSlY681wZNmeVHJxVcnBWycFZJQdnlQzOKhmcVTI4qySoD8+XYXNWSVAPni/D5qySoP47X4bNWSVRvXe+CBvVe+ersDmrJKf3Tuf03umc3jud03unc3rvdE7vnc7pvdM5vXcGp/fO4PTeGZzeO4PTe2cclFVycHrvDE7vncHpvTM4vXcGp/fO4PTeGZzeO4PTe2dweu8MTu+dwem9Mzi9dwan987g9N4ZnN47g9N7Z3B67wxO753B6b0zOL13Bqf3zuD03hmc3juD03tncHrvDE7vncHpvTM4vXcGp/fO4PTeGZzeO4PTe2dweu8MTu+dwem9Mzi9dwan987g9N4ZnN47g9N7Z3B67wxO753B6b0zOL13Bqf3zuD03hmc3juD03tncHrvDE7vncHpvTM4vXcGp/fO4PTeGZzeO4PTe2dweu8MTu+dwem9Mzi9dwan987g9N4ZnN47g9N7Z3B67wxO753B6b0zOL13Bqf3zuD03hmc3juD03tncHrvDE7vncHpvTM4vXcGp/fO4PTeGZzeO4PTe2dweu8MTu+dwem9Mzi9dwan987g9N4ZnN47g9N7Z3B67wxO753B6b0zOL13Bqf3zuD03hmc3jvB6b0TnN47wem9E5zeO3FQVsng9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03glO753g9N4JTu+d4PTeCU7vneD03pmc3juT03tncnrvTE7vnXlQVsnJ6b0zOb13Jqf3zuT03pmc3juT03tncnrvTE7vncnpvTM5vXcmp/fO5PTemZzeO5PTe2dyeu9MTu+dyem9Mzm9dyan987k9N6ZnN47k9N7Z3J670xO753J6b0zOb13Jqf3zuT03pmc3juT03tncnrvTE7vncnpvTM5vXcmp/fO5PTemZzeO5PTe2dyeu9MTu+dyem9Mzm9dyan987k9N6ZnN47k9N7Z3J670xO753J6b0zOb13Jqf3zuT03pmc3juT03tncnrvTE7vncnpvTM5vXcmp/fO5PTemZzeO5PTe2dyeu9MTu+dyem9Mzm9dyan987k9N6ZnN47k9N7Z3J670xO753J6b0zOb13Jqf3zuT03pmc3juT03tncnrvTE7vncnpvTM5vXcmp/fO5PTemZzeO5PTe2dyeu9MTu+dyem9Mzm9dyan987k9N6ZnN47k9N7Z1J67/hB6b1zhs1YJc+wGavkGTZjlTzDZqySZ9iMVfIMm7FKnmEzVskzbMYqeYbNWSUpvXfOsDmrJKX3zhk2Z5Wk9N45w+askpTeO2fYnFWS0nvnDJuzSlJ675xhc1ZJSu+dM2zOKknpvXOGzVklKb13zrA5qySl984ZNmeVpPTeOcPmrJKU3jtn2JxVktJ75wybs0pSeu+cYXNWSUrvnTNszipJ6b1zhs1ZJSm9d86wOaskpffOGTZnlaT03jnD5qySlN47Z9icVZLSe+cMm7NKUnrvnGFzVklK750zbM4qSem9c4bNWSUpvXfOsDmrJKX3zhk2Z5Wk9N45w+askpTeO2fYnFWS0nvnDJuzSlJ675xhc1ZJSu+dM2zOKknpvXOGzVklKb13zrA5qySl984ZNmeVpPTeOcPmrJKU3jtn2JxVktJ75wybs0pSeu+cYXNWSUrvnTNszipJ6b1zhs1ZJSm9d86wOaskpffOGTZnlaT03jnD5qySlN47Z9icVZLSe+cMm7JKCqf3jnB67win945weu/IQVklhdN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOL13hNN7Rzi9d4TTe0c4vXeE03tHOb13lNN7Rzm9d5TTe0cPyiqpnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvK6b2jnN47yum9o5zeO8rpvaOc3jvG6b1jnN47xum9Y5zeO3ZQVknj9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHeP03jFO7x3j9N4xTu8d4/TeMU7vHQP13unH+PnZ3uRV2JhV8suwMavkl2FjVsnRH2GP2f71R5v6Iw1s/oph9lcxiD++V6T3v3z6sSGY9fdzGwLqF5S2IUOeG/LbF/++IZh3hrx/If3Xhrz+F4J5G8naED0eSxPV4+WGYN5zPrghvmvKqMrLDcG8LSxsSJfH13aTrzbEflUZG683hP8eEr82RFdENfzX6o7nfvBfQy7dD1A/ps/tB/8l5Nr94L+DXLsf/FeQa/fD7/34y35gNoc+tx+YXafP7Qf9BfXi/bjvp3/dj/t++vt+OKgT2uf2476f/nU/7vvpX/fjvp/+dT/83o+/7Md9P/3rftz307/ux30//ct+gNqHTXuEMKf/64/GiNcffawQUyGvXCGm5i2ssOn8+dHWfv3zN3sVQn/+d9b4FYD++geNKXgf2gxMtfvQZmC+in9oMzDfwz+zGaAWch/aDMw38A9tBubr94c2g/6ueOVm+L0ZvzbjvoH+thn3DfS3zbhvoL9txn0D/W0z7hvor80AtWf80GbcN9DfNuO+gf62GfcN9LfN8Hszfm3GfQP9bTPuG+hvm3HfQH/bjO97A32s8PteK3+uENSk9MoVft8L4GOF3/dW91jh972qPVZIX1j68agW/dBXK6SvFl+tENQTcmU4QB8rjPFyhfRK8+UK+UdYvlqhQ67wq7kUUFPKL8PGfHv6MmzMcvRl2Jg15suwMV8zvgob1JTyy7Axy/SXYWPW3i/DRiioj1gQSt8jFoR69ogFoUg9YkGoPI9YEMrJIxaEGvEzFgifxUcsCGr+iAVBoh+xAOkuhHfhI5Yk3X18fc/9+pH79ZH79TP167NM4h5fL7lfr7lfb7lf77lfn5u1kZu1kZu1kZu1kZu1MzdrZ27WztysnblZO3OzduZm7czN2pmbtTM3a2dq1rbjyP16yf16zf16y/16z/36lvv1PffrR+7XR+7X52at5Gat5Gat5Gat5Gat5Gat5Gat5Gat5Gat5Gat5Gat5mat5mat5mat5mat5mat5mat5mat5mat5mat5mat5Wat5Wat5Wat5Wat5Wat5Wat5Wat5Wat5Wat5Wat52at52at52at52at52at52at52at52at52at52Zty83alpu1LTdrW27WttysbblZ23KztuVmbcvN2pabtT03a3tu1vbcrO25Wdtzs7bnZm3Pzdqem7U9N2t7btaO3KwduVk7crN25GbtyM3a3Nmoljsb1XJno1rubFTLnY1qubNRLXc2quXO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QWMUBY1RVDRGUdEYRUVjFBWNUdQDTKkVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVFYxQVjVFUNEZR0RhFRWMUFY1RVDRGUdEYRUVjFBWNUVQ0RlHRGEVDYxQNjVE0NEbR0BhFO8CU2tAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RNDRG0dAYRUNjFA2NUTQ0RtHQGEVDYxQNjVE0NEbR0BhFQ2MUDY1RdDRG0dEYRUdjFB2NUfQDTKkdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0RtHRGEVHYxQdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0RtHRGEVHYxQdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0RtHRGEVHYxQdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0RtHRGEVHYxQdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0RtHRGEVHYxQdjVF0NEbR0RhFR2MUHY1RdDRG0dEYRUdjFB2NUXQ0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0w2q7XSDajvdoNpON6i+0w2q73SD6jvdoPpON6h6n+xPLnanG1Tf6QbVd7pB9Z1uUDt5ks+dPMnnTp7kcydP8rmTJ/ncyZN87uRJPnfyJJ87eZLPnTzJ506e5HMnT/K5kyf53MmTfO7kST538iSfO3mSz508yedOnuRzJ0/yuZMn+dzJk3zu5Ek+d/Iknzt5ks+dPMnnTp7kcydP8rmTJ/ncyZN8buRJHsdGnuTnYve5QZ2L3ecGdS52nxvUuVjfabH73KDOxe5zgzoXu88N6lzsPjeoc7E73aA28iQ/w9zpBrWRJ/mPMHdarO+02J1uUBt5kp9h7nSD2siT/AxzpxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqcb1Eae5Odid7pBbeRJfi52pxvURp7k52J3ukFt5El+LnanG9RGnuTnYne6QW3kSX4udqMblOzkSS47eZLLTp7kspMnuRy+02I3ukHJTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnuezkSS47eZLLTp7kspMnue7kSa47eZLrTp7kupMnuR6+02I3ukHpTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue7kSa47eZLrTp7kupMnue3kSW47eZLbTp7ktpMnuR2+02I3ukHZTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue3kSW47eZLbTp7ktpMnue/kSe47eZL7Tp7kvpMnuR++02I3ukH5Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnue/kSe47eZL7Tp7kvpMnedvJk7zt5EnedvIkbzt5krfDd1rsRjeotpMnedvJk7zt5EnedvIkbzt5kredPMnbTp7kbSdP8raTJ3nbyZO87eRJ3nbyJG87eZK3nTzJ206e5G0nT/K2kyd528mTvO3kSd528iRvO3mSt508ydtOnuRtJ0/ytpMnedvJk7zt5EnedvIkbzt5kredPMnbTp7kbSdP8raTJ3nbyZO87eRJ3nbyJG87eZK3nTzJ206e5G0nT/K2kyd528mTvO3kSd528iRvO3mSt508ydtOnuRtJ0/ytpMnedvJk7zt5EnedvIkbzt5kredPMnbTp7kbSdP8raTJ3nbyZO87eRJ3nbyJG87eZK3nTzJ206e5G0nT/K2kyd528mTvO3kSd528iRvO3mSt508ydtOnuRtJ0/ytpMnedvJk7zt5EnedvIkbzt5kredPMnbTp7kbSdP8raTJ3nbyZO87eRJ3nbyJG87eZK3nTzJ206e5G0nT/K2kyd528mTvO3kSd528iRvO3mSt508yftOnuR9J0/yvpMned/Jk7wfvtNiN7pB9Z08yftOnuR9J0/yvpMned/Jk7zv5Ened/Ik7zt5kvedPMn7Tp7kfSdP8r6TJ3nfyZO87+RJ3nfyJO87eZL3nTzJ+06e5H0nT/K+kyd538mTvO/kSd538iTvO3mS9508yftOnuR9J0/yvpMned/Jk7zv5Ened/Ik7zt5kvedPMn7Tp7kfSdP8r6TJ3nfyZO87+RJ3nfyJO87eZL3nTzJ+06e5H0nT/K+kyd538mTvH8nT/Lmz6DbiH/94RnPKM7o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7GCusIO5wg7mCjuYK2y58cilwTNX2MFcYQdzhR3MFXYwV9hgrrDBXGGDucIGc4UtN4e5NHjmChvMFTaYK2wwV9hgrrCTucJO5go7mSvsZK6w5QY+lwbPXGEnc4WdzBV2MlfYSVxh9SCusHoQV1g9iCusHsQVVg/iCqsHcYXVg7jCKrbF01fBE1dYxTZ3+iJ4bGenr4JnrrDgnk5fBM9cYcE9nb4InrnCgns6fRE8c4UF93T6InjmCsvs6aTMnk7K7OmkzJ5OyuzppNieTl0fn+3WXgQPXWG/Ch66wn4VPHSF/Sp46Ar7RfDYnk5fBQ9dYb8KHrrCfhU8UIV9hARUNx8hAVXDR0hANe4RElDleoQEVI8eIQFVmZ8hIbkVPUICqgiPkIB0/hESnnojuQA9QsJTbyTHnkdIeOqN5K7zCAlPvZGccB4h4ak3kmvNIyQ89UZymHmEhKfeSG4wj5Dw1BvJueUREp56I7msPELCU28kR5RHSHjqjeRe8ggJT72RnEYeIeGpN5IryCMkPPVGcvB4hISn3khuG4+Q8NQbyRnjERKeeiO5WDxCwlNvJMeJR0h46o3kDvEICU+9kZwcHiHhqTeS68IjJDz1RnJIeISEp95IbgaPkPDUG8l54BESnnojuQQ8QsJT73qi/6ufO9d6Tv/rkDpeSAMvpMALaaKFZPVU+9chCV5IiheS4YUEp952wKm3HXDqbQecetsBp9524Km34Km34Km34Km34Km34Km34Km34Km34Km34Km34Km34qm34qm34qm34qm34qm34qm34qm34qm34qm34qm34am34am34am34am34am34am34am34am34am34am346m346m346m346m346m346m346m346m346m346l3w1PvhqfeDU+9G556Nzz1bnjq3fDUu+Gpd8NT74an3h1PvTueenc89e546t3x1LvjqXfHU++Op94dT707nnoPPPUeeOo98NR74Kn3wFPvgafeA0+9B556Dzz1HnjqHXjqHXjqHXjqHXjqHXjqHXjqHXjqHXjqHXjqHXjqPfHUe+Kp98RT74mn3nispeGxlobHWhoea2l4rKXhsZaOx1o6HmvpeKyl47GWfsCpt+Oxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6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eKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXhsZaGx1oaHmtpeKylHXDqbXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGWhsdaOh5r6XispeOxlo7HWvoBp96Ox1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6XispeOxlo7HWjoea+l4rKXjsZaOx1o6HmvpeKyl47GWjsdaOh5r6Xis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3nCs5RkSnnrDsZZnSHjqDcdaniHhqTcca3mGhKfecKzlGRKeesOxlmdIeOoNx1qeIeGpNxxreYaEp95wrOUZEp56w7GWZ0h46g3HWp4h4ak3HGt5hoSn3nCs5RkSnnrDsZZnSHjqDcdaniHhqTcca3mGhKfecKzlGRKeesOxlmdIeOoNx1qeIeGpNxxreYaEp95wrOUZEp56w7GW5//CU2841vL8X3jqDcdanv8LT73hWMvzf+GpNxxref4vPPWGYy3PkPDUG461PEPCU2841vIMCU+94VjLHz+4ixcSnnrDsZY/fu8nNaTnY6TmMZeobIvnY+L41xv8Lz78jMkAY/LqmM4O9OPDZ4fl1z/F8xyfQTXEoDpiUAMxqEAMauIFJdcQklcHJeVB2fErqPY6KEUMKlfQn4/xmse0msf0mseMmsdEzWNmyWPkqHmM1DxGax5TowJSowJSowJSowJSowJSowJSowJaowJaowJaowJaowJaowJaowJaowJaowJaowJaowJWowJWowJWowJWowJWowJWowJWowJWowJWowJWowJeowJeowJeowJeowJeowJeowJeowJeowJeowJeowKtRgVajQq0GhVoNSrQalSg1ahAq1GBVqMCrUYFWo0K9BoV6DUq0GtUoNeoQK9RgV6jAr1GBXqNCvQaFeg1KjBqVGDUqMCoUYFRowKjRgVGjQqMGhUYNSowalRg1KhA1KhA1KhA1KhA1KhA1KhA1KhA1KhA1KhA1KhA1KjArFGBWaMCs0YFZo0KzBoVmDUqMGtUYNaowKxRgVmiAnocNY+RmsdozWOs5jFe85hW85he85hR85ioeUyNCtTMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg1swOas3soNbMDmrN7KDWzA5qzeyg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niHhqTcca3mGhKfecKzlGRKeesOxlmdIeOoNx1qeIeGpNxxreYaEp95wrOUZEp56w7GWZ0h46g3HWp4h4ak3HGt5hoSn3nCs5RkSnnrDsZZnSHjqDcdaniHhqTcca3mGhKfecKzlGRKeesOxlmdIeOoNx1qeIeGpNxxreYaEp95wrOUZEp56w7GWZ0h46g3HWp4h4ak3HGt5hoSn3nCs5RkSnnrDsZZnSHjqDcdaniHhqTcca3mGhKfecKzlGRKcegseayl4rKXgsZaCx1rKAafegsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4LGWgsdaCh5rKXispeCxloLHWgoeayl4rKXgsZaCx1oKHmspeKyl4rGWisdaKh5rqXispR5w6q14rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWioea6l4rKXisZaKx1oqHmupeKyl4rGWisdaKh5rqXispeKxlorHWhoea2l4rKXhsZaGx1raAafehsdaGh5raXispeGxlobHWhoea2l4rKXhsZaGx1oaHmtpeKyl4bGW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K+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7HK+h9vILexyvofbyC3scr6H28gt7Ha9L7eE16H69J7+M16X285sFekye9j9ek9/Ga9D5ek97Ha9L7eE16H69J7+M16X28Jr2P16T38Zr0Pl6T3sdr0vt4TXofr0nv4zXpfbwmvY/XpPfxmvQ+XpPex2vS+3hNIB+vZ0g4RfYZEk7VfIaEUwYfIQF5YT1DwilUz5BwKs8zJJxS8gwJpzY8Q8IR+2dIeOoNZOH0DAlPvYFMlh4hAbkmPUPCU28gX6NnSHjqDeQ89AwJT72BvIGeIeGpN5B7zzMkPPUG8td5hoSn3kAOOM+Q8NQbyKPmGRKeegO5yDxDwlNvIJ+XZ0h46g3kxPIMCU+9gbxSniHhqTeQm8kzJDz1BvIbeYaEp95AjiDPkPDUG8iz4xkSnnoDuWo8Q8JTbyDfi2dIeOoN5EzxDAlPvYG8I54h4ak3kLvDMyQ89QbyX3iGhKfeQA4Jz5Dw1BvIw+AZEp56A7kMPEPCU+9cH4DnU6TkKVryFCt5ipc8pZU8pZc8ZZQ8JUqeMvOf4sdxlDxFSp6iJU+xkqd4yVNayVN6yVNGyVOi5CkluS8luS8luS8luS8luS8luS8luS8luS8luS8luS8lua8lua8lua8lua8lua8lua8lua8lua8lua8lua8luW8luW8luW8luW8luW8luW8luW8luW8luW8luW8lue8lue8lue8lue8lue8lue8lue8lue8lue8lue8lud9Kcr+V5H4ryf1WkvutJPdbSe63ktxvJbnfSnK/leR+L8n9XpL7vST3e0nu95Lc7yW530tyv5fkfi/J/V6S+6Mk90dJ7o+S3B8luT9Kcn+U5P4oyf1RkvujJPdHSe5HSe5HSe5HSe5HSe5HSe5HSe5HSe5H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" }, { "name": "_assert_token_is_same", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "token", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "token": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "exit_to_l1_public", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "callerOnL1", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 38, "end": 39 }], "callerOnL1": [{ "start": 39, "end": 40 }], "inputs": [{ "start": 0, "end": 37 }], "nonce": [{ "start": 40, "end": 41 }], "recipient": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242] }, "bytecode": "", "debug_symbols": "" }, { "name": "claim_private", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "secret_hash_for_redeeming_minted_notes", "type": { "kind": "field" }, "visibility": "private" }, { "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "secret_for_L1_to_L2_message_consumption", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }], "secret_for_L1_to_L2_message_consumption": [{ "start": 35, "end": 36 }], "secret_hash_for_redeeming_minted_notes": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097] }, "bytecode": "", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n", "path": "std/option.nr" }, "63": { "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr" }, "68": { "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{L1_TO_L2_MESSAGE_LENGTH, GENERATOR_INDEX__NULLIFIER, GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET},\n    hash::{pedersen_hash, sha256_to_field}\n};\n\nstruct L1ToL2Message {\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn new(\n        sender: EthAddress,\n        chain_id: Field,\n        recipient: AztecAddress,\n        version: Field,\n        content: Field,\n        secret: Field\n    ) -> L1ToL2Message {\n        let secret_hash = pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        Self {\n            sender,\n            chain_id,\n            recipient,\n            version,\n            content,\n            secret,\n            secret_hash,\n            tree_index: 0\n        }\n    }\n\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: EthAddress::from_field(fields[0]),\n            chain_id: fields[1],\n            recipient: AztecAddress::from_field(fields[2]),\n            version: fields[3],\n            content: fields[4],\n            secret,\n            secret_hash: fields[5],\n            tree_index\n        }\n    }\n\n    fn hash(self: Self) -> Field {\n        let mut hash_bytes = [0 as u8; 192];\n        let sender_bytes = self.sender.to_field().to_be_bytes(32);\n        let chain_id_bytes = self.chain_id.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_field().to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chain_id_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash\n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.hash();\n        pedersen_hash(\n            [message_hash, self.secret, self.tree_index],\n            GENERATOR_INDEX__NULLIFIER\n        )\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr" }, "71": { "source": "use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "86": { "source": "mod l1_to_l2_message;\n\nuse crate::oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness;\n\nuse dep::std::merkle::compute_merkle_root;\nuse crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let msg = L1ToL2Message::new(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret\n    );\n    let entry_key = msg.hash();\n\n    let returned_message = get_l1_to_l2_membership_witness(entry_key);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = compute_merkle_root(entry_key, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    msg.compute_nullifier()\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/messaging.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "98": { "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "100": { "source": "use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr" }, "101": { "source": "use dep::protocol_types::constants::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2MembershipWitness)]\nfn get_l1_to_l2_membership_witness_oracle(_entry_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(entry_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(entry_key)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr" }, "103": { "source": "use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr" }, "105": { "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "114": { "source": "use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert((instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr" }, "130": { "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "145": { "source": "use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr" }, "146": { "source": "use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "150": { "source": "use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "155": { "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "167": { "source": "use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "181": { "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x134b57e317f1554b9c4f547e617338fcc8ff04c6d96a278f1752b26a462c5d25;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr" }, "184": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "186": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "189": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr" }, "192": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr" }, "193": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr" }, "195": { "source": "use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr" }, "196": { "source": "global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr" }, "198": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "199": { "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr" }, "201": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "202": { "source": "use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr" }, "209": { "source": "use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr" }, "210": { "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr" }, "211": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "227": { "source": "use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr" }, "309": { "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, callerOnL1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr" }, "322": { "source": "// docs:start:token_bridge_imports\nmod token_interface;\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PublicMutable};\n\n    use dep::aztec::{context::Context, hash::compute_secret_hash};\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use crate::token_interface::Token;\n    // docs:end:token_bridge_imports\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    struct Storage {\n        token: PublicMutable<AztecAddress>,\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress) {\n        let selector = FunctionSelector::from_signature(\"_initialize((Field))\");\n        context.call_public_function(context.this_address(), selector, [token.to_field()]);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, context.this_portal_address());\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(&mut context, to, amount);\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, callerOnL1);\n        context.message_portal(context.this_portal_address(), content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(&mut context, context.msg_sender(), amount, nonce);\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            context.this_portal_address()\n        );\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_call_mint_on_token(Field,Field)\"),\n            [amount, secret_hash_for_redeeming_minted_notes]\n        );\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, callerOnL1);\n        context.message_portal(context.this_portal_address(), content);\n\n        // docs:start:call_assert_token_is_same\n        // Assert that user provided token address is same as seen in storage.\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_token_is_same((Field))\"),\n            [token.to_field()]\n        );\n        // docs:end:call_assert_token_is_same\n\n        // Burn tokens\n        Token::at(token).burn(&mut context, context.msg_sender(), amount, nonce);\n    }\n    /// docs:end:exit_to_l1_private\n\n    // View function that is callable by other contracts.\n    // Unconstrained can't be called by others since it isn't safe.\n    #[aztec(public)]\n    fn get_token() -> AztecAddress {\n        storage.token.read()\n    }\n\n    // /// Unconstrained ///\n\n    // docs:start:read_token\n    unconstrained fn token() -> pub AztecAddress {\n        storage.token.read()\n    }\n    // docs:end:read_token\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    #[aztec(noinitcheck)]\n    fn _initialize(token: AztecAddress) {\n        storage.token.write(token);\n    }\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(&mut context, amount, secret_hash);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_token_is_same(token: AztecAddress) {\n        assert(storage.token.read().eq(token), \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/token_bridge_contract/src/main.nr" }, "323": { "source": "// docs:start:token_bridge_token_interface\nuse dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, Context};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn mint_public(self: Self, context: &mut PublicContext, to: AztecAddress, amount: Field) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"mint_public((Field),Field)\"),\n            [to.to_field(), amount]\n        );\n    }\n\n    // docs:start:public_burn_interface\n    pub fn burn_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"burn_public((Field),Field,Field)\"),\n            [from.to_field(), amount, nonce]\n        );\n    }\n    // docs:end:public_burn_interface\n\n    pub fn mint_private(self: Self, context: &mut PublicContext, amount: Field, secret_hash: Field) {\n        let _return_values = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"mint_private(Field,Field)\"),\n            [amount, secret_hash]\n        );\n    }\n\n    // docs:start:private_burn_interface\n    pub fn burn(self: Self, context: &mut PrivateContext, from: AztecAddress, amount: Field, nonce: Field) {\n        let _return_values = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"burn((Field),Field,Field)\"),\n            [from.to_field(), amount, nonce]\n        );\n    }\n    // docs:end:private_burn_interface\n}\n// docs:end:token_bridge_token_interface\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/token_bridge_contract/src/token_interface.nr" } } }

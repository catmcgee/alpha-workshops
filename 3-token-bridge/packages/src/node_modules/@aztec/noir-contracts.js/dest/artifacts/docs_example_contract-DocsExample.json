{ "noir_version": "0.25.0+d1ed549202e5a840845298c931418e173eb5437c", "name": "DocsExample", "functions": [{ "name": "initialize_public_immutable", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "update_legendary_card", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365] }, "bytecode": "", "debug_symbols": "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" }, { "name": "increase_legendary_points", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414] }, "bytecode": "", "debug_symbols": "" }, { "name": "spend_private_authwit", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250] }, "bytecode": "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", "debug_symbols": "1ZTBCoMwDIbfJWcPTWK19lXGDp1zIEgV7QZDfPfpZi1jvQkDT+EnH+H7LxmhaUvj6tYOoEdAAfo0wtAZu8TBmd6BFglU9jrPKYFb3VSgKVNT8sOhLFYSFW6syiMoofIsUZqFwwIjdM6MK51zIb/ocwKIh7Smf1kzsbdmxTuteY+1xEytqCShgjfFKgpBvqOgUBIlR+i0oO1yHthUva3TQ1rL41nP6WH62lyaavkoy/JuS/9g5uie3WczvQA=" }, { "name": "initialize_private_immutable", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264] }, "bytecode": "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", "debug_symbols": "3VjbbtswDP0XPweBeBFJ5VeGPWRdBgQI0qLJBgxB/n12a9FOqsWIW6R1ngzD5wiHFHlE+VBtHh+W+/XjdlctDhVAtfh2qHZPy23zutsvn/fVIsyq1fZn/TzOql/rzapaoNhx9gYHMbVIMHCsaQGKYBmLyNItHKCAViJo0UopnqC/zyrASaqmW6kmpKyajN6pmt+jOoJYC40YrNONpRBDwBxjwC5IiFRAc0JfWTss24vqOEnVMknVWlIdk2aOBEwD2jGq5pIV6BotppL25HIQAl0GD5W3TVl8+gDxguLiZUA8m/shJ9B+idVyMHwtOfARcrqtrTfjshxjbrHW9FzuEiguHJKfLIBdswKWPNo0G3oKcQAL7ObfKy+UeH19Id5NBpOI212vRcvgobTQjdMCwZ0dav84SUyjhz9RT537N3rirfUgRtcjNlA4HDnvLkdJ564hUxavNxefvBKIaUA8CPjQIWQD5sSWjSxS14MpvARqdxSoQnY97d0x6kALNsbqRhC4N4npCBtLd5RD8alKhS/nEJIEPzggnIyzVyeRwj0VouuwoGcdR/DFA2VHmwzNPaTJ7zO9i1J8Pd3nUN5U79J4snzLgRGc8nzldlCntAu7bveWRaNYfD1L5+UbBnmuKdm5M+u8fA8YIsEYEo4h0bUkgvl/ZhrK6YuKZ3XUkGQMqXiGCwVvzd5tPUhmFQ9EC+QsLrHSlaz67c/yeb38sVk1/w+bj7+3D/l3Yv26//v0+uX4Dw==" }, { "name": "get_public_immutable", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81WS07DMBCdOJ/moyJYsoFsYO1GbFggmStwg6AExKaR0laCy1dg6lGfHS+Q6qA+yfJkPJ7PsztuRAdEZmjEdISgKbTdk5Fz0CszNOQpeJBNpp0k5MXiZ2RGrsBOgC5K7FquPHY5yPtQuUv5eEE2VxwrDs2TlKuIbCiQY+TDsatgHXkTzl7NdQPrqWdP5onHcgo6Ps7Msxd5SqEWZWR5Gn55wlgKvjneEvLI/iEfvN4KvtMzib0IH1vmdOwZAf02uqYCalCQP8dLwObWzJd0OHPWc154/zWWwE0BfmeoZaV9ljNxVDkccf4lcMQ29w5HrHc5yoEj5oZtBfhG3gTY8Pre6F0fzHMVnhPrt8B9IXHiY+/CflY5dWH/RB+x468g+z0I+PY02m8WnqcGOSDgC6FAnrt/lsDnZjuM7Xv/0rddBKlxusJJF//q4Lrw6DRij47Ifr7wuLll4FURDi14Ldi+oCmlQe95TH5gYRFNCdO4MfO1mZ/Hsf2qP9Zd/1kPu209vNWvw27dbXDT3V830Te0tKNwhwoAAA==", "debug_symbols": "zdjbaoNAEAbgd9lrKTuHPeirlF7Y1IIgJkRbKOK7V9FIIRKoJOa/c9kZ50OWH9zOVMdD3pbHujFZZ+yLN9lrZ5pTXo/rps3Prcmc95KYov4YH1PtE/NZVoXJ2Mc+uapmielczcp2qfZupVgCz7VKspSSDf1bMnACFidicVIsDlkwD4F5GMwjYB4F8zgwD1g4E1g6E1g8E1g+M1g+M1g+82PzeZohO8y4R46q2GWG49vf9UbxBHJoIL8zSCleTh6HPy/2syeAeSKYJ8XyiAXzEJiHwTyyt0cWj655FMzjwDwezBPAPBHMk2J51D7P42TFQ2AeBvMImEexPG71PLMPc5NYvf6dcbSlibc0yZYm3dLk/tk0rL7zc5m/V8V4wz1uftWHy4X3sGx/TtNO/ws=" }, { "name": "read_note", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "amount", "type": { "kind": "field" }, "visibility": "private" }, { "name": "comparator", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 0, "end": 1 }], "comparator": [{ "start": 1, "end": 2 }] }, "return_type": { "abi_type": { "kind": "array", "length": 10, "type": { "kind": "struct", "path": "std::option::Option", "fields": [{ "name": "_is_some", "type": { "kind": "boolean" } }, { "name": "_value", "type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] } }] } }, "visibility": "public" }, "return_witnesses": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81] }, "bytecode": "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", "debug_symbols": "" }, { "name": "get_legendary_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "" }, { "name": "match_shared_immutable", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "account": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028] }, "bytecode": "", "debug_symbols": "" }, { "name": "is_legendary_initialized", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "boolean" }, "visibility": "public" }, "return_witnesses": [0] }, "bytecode": "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", "debug_symbols": "" }, { "name": "initialize_shared_immutable", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "view_imm_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "" }, { "name": "spend_public_authwit", "is_unconstrained": true, "custom_attributes": ["aztec(public)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "inner_hash", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inner_hash": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "is_priv_imm_initialized", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "boolean" }, "visibility": "public" }, "return_witnesses": [0] }, "bytecode": "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", "debug_symbols": "" }, { "name": "insert_notes", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amounts", "type": { "kind": "array", "length": 10, "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, "visibility": "private" }], "param_witnesses": { "amounts": [{ "start": 33, "end": 43 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370] }, "bytecode": "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", "debug_symbols": "7Z3haiM3EIDfxb9D0MxIIymvUvojvaYQCMlxcQsl5N2743rXTk63ZsYm0sr76wjRZ2Z1+9mf90D3tnl6+Xa/fXx5ft3cvW3Qbe5+e9u8fr9/lh9ft/c/tps7d7N5eP5z+PP9ZvPX49PD5g45vd/8tA5C3q+EBNPaFAtLEdK4FtHz4YUdFFZHItivjpTDh9W/32wQFjk1ftXUhDROTYnOnJrOmToAp/3SgC4d5sbSJTqH4zU6PFwkBCqs9hmnV46HtT7tpvaLnDoscmouTc2MYc8w88m7G9iP45A7rObS7MmPa5Nc2zgNlF4YXZ4MBjxsCmDJhRRHcbILJ9aCnyRzR45xMDgW1x08cwdTNzuYmScxgU8sPrUted2WwraQ++JtATe9NQPk/GFjZB6oOM+w9z/Ng189D04vDbuXm71xfPDj364PnI8/6GR4WvLw/suHz9OdQJ5ODA8MUzUwpRPv2T6N7++BDg5mt7vQ0NGFRhjniEdfEoYLLbyN+Ti9ETh/lFLR8DbGHe0hT4kZ2c/vIWR20wcHuA89qt/E2NONGMe7K7n42bjU+IX6aXXiUzlIMU9fSI6+6YTdhfYTPZVq2rs1G0vbAm1lo8e2stEvuby8X/LwPdXUXDb6npKnUjb6noqnVjb61mvqUtno85VkY+gneiplY4A1G0vbgm1lY6C2sjH4BZdXCEsevqeamsvG0NVDnjrZGHoqnlrZGFqvqUtlI7sryUbuJ3oqZSPjmo2lbaG2spF9W9nISy4v5iUP31NNzWUjd/WQp042ck/FUysbY+s1dalsjHAl2Rj7iZ5K2RhpzcbStvi2sjGGtrIxLrm8Ylzy8D3V1Fw2xq4e8tTJxtRT8dTKxtR6TV0qGxNeSTamfqKnUjYmv2ZjaVtCW9mYuK1sTEsur5SWPHxPNTWXjbmrhzx1sjH3VDy1sjG3XlOXysZMV5KN2a/ZeF425rBmY2lbuK1szLGtbMxLLq+cFzw8uJ5yaq4bB4vXcDw3HMH1FD21yhFc60V1qXQcbrgraUdw/aRPpXgcImGtx+K+xLbyEVxqqx/BLbrBwC16+p66arYgoasnPpUKEnpqn2oFCf5aChJaP7ThYgUJ6wmh5xYk9HNE6EULElJjBQm5sYLERTcYwqKn76mrZgsSu3rwU6kgsaf2qVaQ2NXRonMFia2f33CxglxPSD+7INcj0n+xL7mxgqx6OnmpIGnRDbbow8yBeuqq2YLs6ujzWgXZ1bHq1Qqyq4PVZwuy+dPPL3YouLst/2NUmEQNH15+z4CBKX7ghOkdgd3RR+xg/J4iE+X1lL8tP6Oiaa8pp083ygCVnyOdgsACoQUiNZRuy18VA43bFyJ+vo8GiC1QWTRyk5tH/weX45EqNntyNFG+RGU15UGvhzBgYPR6CEUmSq+HDwY9Bkivh0BggdACqfXw2aCHQGyB9HoIpddDKL0eAfV6CAMGRq+HUGSi9HoENugxQHo9BAILhBZIrQc7gx4CsQXS6yGUXg+h9How6fUQBgyMXg+hyETp9eBo0GOA9HoIBBYILZBajwgGPQRiC6TXQyi9HkLp9Yher4cwYGD0eghFJkqvR0wGPQZIr4dAYIHQAqn1SGjQQyC2QHo9hNLrIZRejxT0eggDBkavh1BkovR6pGzQY4D0eggEFggtkFqPTAY9BGILpNdDKL0eQun1yKzXQxgwMHo9hCITpdcDnDP4IZRekB0FJgpNFOkpb5BkR7GJ0muyw/Se7LBswKLelB0EFggN92+0yLLDDLYAWGwZKIMtQoGJQhOltwWCxRah2EQZbBHMYItgBlsgGWwRCCyQwRbByIYZbEG02DJQBluEAhOFJkpvC7LFFqHYRBlsEcxgi2AGWzAbbBEILJDBFsHIhhlsIbLYMlAGW4QCE4UmSm8LRYstQrGJMtgimMEWwbS2DD/9c//j8f6Pp4fXgZBf/v38bfv48rz/cfvv9/9/8/4f" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "7Z3djtw2EoXfpa+NgD9V/PGrLPZiNusFDBjjIJ5dYGH43dOTNHtiRIESDYc8R6w7/6hanw5bdXjUEvX18unzjw9PHz8/frm8/3pxP4R0ef+Pr5cvPz08Pv/Dl6eHn58u7yWkd5cPj/++/im7b+8u//n46cPlfUjl2z/fPRflA0XRbRWlJLeilOpGkT9SFI4UxSNFcqAobQoh1bUil78reveHbb0XvW18/WO6b+2l7cK//S7Ca3chGnz7wmiKL7sIfmPrHGPbOseqL5/t/A0oogEJGpCiASU0oIwGVNCAKhhQdmhAHg0IrVNntE6d0Tp1RuvUGa1TZ7ROndE6dUbr1AWtUxe0Tl3QOnVB69QFrVMXtE5d0Dp1QevUBa1TF7ROXQef9urqbWP15eWTfcMRLJzBX2iNseFE2cApWDgVCsc7B8bjwXgCGE8E4+nQfNzveGSvOYfQenOI3/5w8dg7BeNJY3l8bJ/8fCn65ZO18WQwngLGU7F4vAPj8WA8AYwnTuNR2eIRMB4F4xndn1NpPCVt8WQwngLGU7F4ggPj8WA8AYxncH8OoYXlIHmLR8B4FIwngfFkMJ4CxlOxeOLg/hy09Z/otuaH0YPxvGl/vu0jDtiHDNiHDthHGrCPPGAfZcA+6tvvQ9yAffgB+xhwnsuA81wGnOcy4DyXAee5DDjPZcB5LgPOcx1wnuuA81wHnOf6+vM8lfs+cnA7c5jdH2Svl3bgiBSOKMERZTiiAkdU0Yhe/3xGd6LX99Us9U6Uyw5Rye030ep0Z9vrpKjlUxe/y1+HjjQsc6RxmSOVZY5UlznStMyR5mWOtCxzpHWVI+3wdBTLkS4zR8rLzJHyMnOkDk+gsRzpMnOkvMwcKS8zR8rLzJHyMnOksswcqQyeI9XUVoTxzqdXXwYrgRs/cuMLN75y4ydu/MyNX7jxKzV+ddz43K5buV23crtuh2efp+Jzu259vesW1+5PlZL3bmaV0jZWkdfTZ2r6Qk1fielDh4fmZ9J7avpATR+p6YWaXqnpmb02OGavDY7Za4Oj9lpP7bWe2ms7LK5Q/f1Wz5ryDlFKLcvkoK+nj9T0Qk2v1PSJmj5T0xdq+spM32Exi5n0npqe2msDtdd2WIRjJj211wZqrw3UXtth8ZBa2y8K6uLeLwr+ZbUO/+vn3T9764adkHO+bR1y3XgQNXRYbGQqf4fFN96QP0Zpa1vGmOveZ0tt92J5jbs3bvk7tw9x71s/7Zaw0GHpEhuhtx0hsRECHyG1EQIfoWQjBD5C2UYIfISg59I2QtcRgk4LNkI/hA6LrdkIve0IeRsh8BGyawroI2TXFNBHSGyEwEfIrimgj5BdU0AfIbumgD5Cdk0BfYTsmgL4CKldU0AfIbumgD5Cdk3hL41Q38drg9qFgimyi8k+Q3aL9FNkt5w+RXYL31Nkt0Q9RXaLyTNkT5Z9p8hugXaK7JZSp8huKXWK7GKyz5DdUuoU2S2lTpF93ZQaRNrWcfdye99lV9K6IXWm6utm1Imq53Uj6kzV102oM1VfN6DOVH3dfDpTdTHVJ6i+bjqdqfq64XSm6pZNZ6hu2XSG6pZNJ6heLJvOUN2y6QzVLZvOUP1M2VTvW3utcWfrvgsZdnj5oun4rOOZ8uNMHc+UCGfqeKaMN1PHM6W2mTqeKYdN1LGeKVnN1PFMWWmmjmdKPzN1tDzTR0cxHbvoaHmmj46WZ/roaHmmj46WZ3roGB30/PEat9qV2esMbe9qK8liGtFBzzVPqjn0vPSkmotpPlxz6PnuSTWHnhufVHPoefRJNcd+Wdw5Ncd+wd0pNffQv02cVHPLoeM1txw6XnPLoeM1F9N8uOaWQ8drbjl0vOaWQ8drbjl0vOaWQ4drHiyHjtd82Rzad+GoGJYNl72FXDYx9hZSTMg+Qi6b7XoLuWxg6y3ksimst5DLRqveQi6blzoLGZcNQb2FtGTTSUhLNp2EtGTTSUgxIfsIacmmk5BnSjbzloeJ8UzBZqaOZ8o1M3U8U6yZqKOcKdXM1PFMoWamjmfKNDN1PFOkmamjmI5ddDxToJmpo+WZPjpanumjo+WZPjpanumio1qe6aOj5Zk+Og736+rvxxryjo7VNY4q7r5tjQ0+M8MXZvhKDD/+Xe894T0zfGCGj8zwwgyvzPDMDpuYHTYxO2xidtjM7LCZ2WEzs8NmZocd/xrPnvDMDpuZHTYzO2xmdtjM7LCF2WELs8MWZoctzA47/tVlPeGZHbYwO2xhdtjC7LCF2WErs8NWZoetzA5bmR12/Mt0esIzO2xldtjK7LCV2WErscOKI3ZYccQOK47YYcURO6w4YocVR+yw4ogdVhyxw4ojdlhxzA7rmR3WMzusZ3ZYz+yw4xcx7wnP7LCe2WE9s8N6Zof1zA4bmB02MDtsYHbYwOyw49eH7QnP7LCB2WEDs8MGZocNzA4bmR02MjtsZHbYyOyw49cp7AnP7LCR2WEjs8NGZoeNzA4rzA4rzA4rzA4rzA47ft2snvDMDivMDivMDivMDivMDqvMDqvMDqvMDqvMDqvMDqvMDsu8ppMwr+kkzGs6CfOaTsK8ppMwr+kkzGs6CfOaTsK8ppMwr+kkzGs6yfA1nWLMDf4a43bgd5eslOHLOvXmr9z8wxd36s3vyfkDOX8k5xdyfiXnT+T85P6byf03k/tvIfffQu6/hdx/C7n/Dl8Gqjc/uf8Wcv992/Wgbvsob74P3X5KL4fQDj/E7/Zxq5IjVR0ec9HQxuX6A0XcGXN17W0b6svLJ/t27B2eXOnLE8B4IhiPgPHoYJ54f2mLxi2eBMaTwXgKGE/F4okOjGd0f46x8UTZ4glgPBGMR8B4FIwngfFkMJ4CxlOxeMSB8YD1ZwHrzwLWnwWsPwtYfxaw/ixg/VnA+rOA9WcF688K1p8VrD8rWH9WsP6sYP1ZwfqzgvVnBevPCtafE1h/TmD9OYH15wTWnxNYf05g/TmB9ecE1p8TWH9OYP35T+5JTO299urCvardiKx/ciPgTpEcKdIjRelIUT5SVI4UbX4FtNwHqm4Ubd87tFfkjxSFI0XxSJEcKdIjRZvfCK35ftaljaJ8pKgcKaoHirZfc7RX5I8UhSNFm9+IpPeitFUkR4r0SFE6UpSPFJUjRfXvF6Xt13Kk3E6NVMJGkT9SFI4UxSNFcqRIjxSlv1d0/cv/Hn7++PCvTx++XAue/++/jz8+ffz8ePvr0/9/+u1/vv0C" }, { "name": "initialize_private", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "points": [{ "start": 34, "end": 35 }], "randomness": [{ "start": 33, "end": 34 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264] }, "bytecode": "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", "debug_symbols": "3VjbbtpAEP0XPyM0t52d5VeqPtA0lZAQiQKtVCH+vXbiHRuyzQpT0cATsnzOcnZ25uyM98366WG5Wz1tts1i3yA2iy/7Zvu83HSP293yZdcsYNY8br63v4dZ82O1fmwWpHaYvcNhSD0SDR1rsQAltIwlEh0WBiygIzP26MgpHKG/zhqkm1TN11LNxFk1G1+oWi5RHVCthwYCG3RTaYsAlPcINGwSAxfQkshXjgNW7FV1uEnVepOqY0m1smrPUSGtaKcU8z8w4CBHsZjfFnN+S7KPwbX0tlsWny4Xz+3pu3itiBdzP5SEcZxirRyCzyUH/4Wc4WiRKqdlIj3WuprLVYLFnIHkN8t4YaTiyjEbeoJQwaK4+cPI+zWcn19EdxPB5JoRUCvgWlj4ymFBcGdHTOkoMJ0e+Y962ti/0xOurYcouB61SuJIkHy6EjSduobesvh4dfHJM4GFK+JR0ZsOZauYk1g2ssBDDSZ43ajd0UYjZteLoxmj3WjBxiS6EYCMOrE4wcbSHcVQvUONKh/HEJOCXxwIR+3s2UFkuKdEjDm7DOJJxTF+8o2Ko01rfQ/H5PPMaFAKb7f7HIuHGrxKw9HyPQcncIr9VXA7UBjdrW259yyexJLzWXFenjDYY82jCaZ35jgvzwE1Ek4h0RQSn0tinJd7msA5fCHSSR51JJ1C+ssdDl6ao2kdNLOKF6IBO0tKrHQmq336tXxZLb+tH7vvh93Ln5uH/Dmxfdz9fn57c/gD" }, { "name": "get_leader", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81WS07DMBCdOJ/moyJYsoFsYO1GbJHMFbhBUAJi00hpK8HlK2rqUZ8dL5DqoD7J8mQ8ns+zO25ER0RmaMR0gqAptN2zkXPQKzM05Dl4kk2mnSTkxeIwMiNXYCdAFyV2LTceuxzkfajcpVxdkc0Vx4pD83SIFZENBXKMfDh2Fawjb8LZq7luYD317Mk88VhOQcfHmXn2Ik8p1KKMLM/DL08YS8E3x1tCHtk/5IPXW8F3eiGxF+Fjy5xOPSOg30bXVEANCvLneAnY3Jv5mo5nznrOC++/xhK4KcDvDLWstM9yJo4qhyPOvwSO2ObR4Yj1Lkc5cMTcsK0A38ibABte3xu964N5rsJzYv0WuC8kTnzsXdjPKqcu7J/oI3b8FWS/BwHfnkb7zcLz1CAHBHwhFMhz988S+Nxsh7H96F/7tosgNU5XOOniXx1cFx6dRuzREdnPFx43twy8KsKhBa8F2xc0pTToPY/JDywsoilhGndmvjXzyzi23/Xnuuu/6mG3rYf3+m3YrbsNbnr46yb6AcrhOHqHCgAA", "debug_symbols": "zdjbaoNAFAXQf5lnKXMuc9FfKX2wqQVBTIi2UMR/r+KFQiRQac1+c3AfZyGywelMdT7lbXmuG5N1xj55kz13prnk9bhu2vzamiwldYkp6rfx0vs+Me9lVZiMfeyTmzQRhTlNpHFNe9kIS+A5qyRrlGzoX5KBE7A4EYuTYnHIgnkIzMNgHgHzKJjHgXnAypnA2pnA6pnA+pnB+pnB+pn/t5+nPeSAPf6kR11c94j2/nu9E55ADg3kDwYpLVnl8OPBfvYEME8E86RYHrFgHgLzMJhHjvbI6tEtj4J5HJjHg3kCmCeCeVIsj9rHeZxseAjMw2AeAfMolsdtfs/sl98AsXr7O+NozxDvGZI9Q7pnyP1yaFh95tcyf62K8YR7vPlRn5YD72HZfl2mO/03" }, { "name": "get_imm_card", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::card_note::CardNote", "fields": [{ "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }, { "name": "randomness", "type": { "kind": "field" } }, { "name": "owner", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "header", "type": { "kind": "struct", "path": "aztec::note::note_header::NoteHeader", "fields": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "nonce", "type": { "kind": "field" } }, { "name": "storage_slot", "type": { "kind": "field" } }, { "name": "is_transient", "type": { "kind": "boolean" } }] } }] }, "visibility": "public" }, "return_witnesses": [0, 1, 2, 3, 4, 5, 6] }, "bytecode": "", "debug_symbols": "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Yw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw5XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw7XYw4n1xjE3UpkXqLzkjMvsXmJz0tiXpLzkpqXzE9f5qcv89OX+enL/PRlfvoyP32Zn77MT1/mpy/z09f56ev89HV++jo/fZ2fvs5PX+enr/PT1/np6/z0z/z0z/z0z/z0z/z0z/z0z/z0z/z0z/z0z/z0z/z0bX76Nj99m5++zU/f5qdv89O3+enb/PRtfvo2P32fn77PT9/np+/z0/f56fv89H1++j4/fZ+fvs9PP+anH/PTj/npx/z0Y376MT/9mJ9+zE8/5qcf89PP+enn/PRzfvo5P/2cn37OTz/np5/z08/56ef89Gt++jU//Zqffs1Pv+anX/PTr/np1/z0a376NT/9np9+z0+/56ff89Pv+en3/PR7fvo9P/2en/6c9cmc9cmc9cmc9cmc9d1+6p2X+Lwk5iU5L6l5yfz056xP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP5qxP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56xP56zvzFnfmbO+M2d9Z876zpz1nTnrO3PWd+as78xZ35mzvjNnfWfO+s6c9Z056ztz1nfmrO/MWd+Zs74zZ31nzvrOnPWdOes7c9Z35qzvzFnfmbO+M2d9Z876zpz1nTnrO3PWd+as78xZ35mzvjNnfWfO+s6c9Z056ztz1nfmrO/MWd+Zs74zZ31nzvrOnPWdOes7c9Z35qzvzFnfmbO+M2d9Z876zpz1nTnrO3PWd+as78xZ35mzvjNnfWfO+s6c9Z056ztz1nfmrO/MWd+Zs74zZ31nzvrOnPWdOes7c9Z35qzvzFnfmbO+M2d9Z876zpz1nTnrO3PWd+as78xZ35mzvjNnfWfO+s6c9Z056ztz1nfmrO/MWd+Zs74zZ31nzvrOnPWdOes7c9Z35qzvzFnfmbO+M2d9Z876bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM76bM767GPW13HZT1Ud9reFv/m7r9aq+Omrta98/2rvD744Q3/62kx//9Lj7w+UbA9UbA/UZA/0MWMdPlDHeX+gtl9/oF/54rdHEr5HUr5HOnyPZHyP5HyPFHyPlHyPVHyP1HSP1HzTu/mmd/NN7+ab3s03vZtvejff9G6+6d1807vpprdfdNPbL7rp7Rfd9PaLbnr7RTe9/aKb3n7RTW+/6Ka3X3TT2y++6S1801v4prfwTW/hm97CN72Fb3oL3/QWvuktfNNb+Ka38k1v5Zveyje9lW96K9/0Vr7prXzTW/mmt/JNb+Wb3odveh++6X34pvfhm96Hb3ofvul9+Kb34Zveh296H77pbXzT2/imt/FNb+Ob3sY3vY1vehvf9Da+6W1809v4prfzTW/nm97ON72db3o73/R2vuntfNPb+aa3801v55vewTe9g296B9/0Dr7pHXzTO/imd/BN7+Cb3sE3vYNveiff9E6+6Z180zv5pnfyTe/km97JN72Tb3on3/ROvunN51o6n2vpfK6l87mWzudaOp9r6XyupfO5ls7nWjqfa+l8rqXzuZbO51o6n2vpfK6l87mWzudaOp9r6XyupfO5lsHnWgafaxl8rmXwuZa3pfkeiW56B59rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWwedaBp9rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWwedaBp9rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWwedaBp9rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWwedaBp9rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWwedaBp9rGXyuZfC5lsHnWgafaxl8rmXwuZbB51oGn2sZfK5l8LmWweda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vvM38OyfxP/kX5f7tkqurFIrq/TCKvJP/jWdb6vIyiq6sspZWcVWVvGVVWJllVxZpVZWWbn7snL3ZeXuy8rdl5W7Lyt3X1buvqzcfVm5+7Jy92Xl7uvK3deVu68rd19X7r6u3H1dufu6cvd15e7ryt3Xlbt/Vu7+Wbn7Z+Xun5W7f1bu/lm5+2fl7p+Vu39W7v5Zufu2cvdt5e7byt23lbtvK3ffVu6+rdx9W7n7tnL3beXu+8rd95W77yt331fuvq/cfV+5+75y933l7vvK3feVux8rdz9W7n6s3P1Yufuxcvdj5e7Hyt2PlbsfK3c/Vu5+rtz9XLn7uXL3c+Xu58rdz5W7nyt3P1fufq7c/Vy5+7Vy92vl7tfK3a+Vu18rd79W7n6t3P1aufu1cvdr5e73yt3vlbvfK3e/V+5+r9z9Xrn7K7k+Wcn1yUquT1ZyfbqS69OVXJ+u5Pp0Jdenl62s4iurxMoqubJKrayycvdXcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kuvTlVyfruT6dCXXpyu5Pl3J9elKrk9Xcn26kus7K7m+s5LrOyu5vrOS6zuXraziK6vEyiq5skqtrLJy91dyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXd1ZyfWcl13dWcn1nJdd3VnJ9ZyXXZyu5PlvJ9dlKrs9Wcn122coqvrJKrKySK6vUyiord38l12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5byfXZSq7PVnJ9tpLrs5Vcn63k+mwl12cruT5fyfX5Sq7PV3J9vpLr88tWVvGVVWJllVxZpVZWWbn7K7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1+Uquz1dyfb6S6/OVXJ+v5Pp8JdfnK7k+X8n1xUquL1ZyfbGS64uVXN/tv7ayiq+sEiur5MoqtbLKyt1fyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vVnJ9sZLri5VcX6zk+mIl1xcrub5YyfXFSq4vV3J9uZLry5VcX67k+vKylVV8ZZVYWSVXVqmVVVbu/kquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbmS68uVXF+u5PpyJdeXK7m+XMn15UquL1dyfbWS66uVXF+t5PpqJddXl62s4iurxMoqubJKrayycvdXcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuurlVxfreT6aiXXVyu5vlrJ9dVKrq9Wcn21kuvrlVxfr+T6eiXX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" }, { "name": "update_leader", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }], "param_witnesses": { "account": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }], "points": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240] }, "bytecode": "", "debug_symbols": "" }, { "name": "get_shared_immutable", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [], "param_witnesses": {}, "return_type": { "abi_type": { "kind": "struct", "path": "types::leader::Leader", "fields": [{ "name": "account", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "points", "type": { "kind": "integer", "sign": "unsigned", "width": 8 } }] }, "visibility": "public" }, "return_witnesses": [0, 1] }, "bytecode": "H4sIAAAAAAAA/81WS07DMBCdOJ/moyJYsoFsYO1GSKyQzBW4QVACYtNIaSvB5Ssw9ajPjhdIdVCfZHkyHs/n2R03ogMiMzRiOkLQFNruycg56JUZGvIUPMgm004S8mLxMzIjV2AnQBcldi1XHrsc5H2o3KV8vCCbK44Vh+ZJylVENhTIMfLh2FWwjrwJZ6/muoH11LMn88RjOQUdH2fm2Ys8pVCLMrI8Db88YSwF3xxvCXlk/5APXm8F3+mZxF6Ejy1zOvaMgH4bXVMBNSjIn+MlYHNr5ks6nDnrOS+8/xpL4KYAvzPUstI+y5k4qhyOOP8SOGKbe4cj1rsc5cARc8O2AnwjbwJseH1v9K4P5rkKz4n1W+C+kDjxsXdhP6ucurB/oo/Y8VeQ/R4EfHsa7TcLz1ODHBDwhVAgz90/S+Bzsx3G9r1/6dsugtQ4XeGki391cF14dBqxR0dkP1943Nwy8KoIhxa8Fmxf0JTSoPc8Jj+wsIimhGncmPnazM/j2H7VH+uu/6yH3bYe3urXYbfuNrjp7q+b6BsKHWuQhwoAAA==", "debug_symbols": "zdjdaoMwGAbge8mxjHw/+dFbGTtwnQNBbKluMMR7n6KVQaUwae17Zsj3JQ8SXkg6Ux0PeVse68ZknbEv3mSvnWlOeT2OmzY/tyZzlGpiivpj+GThPjGfZVWYjH3sk6tqpmjnamaipdrrSrEEnmuVZCklG/q3ZOAELE7E4qRYHLJgHgLzMJhHwDwK5nFgHrBwJrB0JrB4JrB8ZrB8ZrB85sfm87SH7LDHPXJ0WHnZQ+X2f71RPIEcGsjvDFKKl5PH4c/CfvYEME8E86RYHrFgHgLzMJhH9vbI4tE1j4J5HJjHg3kCmCeCeVIsj9rneZyseAjMw2AeAfMolsetnmf2YW4Sq9fXGUdbmnhLk2xp0i1N7p9Nw+g7P5f5e1WML9zj5Fd9uDx4D8P25zTN9L8=" }, { "name": "simple_macro_example_expanded", "is_unconstrained": false, "custom_attributes": [], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "a", "type": { "kind": "field" }, "visibility": "private" }, { "name": "b", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "a": [{ "start": 33, "end": 34 }], "b": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251] }, "bytecode": "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", "debug_symbols": "1ZTBCsIwDIbfJecdmqTdur2KeKg6YTC6sVVBxt7dbVqrWPEgCLsl5OPn+y8ZoG72xlWN7aEYAAUUmwH61th57Z3pHBSIKekESntYZoljAseqLqGgVI/JO69yT+vA6iyCEmrPEsk0BAuM0Bkz3umMc/VCbxNAXLU9/dueib09a/7Rnj/YC/FkT1/sFaa+rCKhgz/FqgpBPltQKIuKI7TM6ZGcBVbqxV6u2l6t137azqarzK4u5w80H0927x/StLpLe7uMVw==" }, { "name": "simple_macro_example", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "a", "type": { "kind": "field" }, "visibility": "private" }, { "name": "b", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "a": [{ "start": 33, "end": 34 }], "b": [{ "start": 34, "end": 35 }], "inputs": [{ "start": 0, "end": 33 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251] }, "bytecode": "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", "debug_symbols": "1ZTBCoMwDIbfJWcPTWK19lXGDp1zIEgV7QZDfPfpZi1jvQkDT+EnH+H7LxmhaUvj6tYOoEdAAfo0wtAZu8TBmd6BFglU9jrPKYFb3VSgKVNT8sOhLFYSFW6syiMoofIsUZqFwwIjdM6MK51zIb/ocwKIh7Smf1kzsbdmxTuteY+1xEytqCShgjfFKgpBvqOgUBIlR+i0oO1yHthUva3TQ1rL41nP6WH62lyaavkoy/JuS/9g5uie3WczvQA=" }, { "name": "insert_note", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "amount", "type": { "kind": "integer", "sign": "unsigned", "width": 8 }, "visibility": "private" }, { "name": "randomness", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "amount": [{ "start": 33, "end": 34 }], "inputs": [{ "start": 0, "end": 33 }], "randomness": [{ "start": 34, "end": 35 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262] }, "bytecode": "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", "debug_symbols": "7VjbattAEP2XfTZmbjs7618pfXBTFwzGCbFbKMb/XinRjmRnqbACTmzyJBads5w5zE06hM3jw3K/ftzuwuIQEMPi2yHsnpbb9rjbL5/3YQGzsNr+bJ7HWfi13qzCgtSOszc4jLlDoqFjLVWghFawRKL9xYAVdGLGDp04xxP091lAuknVfC3VTFxUs/E7Vct7VEdU66CRwHrdVAsRgEqMQH2QGLmClkx+c+qxYi+q402q1ptUnWqq1aSklVrSsexGlSKHoY9Ua9pNCtba2IoarF1MkL2CkXpTkGq1YKkUToY4gkXxIoNBjWmcUGN2Nw5mVU8r1BHwmC35y5aKLQRXtgXBGwtizifGtHrwA/U03r/RQ9fWQxRdj9pI4kh0IRI1D9t0K55vWbxcXXz2TGDhEfGo6DNP2UZ6tljp75H7GszwEmi8o0ATFh1psOI2gVbamCRvBCCDRSBNaGN6Rx6qL0hJ5f8eYlbwwYFwsk1dbmK6p0RMJbsM0nnF2ScPVBxtOrYOcsq+Tg/29Pg63edYHfDRqzSeXN9xcAKnOiijtwOFwWxtyr1j8SSWXM6SeX0DZPeas53niczr+9EYCaeQaAqJLybZvD5wIhf7YqLzPGpIOoVU7ygMXpqDj0XQwqqWpwE7S2qsfCGrOf1ZPq+XPzar9vdV+/L39qH8zWqO+79Pr2+O/wA=" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "19": { "source": "// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n", "path": "std/field/bn254.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n", "path": "std/option.nr" }, "59": { "source": "use dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateImmutable<T> {}\n\nimpl<Note> PrivateImmutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "61": { "source": "use dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr" }, "62": { "source": "use dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateSet<T> {}\n\nimpl<Note> PrivateSet<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.note_hash_read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr" }, "63": { "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr" }, "64": { "source": "use crate::{\n    context::Context, history::public_value_inclusion::prove_public_value_inclusion,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i as Field,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr" }, "65": { "source": "use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr" }, "70": { "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "85": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/log.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "90": { "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr" }, "91": { "source": "use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "104": { "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr" }, "106": { "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "115": { "source": "use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_header.nr" }, "116": { "source": "use dep::std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, Comparator, NoteStatus};\nuse dep::protocol_types::{constants::MAX_NOTES_PER_PAGE, traits::ToField};\nuse crate::note::note_interface::NoteInterface;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        value: T,\n        comparator: Option<u8>\n    ) -> Self where T: ToField {\n        self.selects.push(\n            Option::some(\n                Select::new(\n                    property_selector,\n                    value.to_field(),\n                    comparator.unwrap_or(Comparator.EQ)\n                )\n            )\n        );\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr" }, "118": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "122": { "source": "use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(serialized_note: [Field; N], selector: PropertySelector) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = value_field == select.value.to_field();\n        let isLt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "147": { "source": "use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "184": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "186": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "198": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "201": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "211": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "212": { "source": "use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr" }, "265": { "source": "use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext, emit_encrypted_log};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, protocol_types::traits::Empty\n};\n\n// Shows how to create a custom note\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\n#[aztec(note)]\nstruct CardNote {\n    points: u8,\n    randomness: Field,\n    owner: AztecAddress,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, randomness: Field, owner: AztecAddress) -> Self {\n        CardNote { points, randomness, owner, header: NoteHeader::empty() }\n    }\n}\n\nimpl NoteInterface<CARD_NOTE_LEN> for CardNote {\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/card_note.nr" }, "266": { "source": "use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n// Shows how to create a custom struct in Public\nstruct Leader {\n    account: AztecAddress,\n    points: u8,\n}\n\nglobal LEADER_SERIALIZED_LEN: Field = 2;\n\nimpl Deserialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn deserialize(fields: [Field; LEADER_SERIALIZED_LEN]) -> Self {\n        Leader { account: AztecAddress::from_field(fields[0]), points: fields[1] as u8 }\n    }\n}\n\nimpl Serialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn serialize(self) -> [Field; LEADER_SERIALIZED_LEN] {\n        [self.account.to_field(), self.points as Field]\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/leader.nr" }, "268": { "source": "mod options;\nmod types;\n\n// Following is a very simple game to show case use of PrivateMutable in as minimalistic way as possible\n// It also serves as an e2e test that you can read and then replace the PrivateMutable in the same call\n// (tests ordering in the circuit)\n\n// you have a card (PrivateMutable). Anyone can create a bigger card. Whoever is bigger will be the leader.\n// it also has dummy methods and other examples used for documentation e.g. \n// how to create custom notes, a custom struct for public state, a custom note that may be unencrypted\n// also has `options.nr` which shows various ways of using `NoteGetterOptions` to query notes\n// it also shows what our macros do behind the scenes!\n\ncontract DocsExample {\n    // how to import dependencies defined in your workspace\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        PrivateContext, Map, PublicMutable, PublicImmutable, PrivateMutable, PrivateImmutable,\n        PrivateSet, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, context::{PublicContext, Context}};\n    // how to import methods from other files/folders within your workspace\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{card_note::{CardNote, CARD_NOTE_LEN}, leader::Leader};\n\n    struct Storage {\n        // Shows how to create a custom struct in PublicMutable\n        // docs:start:storage-leader-declaration\n        leader: PublicMutable<Leader>,\n        // docs:end:storage-leader-declaration\n        // docs:start:storage-private-mutable-declaration\n        legendary_card: PrivateMutable<CardNote>,\n        // docs:end:storage-private-mutable-declaration\n        // just used for docs example to show how to create a private mutable map. \n        profiles: Map<AztecAddress, PrivateMutable<CardNote>>,\n        // docs:start:storage-set-declaration\n        set: PrivateSet<CardNote>,\n        // docs:end:storage-set-declaration\n        // docs:start:storage-private-immutable-declaration\n        private_immutable: PrivateImmutable<CardNote>,\n        // docs:end:storage-private-immutable-declaration\n        // docs:start:storage-shared-immutable-declaration\n        shared_immutable: SharedImmutable<Leader>,\n        // docs:end:storage-shared-immutable-declaration\n        // docs:start:storage-minters-declaration\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage-minters-declaration\n        // docs:start:storage-public-immutable-declaration\n        public_immutable: PublicImmutable<Leader>,\n        // docs:end:storage-public-immutable-declaration\n    }\n\n    // Note: The following is no longer necessary to implement manually as our macros do this for us. It is left here\n    // for documentation purposes only.\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                // docs:start:storage-leader-init\n                leader: PublicMutable::new(context, 1),\n                // docs:end:storage-leader-init\n                // docs:start:start_vars_private_mutable\n                legendary_card: PrivateMutable::new(context, 3),\n                // docs:end:start_vars_private_mutable\n                // just used for docs example (not for game play):\n                // docs:start:state_vars-MapPrivateMutable\n                profiles: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PrivateMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:state_vars-MapPrivateMutable\n                // docs:start:storage-set-init\n                set: PrivateSet::new(context, 5),\n                // docs:end:storage-set-init\n                private_immutable: PrivateImmutable::new(context, 6),\n                // docs:start:storage-shared-immutable\n                shared_immutable: SharedImmutable::new(context, 7),\n                // docs:end:storage-shared-immutable\n                // docs:start:storage-minters-init\n                minters: Map::new(\n                    context,\n                    8,\n                    |context, slot| {\n                        PublicMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:storage-minters-init\n                // docs:start:storage-public-immutable\n                public_immutable: PublicImmutable::new(context, 9)// docs:end:storage-public-immutable\n            }\n        }\n    }\n\n    #[aztec(public)]\n    fn initialize_shared_immutable(points: u8) {\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.shared_immutable.initialize(new_leader);\n    }\n\n    #[aztec(private)]\n    fn match_shared_immutable(account: AztecAddress, points: u8) {\n        let expected = Leader { account, points };\n        let read = storage.shared_immutable.read_private();\n\n        assert(read.account == expected.account, \"Invalid account\");\n        assert(read.points == expected.points, \"Invalid points\");\n    }\n\n    unconstrained fn get_shared_immutable() -> pub Leader {\n        storage.shared_immutable.read_public()\n    }\n\n    #[aztec(public)]\n    fn initialize_public_immutable(points: u8) {\n        // docs:start:initialize_public_immutable\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.public_immutable.initialize(new_leader);\n        // docs:end:initialize_public_immutable\n    }\n\n    unconstrained fn get_public_immutable() -> pub Leader {\n        // docs:start:read_public_immutable\n        storage.public_immutable.read()\n        // docs:end:read_public_immutable\n    }\n\n    // docs:start:initialize-private-mutable\n    #[aztec(private)]\n    fn initialize_private_immutable(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.private_immutable.initialize(&mut new_card, true);\n    }\n    // docs:end:initialize-private-mutable\n\n    #[aztec(private)]\n    // msg_sender() is 0 at deploy time. So created another function\n    fn initialize_private(randomness: Field, points: u8) {\n        let mut legendary_card = CardNote::new(points, randomness, context.msg_sender());\n        // create and broadcast note\n        storage.legendary_card.initialize(&mut legendary_card, true);\n    }\n\n    #[aztec(private)]\n    fn insert_notes(amounts: [u8; 10]) {\n        for i in 0..amounts.len() {\n            let mut note = CardNote::new(amounts[i], 1, context.msg_sender());\n            storage.set.insert(&mut note, true);\n        }\n    }\n\n    #[aztec(private)]\n    fn insert_note(amount: u8, randomness: Field) {\n        let mut note = CardNote::new(amount, randomness, context.msg_sender());\n        storage.set.insert(&mut note, true);\n    }\n\n    // docs:start:state_vars-NoteGetterOptionsComparatorExampleNoir\n    unconstrained fn read_note(amount: Field, comparator: u8) -> pub [Option<CardNote>; 10] {\n        let options = NoteViewerOptions::new().select(\n            CardNote::properties().points,\n            amount,\n            Option::some(comparator)\n        );\n        let notes = storage.set.view_notes(options);\n\n        notes\n    }\n    // docs:end:state_vars-NoteGetterOptionsComparatorExampleNoir\n\n    #[aztec(private)]\n    fn update_legendary_card(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.legendary_card.replace(&mut new_card, true);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn increase_legendary_points() {\n        // Ensure `points` > current value\n        // Also serves as a e2e test that you can `get_note()` and then `replace()`\n\n        // docs:start:state_vars-PrivateMutableGet\n        let card = storage.legendary_card.get_note(false);\n        // docs:end:state_vars-PrivateMutableGet\n\n        let points = card.points + 1;\n\n        let mut new_card = CardNote::new(points, card.randomness, context.msg_sender());\n        // docs:start:state_vars-PrivateMutableReplace\n        storage.legendary_card.replace(&mut new_card, true);\n        // docs:end:state_vars-PrivateMutableReplace\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn spend_private_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn update_leader(account: AztecAddress, points: u8) {\n        let new_leader = Leader { account, points };\n        storage.leader.write(new_leader);\n    }\n\n    unconstrained fn get_leader() -> pub Leader {\n        storage.leader.read()\n    }\n\n    unconstrained fn get_legendary_card() -> pub CardNote {\n        storage.legendary_card.view_note()\n    }\n\n    // docs:start:private_mutable_is_initialized\n    unconstrained fn is_legendary_initialized() -> pub bool {\n        storage.legendary_card.is_initialized()\n    }\n    // docs:end:private_mutable_is_initialized\n\n    // docs:start:get_note-private-immutable\n    unconstrained fn get_imm_card() -> pub CardNote {\n        storage.private_immutable.get_note()\n    }\n    // docs:end:get_note-private-immutable\n\n    unconstrained fn view_imm_card() -> pub CardNote {\n        storage.private_immutable.view_note()\n    }\n\n    unconstrained fn is_priv_imm_initialized() -> pub bool {\n        storage.private_immutable.is_initialized()\n    }\n\n    /// Macro equivalence section\n    use dep::aztec::hasher::Hasher;\n\n    use dep::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs;\n    use dep::aztec::context::inputs::PrivateContextInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/main.nr" } } }

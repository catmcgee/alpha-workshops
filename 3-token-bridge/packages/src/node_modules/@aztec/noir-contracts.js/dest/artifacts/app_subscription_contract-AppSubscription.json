{ "noir_version": "0.25.0+d1ed549202e5a840845298c931418e173eb5437c", "name": "AppSubscription", "functions": [{ "name": "assert_not_expired", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "expiry_block_number", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "expiry_block_number": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "is_initialized", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "subscriber_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "subscriber_address": [{ "start": 0, "end": 1 }] }, "return_type": { "abi_type": { "kind": "boolean" }, "visibility": "public" }, "return_witnesses": [1] }, "bytecode": "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", "debug_symbols": "" }, { "name": "entrypoint", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "payload", "type": { "kind": "struct", "path": "dapp_payload::DAppPayload", "fields": [{ "name": "function_calls", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::entrypoint::function_call::FunctionCall", "fields": [{ "name": "args_hash", "type": { "kind": "field" } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "target_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "is_public", "type": { "kind": "boolean" } }] } } }, { "name": "nonce", "type": { "kind": "field" } }] }, "visibility": "public" }, { "name": "user_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "public" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 33 }], "payload": [{ "start": 33, "end": 38 }], "user_address": [{ "start": 38, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797] }, "bytecode": "", "debug_symbols": "" }, { "name": "assert_block_number", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(internal)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "expiry_block_number", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "expiry_block_number": [{ "start": 37, "end": 38 }], "inputs": [{ "start": 0, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239] }, "bytecode": "", "debug_symbols": "" }, { "name": "constructor", "is_unconstrained": true, "custom_attributes": ["aztec(public)", "aztec(initializer)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "target_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "subscription_recipient_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "subscription_token_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "subscription_price", "type": { "kind": "field" }, "visibility": "private" }, { "name": "gas_token_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "gas_token_address": [{ "start": 41, "end": 42 }], "inputs": [{ "start": 0, "end": 37 }], "subscription_price": [{ "start": 40, "end": 41 }], "subscription_recipient_address": [{ "start": 38, "end": 39 }], "subscription_token_address": [{ "start": 39, "end": 40 }], "target_address": [{ "start": 37, "end": 38 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_non_existent_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "reverted", "type": { "kind": "boolean" } }] }, "visibility": "public" }, "return_witnesses": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243] }, "bytecode": "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", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "is_unconstrained": true, "custom_attributes": [], "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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cN209xq4LdFx3TTgumnAddOA66YB100jrptGXDeNuG4acd2091qMLdFx3TTiumnEddOI66YR100J100J100J100J1017LwzWEh3XTQnXTQnXTQnXTQnXTRnXTRnXTRnXTRnXTXsvVdMSHddNGddNGddNGddNcddCIty1kAh3LSTCXQuJcNdCIty1kAh3LSTCXQuJcNdCIty1kAh3LSTqvRZS5Nv6j5cZ/2f0zSUdqfdySI3pAzR9hKYnaHqGpk/Q9BmaXqDpCzK9QHutQHutQHutQHtt71WTGtNDe61Ae61Ae61Ae61Ae+2h6yhdN+GP3gSvvw+Xozzv/MtNXItyRdH+l0s4LFNyuR0VN2abXVn23D/PdfDLju9/YaQtDuvCSbpwsi4c6YtzO7CY4xpOUYWz/0WJtjheF07QhRN14XTuyjEuOJHWcFgXTtKFk3XhiC6cogqHnC4crwsn6MKJunB0dWXS1ZVJV1cmXV2ZdHVl0tWVWVdXZl1dmXV1ZdbVlVlXV2ZdXZl1dWXW1ZVZV1dmXV056erKSVdXTrq6ctLVlZOurpx0deWkqysnXV056erKSVdXzrq6ctbVlbOurvyd5wfTcgeW3fNTxcujwvydx/Y2inJNkdQUlYqi7zyStVHka4pWPwEst4kqa0WxpohqirimKNUU5ZoiqSla/URwyctB59LrovUHB7aKfE1RqCmKNUVUU8Q1RaufiMS3orRWlGuKpKaovL0orX+JyFaRrykKNUWrn4iUl0MjSVgpopoirilKNUW5pkhqisrbii7/+O3+l4/3///04cul4Nvvfn344fHj54frPx9///nP3zz9AQ==" }, { "name": "subscribe", "is_unconstrained": false, "custom_attributes": ["aztec(private)"], "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] }, "visibility": "private" }, { "name": "subscriber_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "expiry_block_number", "type": { "kind": "field" }, "visibility": "private" }, { "name": "tx_count", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "expiry_block_number": [{ "start": 35, "end": 36 }], "inputs": [{ "start": 0, "end": 33 }], "nonce": [{ "start": 34, "end": 35 }], "subscriber_address": [{ "start": 33, "end": 34 }], "tx_count": [{ "start": 36, "end": 37 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "note_hash_read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_read_requests", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_effects_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961] }, "bytecode": "", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n", "path": "std/collections/bounded_vec.nr" }, "19": { "source": "// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n", "path": "std/field/bn254.nr" }, "20": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "30": { "source": "mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n", "path": "std/hash.nr" }, "33": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "35": { "source": "use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n", "path": "std/option.nr" }, "47": { "source": "mod subscription_note;\nmod dapp_payload;\n\ncontract AppSubscription {\n    use dep::std;\n    use crate::dapp_payload::DAppPayload;\n\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, PrivateContext, NoteHeader, Map, PrivateMutable, PublicMutable,\n        SharedImmutable\n    };\n\n    use dep::aztec::protocol_types::traits::is_empty;\n\n    use dep::aztec::{context::Context, oracle::get_public_key::get_public_key};\n    use dep::authwit::{account::AccountActions, auth_witness::get_auth_witness, auth::assert_current_call_valid_authwit};\n\n    use crate::subscription_note::{SubscriptionNote, SUBSCRIPTION_NOTE_LEN};\n\n    struct Storage {\n        // The following is only needed in private but we use ShareImmutable here instead of PrivateImmutable because\n        // the value can be publicly known and SharedImmutable provides us with a better devex here because we don't\n        // have to bother with sharing the note between pixies of users.\n        target_address: SharedImmutable<AztecAddress>,\n        subscription_token_address: SharedImmutable<AztecAddress>,\n        subscription_recipient_address: SharedImmutable<AztecAddress>,\n        subscription_price: SharedImmutable<Field>,\n        subscriptions: Map<AztecAddress, PrivateMutable<SubscriptionNote>>,\n        gas_token_address: SharedImmutable<AztecAddress>,\n    }\n\n    global SUBSCRIPTION_DURATION_IN_BLOCKS = 5;\n    global SUBSCRIPTION_TXS = 5;\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub DAppPayload, user_address: pub AztecAddress) {\n        assert(context.msg_sender().to_field() == 0);\n        assert_current_call_valid_authwit(&mut context, user_address);\n\n        let mut note = storage.subscriptions.at(user_address).get_note(false);\n        assert(note.remaining_txs as u64 > 0, \"you're out of txs\");\n\n        note.remaining_txs -= 1;\n        storage.subscriptions.at(user_address).replace(&mut note, true);\n\n        context.call_public_function(\n            storage.gas_token_address.read_private(),\n            FunctionSelector::from_signature(\"check_balance(Field)\"),\n            // max gas limit in Gas tokens\n            [42]\n        );\n\n        context.call_public_function(\n            storage.gas_token_address.read_private(),\n            FunctionSelector::from_signature(\"pay_fee(Field)\"),\n            [42]\n        );\n\n        context.capture_min_revertible_side_effect_counter();\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"assert_not_expired(Field)\"),\n            [note.expiry_block_number]\n        );\n\n        payload.execute_calls(&mut context, storage.target_address.read_private());\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(\n        target_address: AztecAddress,\n        subscription_recipient_address: AztecAddress,\n        subscription_token_address: AztecAddress,\n        subscription_price: Field,\n        gas_token_address: AztecAddress\n    ) {\n        storage.target_address.initialize(target_address);\n        storage.subscription_token_address.initialize(subscription_token_address);\n        storage.subscription_recipient_address.initialize(subscription_recipient_address);\n        storage.subscription_price.initialize(subscription_price);\n\n        storage.gas_token_address.initialize(gas_token_address);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_not_expired(expiry_block_number: Field) {\n        assert((context.block_number()) as u64 < expiry_block_number as u64);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_block_number(expiry_block_number: Field) {\n        assert(\n            (context.block_number() + SUBSCRIPTION_DURATION_IN_BLOCKS) as u64\n            >= expiry_block_number as u64\n        );\n    }\n\n    #[aztec(private)]\n    fn subscribe(\n        subscriber_address: AztecAddress,\n        nonce: Field,\n        expiry_block_number: Field,\n        tx_count: Field\n    ) {\n        assert(tx_count as u64 <= SUBSCRIPTION_TXS as u64);\n\n        let _ = context.call_private_function(\n            storage.subscription_token_address.read_private(),\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [\n            context.msg_sender().to_field(), storage.subscription_recipient_address.read_private().to_field(), storage.subscription_price.read_private(), nonce\n        ]\n        );\n\n        // Assert that the given expiry_block_number < current_block_number + SUBSCRIPTION_DURATION_IN_BLOCKS.\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"assert_block_number(Field)\"),\n            [expiry_block_number]\n        );\n\n        let mut subscription_note = SubscriptionNote::new(subscriber_address, expiry_block_number, tx_count);\n        if (!is_initialized(subscriber_address)) {\n            storage.subscriptions.at(subscriber_address).initialize(&mut subscription_note, true);\n        } else {\n            storage.subscriptions.at(subscriber_address).replace(&mut subscription_note, true)\n        }\n    }\n\n    // Compiler bug workaround. You can't call an unconstrained function in another module, unless its from an\n    // unconstained function in your module.\n    unconstrained fn is_initialized(subscriber_address: AztecAddress) -> pub bool {\n        storage.subscriptions.at(subscriber_address).is_initialized()\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/app_subscription_contract/src/main.nr" }, "48": { "source": "use dep::aztec::prelude::{AztecAddress, PrivateContext, NoteHeader, emit_encrypted_log, NoteInterface};\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_consumption, hash::pedersen_hash,\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key}\n};\n\nglobal SUBSCRIPTION_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct SubscriptionNote {\n    owner: AztecAddress,\n    expiry_block_number: Field,\n    remaining_txs: Field,\n}\n\nimpl NoteInterface<SUBSCRIPTION_NOTE_LEN> for SubscriptionNote {\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let unique_siloed_note_hash = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let unique_siloed_note_hash = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl SubscriptionNote {\n    pub fn new(owner: AztecAddress, expiry_block_number: Field, remaining_txs: Field) -> Self {\n        SubscriptionNote { owner, expiry_block_number, remaining_txs, header: NoteHeader::empty() }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/app_subscription_contract/src/subscription_note.nr" }, "49": { "source": "use dep::aztec::prelude::{PrivateContext, AztecAddress};\nuse dep::aztec::protocol_types::{constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::pedersen_hash, traits::{Hash, Serialize}};\n\nuse dep::authwit::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * DAPP_MAX_CALLS + 1\nglobal DAPP_PAYLOAD_SIZE: u64 = 5;\n// FUNCTION_CALL_SIZE_IN_BYTES * DAPP_MAX_CALLS + 32\nglobal DAPP_PAYLOAD_SIZE_IN_BYTES: u64 = 129;\n\nglobal DAPP_MAX_CALLS: u64 = 1;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct DAppPayload {\n  function_calls: [FunctionCall; DAPP_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<DAPP_PAYLOAD_SIZE> for DAppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; DAPP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, DAPP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for DAppPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl DAppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; DAPP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, DAPP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..DAPP_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext, target_address: AztecAddress) {\n        for call in self.function_calls {\n            // whitelist the calls that the user can do only go to the expected Dapp contract\n            assert(call.target_address == target_address);\n            if call.is_public {\n                context.call_public_function_with_packed_args(\n                    call.target_address,\n                    call.function_selector,\n                    call.args_hash,\n                    false,\n                    false\n                );\n            } else {\n                let _result = context.call_private_function_with_packed_args(\n                    call.target_address,\n                    call.function_selector,\n                    call.args_hash,\n                    false,\n                    false\n                );\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n", "path": "/usr/src/noir-projects/noir-contracts/contracts/app_subscription_contract/src/dapp_payload.nr" }, "55": { "source": "use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER},\n    hash::{hash_args, pedersen_hash}\n};\nuse dep::aztec::context::{PrivateContext, PublicContext, Context};\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_private_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_private_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let function_selector = FunctionSelector::from_signature(\"spend_public_authwit(Field)\");\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    let result = context.call_public_function(on_behalf_of, function_selector, [inner_hash])[0];\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_call_authwit_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_call_authwit_hash<N>(caller: AztecAddress, consumer: AztecAddress, selector: FunctionSelector, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_outer_authwit_hash(consumer, inner_hash)\n}\n// docs:end:compute_call_authwit_hash\n\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\npub fn compute_outer_authwit_hash(consumer: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [consumer.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/authwit/src/auth.nr" }, "60": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "61": { "source": "use dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr" }, "64": { "source": "use crate::{\n    context::Context, history::public_value_inclusion::prove_public_value_inclusion,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i as Field,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr" }, "70": { "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr" }, "71": { "source": "use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr" }, "77": { "source": "use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "82": { "source": "use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "85": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/log.nr" }, "87": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "90": { "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr" }, "91": { "source": "use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr" }, "93": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "94": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "98": { "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr" }, "99": { "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "100": { "source": "use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr" }, "103": { "source": "use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr" }, "104": { "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr" }, "106": { "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr" }, "107": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "110": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/context.nr" }, "114": { "source": "use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert((instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr" }, "115": { "source": "use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_header.nr" }, "118": { "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr" }, "121": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "122": { "source": "use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(serialized_note: [Field; N], selector: PropertySelector) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = value_field == select.value.to_field();\n        let isLt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n", "path": "/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter.nr" }, "130": { "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr" }, "131": { "source": "pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr" }, "132": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr" }, "144": { "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr" }, "145": { "source": "use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr" }, "146": { "source": "use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr" }, "147": { "source": "use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr" }, "148": { "source": "use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr" }, "150": { "source": "use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr" }, "153": { "source": "use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr" }, "155": { "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr" }, "163": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr" }, "167": { "source": "use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr" }, "168": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr" }, "181": { "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x134b57e317f1554b9c4f547e617338fcc8ff04c6d96a278f1752b26a462c5d25;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr" }, "184": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr" }, "186": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr" }, "189": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr" }, "192": { "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr" }, "193": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    read_request::ReadRequest, side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x2b5ba01a6b73b68b4f44196e2dea49afd4076333e2dee8eddc9186e080f18201;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr" }, "195": { "source": "use crate::{\n    address::AztecAddress, constants::{GENERATOR_INDEX__SIDE_EFFECT},\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr" }, "196": { "source": "global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr" }, "198": { "source": "use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr" }, "199": { "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr" }, "201": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr" }, "202": { "source": "use crate::{\n    constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::{arr_copy_slice}\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_effects_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_effects_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr" }, "209": { "source": "use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr" }, "210": { "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr" }, "211": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr" }, "212": { "source": "use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr" }, "227": { "source": "use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n", "path": "/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr" } } }

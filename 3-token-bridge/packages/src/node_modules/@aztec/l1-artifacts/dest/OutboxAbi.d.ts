/**
 * Outbox ABI.
 */
export declare const OutboxAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_registry";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "REGISTRY";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IRegistry";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "computeEntryKey";
    readonly inputs: readonly [{
        readonly name: "_message";
        readonly type: "tuple";
        readonly internalType: "struct DataStructures.L2ToL1Msg";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L2Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "recipient";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L1Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "chainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "content";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "consume";
    readonly inputs: readonly [{
        readonly name: "_message";
        readonly type: "tuple";
        readonly internalType: "struct DataStructures.L2ToL1Msg";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L2Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "recipient";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L1Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "chainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "content";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "entryKey";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "contains";
    readonly inputs: readonly [{
        readonly name: "_entryKey";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "get";
    readonly inputs: readonly [{
        readonly name: "_entryKey";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct DataStructures.Entry";
        readonly components: readonly [{
            readonly name: "fee";
            readonly type: "uint64";
            readonly internalType: "uint64";
        }, {
            readonly name: "count";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "version";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "deadline";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "sendL1Messages";
    readonly inputs: readonly [{
        readonly name: "_entryKeys";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "MessageAdded";
    readonly inputs: readonly [{
        readonly name: "entryKey";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "MessageConsumed";
    readonly inputs: readonly [{
        readonly name: "entryKey";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "recipient";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "Outbox__IncompatibleEntryArguments";
    readonly inputs: readonly [{
        readonly name: "entryKey";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "storedFee";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "feePassed";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }, {
        readonly name: "storedVersion";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "versionPassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "storedDeadline";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "deadlinePassed";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidChainId";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidVersion";
    readonly inputs: readonly [{
        readonly name: "entry";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "message";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsume";
    readonly inputs: readonly [{
        readonly name: "entryKey";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__Unauthorized";
    readonly inputs: readonly [];
}];
//# sourceMappingURL=OutboxAbi.d.ts.map
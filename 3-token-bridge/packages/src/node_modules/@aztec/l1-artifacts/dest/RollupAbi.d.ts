/**
 * Rollup ABI.
 */
export declare const RollupAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_registry";
        readonly type: "address";
        readonly internalType: "contract IRegistry";
    }, {
        readonly name: "_availabilityOracle";
        readonly type: "address";
        readonly internalType: "contract IAvailabilityOracle";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "AVAILABILITY_ORACLE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IAvailabilityOracle";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "INBOX";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IInbox";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "REGISTRY";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IRegistry";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "VERIFIER";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract MockVerifier";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "VERSION";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "archive";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "lastBlockTs";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "lastWarpedBlockTs";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "process";
    readonly inputs: readonly [{
        readonly name: "_header";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_body";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_proof";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "L2BlockProcessed";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidHeaderSize";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidChainId";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidInHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProof";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidVersion";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampInFuture";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampTooOld";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__UnavailableTxs";
    readonly inputs: readonly [{
        readonly name: "txsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}];
//# sourceMappingURL=RollupAbi.d.ts.map
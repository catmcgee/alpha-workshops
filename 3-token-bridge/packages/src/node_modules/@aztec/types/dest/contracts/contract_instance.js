import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, numToUInt8, serializeToBuffer } from '@aztec/foundation/serialize';
const VERSION = 1;
export class SerializableContractInstance {
    constructor(instance) {
        this.version = VERSION;
        if (instance.version !== VERSION) {
            throw new Error(`Unexpected contract class version ${instance.version}`);
        }
        this.salt = instance.salt;
        this.contractClassId = instance.contractClassId;
        this.initializationHash = instance.initializationHash;
        this.portalContractAddress = instance.portalContractAddress;
        this.publicKeysHash = instance.publicKeysHash;
        this.deployer = instance.deployer;
    }
    toBuffer() {
        return serializeToBuffer(numToUInt8(this.version), this.salt, this.contractClassId, this.initializationHash, this.portalContractAddress, this.publicKeysHash, this.deployer);
    }
    /** Returns a copy of this object with its address included. */
    withAddress(address) {
        return { ...this, address };
    }
    static fromBuffer(bufferOrReader) {
        const reader = BufferReader.asReader(bufferOrReader);
        return new SerializableContractInstance({
            version: reader.readUInt8(),
            salt: reader.readObject(Fr),
            contractClassId: reader.readObject(Fr),
            initializationHash: reader.readObject(Fr),
            portalContractAddress: reader.readObject(EthAddress),
            publicKeysHash: reader.readObject(Fr),
            deployer: reader.readObject(AztecAddress),
        });
    }
    static random(opts = {}) {
        return new SerializableContractInstance({
            version: VERSION,
            salt: Fr.random(),
            contractClassId: Fr.random(),
            initializationHash: Fr.random(),
            portalContractAddress: EthAddress.random(),
            publicKeysHash: Fr.random(),
            deployer: AztecAddress.random(),
            ...opts,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3RzL2NvbnRyYWN0X2luc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHMUYsTUFBTSxPQUFPLEdBQUcsQ0FBVSxDQUFDO0FBc0IzQixNQUFNLE9BQU8sNEJBQTRCO0lBU3ZDLFlBQVksUUFBMEI7UUFSdEIsWUFBTyxHQUFHLE9BQU8sQ0FBQztRQVNoQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDaEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztRQUN0RCxJQUFJLENBQUMscUJBQXFCLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1FBQzVELElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDcEMsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLGlCQUFpQixDQUN0QixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUN4QixJQUFJLENBQUMsSUFBSSxFQUNULElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxrQkFBa0IsRUFDdkIsSUFBSSxDQUFDLHFCQUFxQixFQUMxQixJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7SUFDSixDQUFDO0lBRUQsK0RBQStEO0lBQy9ELFdBQVcsQ0FBQyxPQUFxQjtRQUMvQixPQUFPLEVBQUUsR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBcUM7UUFDckQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxPQUFPLElBQUksNEJBQTRCLENBQUM7WUFDdEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQW9CO1lBQzdDLElBQUksRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUMzQixlQUFlLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDdEMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDekMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7WUFDcEQsY0FBYyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ3JDLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUE0QyxFQUFFO1FBQzFELE9BQU8sSUFBSSw0QkFBNEIsQ0FBQztZQUN0QyxPQUFPLEVBQUUsT0FBTztZQUNoQixJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNqQixlQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUM1QixrQkFBa0IsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQy9CLHFCQUFxQixFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDMUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDM0IsUUFBUSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsR0FBRyxJQUFJO1NBQ1IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIn0=
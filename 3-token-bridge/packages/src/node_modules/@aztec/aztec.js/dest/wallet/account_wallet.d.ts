/// <reference types="node" resolution-mode="require"/>
import { type AuthWitness, type FunctionCall, type PXE, type TxExecutionRequest } from '@aztec/circuit-types';
import { type AztecAddress, Fr } from '@aztec/circuits.js';
import { type AccountInterface } from '../account/interface.js';
import { ContractFunctionInteraction } from '../contract/contract_function_interaction.js';
import { type FeeOptions } from '../entrypoint/entrypoint.js';
import { BaseWallet } from './base_wallet.js';
/**
 * A wallet implementation that forwards authentication requests to a provided account.
 */
export declare class AccountWallet extends BaseWallet {
    protected account: AccountInterface;
    constructor(pxe: PXE, account: AccountInterface);
    createTxExecutionRequest(execs: FunctionCall[], fee?: FeeOptions): Promise<TxExecutionRequest>;
    getChainId(): Fr;
    getVersion(): Fr;
    /**
     * Computes an authentication witness from either a message or a caller and an action.
     * If a message is provided, it will create a witness for the message directly.
     * Otherwise, it will compute the message using the caller and the action.
     * @param messageHashOrIntent - The message or the caller and action to approve
     * @returns The authentication witness
     */
    createAuthWit(messageHashOrIntent: Fr | Buffer | {
        /** The caller to approve  */
        caller: AztecAddress;
        /** The action to approve */
        action: ContractFunctionInteraction | FunctionCall;
        /** The chain id to approve */
        chainId?: Fr;
        /** The version to approve  */
        version?: Fr;
    }): Promise<AuthWitness>;
    /**
     * Returns a function interaction to set a message hash as authorized or revoked in this account.
     * Public calls can then consume this authorization.
     * @param messageHashOrIntent - The message or the caller and action to authorize/revoke
     * @param authorized - True to authorize, false to revoke authorization.
     * @returns - A function interaction.
     */
    setPublicAuthWit(messageHashOrIntent: Fr | Buffer | {
        /** The caller to approve  */
        caller: AztecAddress;
        /** The action to approve */
        action: ContractFunctionInteraction | FunctionCall;
        /** The chain id to approve */
        chainId?: Fr;
        /** The version to approve  */
        version?: Fr;
    }, authorized: boolean): ContractFunctionInteraction;
    /**
     * Returns the message hash for the given message or authwit input.
     * @param messageHashOrIntent - The message hash or the caller and action to authorize
     * @returns The message hash
     */
    private getMessageHash;
    /**
     * Lookup the validity of an authwit in private and public contexts.
     * If the authwit have been consumed already (nullifier spent), will return false in both contexts.
     * @param target - The target contract address
     * @param messageHashOrIntent - The message hash or the caller and action to authorize/revoke
     * @returns - A struct containing the validity of the authwit in private and public contexts.
     */
    lookupValidity(target: AztecAddress, messageHashOrIntent: Fr | Buffer | {
        /** The caller to approve  */
        caller: AztecAddress;
        /** The action to approve */
        action: ContractFunctionInteraction | FunctionCall;
        /** The chain id to approve */
        chainId?: Fr;
        /** The version to approve  */
        version?: Fr;
    }): Promise<{
        /** boolean flag indicating if the authwit is valid in private context */
        isValidInPrivate: boolean;
        /** boolean flag indicating if the authwit is valid in public context */
        isValidInPublic: boolean;
    }>;
    /**
     * Returns a function interaction to cancel a message hash as authorized in this account.
     * @param messageHashOrIntent - The message or the caller and action to authorize/revoke
     * @returns - A function interaction.
     */
    cancelAuthWit(messageHashOrIntent: Fr | Buffer | {
        /** The caller to approve  */
        caller: AztecAddress;
        /** The action to approve */
        action: ContractFunctionInteraction | FunctionCall;
        /** The chain id to approve */
        chainId?: Fr;
        /** The version to approve  */
        version?: Fr;
    }): ContractFunctionInteraction;
    /** Returns the complete address of the account that implements this wallet. */
    getCompleteAddress(): import("@aztec/circuit-types").CompleteAddress;
    /** Returns the address of the account that implements this wallet. */
    getAddress(): AztecAddress;
    private getApprovePublicAuthwitAbi;
    private getCancelAuthwitAbi;
    private getLookupValidityAbi;
}
//# sourceMappingURL=account_wallet.d.ts.map
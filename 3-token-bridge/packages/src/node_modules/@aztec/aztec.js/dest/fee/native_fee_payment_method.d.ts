import { FunctionCall } from '@aztec/circuit-types';
import { AztecAddress } from '@aztec/circuits.js';
import { Fr } from '@aztec/foundation/fields';
import { Wallet } from '../account/wallet.js';
import { FeePaymentMethod } from './fee_payment_method.js';
/**
 * Pay fee directly in the native gas token.
 */
export declare class NativeFeePaymentMethod implements FeePaymentMethod {
    #private;
    private constructor();
    static create(wallet: Wallet): Promise<NativeFeePaymentMethod>;
    /**
     * Gets the native gas asset used to pay the fee.
     * @returns The asset used to pay the fee.
     */
    getAsset(): AztecAddress;
    /**
     * The contract responsible for fee payment. This will be the same as the asset.
     * @returns The contract address responsible for holding the fee payment.
     */
    getPaymentContract(): AztecAddress;
    /**
     * Fee payments in the native gas token are always public.
     * @returns false
     */
    isPrivateFeePayment(): boolean;
    /**
     * Creates a function call to pay the fee in gas token..
     * @param feeLimit - The maximum fee to be paid in gas token.
     * @returns A function call
     */
    getFunctionCalls(feeLimit: Fr): Promise<FunctionCall[]>;
}
//# sourceMappingURL=native_fee_payment_method.d.ts.map
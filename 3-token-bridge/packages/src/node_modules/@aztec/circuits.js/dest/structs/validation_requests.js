import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX, } from '../constants.gen.js';
import { NullifierKeyValidationRequestContext } from './nullifier_key_validation_request.js';
import { PublicDataRead } from './public_data_read_request.js';
import { ReadRequestContext } from './read_request.js';
import { SideEffect } from './side_effects.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */
export class ValidationRequests {
    constructor(
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests, 
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests, 
    /**
     * All the nullifier key validation requests made in this transaction.
     */
    nullifierKeyValidationRequests, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads) {
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.nullifierNonExistentReadRequests = nullifierNonExistentReadRequests;
        this.nullifierKeyValidationRequests = nullifierKeyValidationRequests;
        this.publicDataReads = publicDataReads;
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashReadRequests, this.nullifierReadRequests, this.nullifierNonExistentReadRequests, this.nullifierKeyValidationRequests, this.publicDataReads);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ValidationRequests(reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, SideEffect), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ReadRequestContext), reader.readArray(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, ReadRequestContext), reader.readArray(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX, NullifierKeyValidationRequestContext), reader.readArray(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return ValidationRequests.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new ValidationRequests(makeTuple(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, SideEffect.empty), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ReadRequestContext.empty), makeTuple(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, ReadRequestContext.empty), makeTuple(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX, NullifierKeyValidationRequestContext.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead.empty));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbl9yZXF1ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3ZhbGlkYXRpb25fcmVxdWVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQVMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRixPQUFPLEVBQ0wsa0NBQWtDLEVBQ2xDLDRDQUE0QyxFQUM1QywrQ0FBK0MsRUFDL0Msa0NBQWtDLEVBQ2xDLDRCQUE0QixHQUM3QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCO0lBQ0U7O09BRUc7SUFDSSxvQkFBa0Y7SUFDekY7O09BRUc7SUFDSSxxQkFBMkY7SUFDbEc7O09BRUc7SUFDSSxnQ0FHTjtJQUNEOztPQUVHO0lBQ0ksOEJBR047SUFDRDs7T0FFRztJQUNJLGVBQTJFO1FBdEIzRSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQThEO1FBSWxGLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBc0U7UUFJM0YscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUd0QztRQUlNLG1DQUE4QixHQUE5Qiw4QkFBOEIsQ0FHcEM7UUFJTSxvQkFBZSxHQUFmLGVBQWUsQ0FBNEQ7SUFDakYsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsb0JBQW9CLEVBQ3pCLElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDLGdDQUFnQyxFQUNyQyxJQUFJLENBQUMsOEJBQThCLEVBQ25DLElBQUksQ0FBQyxlQUFlLENBQ3JCLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksa0JBQWtCLENBQzNCLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0NBQWtDLEVBQUUsVUFBVSxDQUFDLEVBQ2hFLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0NBQWtDLEVBQUUsa0JBQWtCLENBQUMsRUFDeEUsTUFBTSxDQUFDLFNBQVMsQ0FBQywrQ0FBK0MsRUFBRSxrQkFBa0IsQ0FBQyxFQUNyRixNQUFNLENBQUMsU0FBUyxDQUFDLDRDQUE0QyxFQUFFLG9DQUFvQyxDQUFDLEVBQ3BHLE1BQU0sQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEVBQUUsY0FBYyxDQUFDLENBQy9ELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSxrQkFBa0IsQ0FDM0IsU0FBUyxDQUFDLGtDQUFrQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFDL0QsU0FBUyxDQUFDLGtDQUFrQyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxFQUN2RSxTQUFTLENBQUMsK0NBQStDLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEVBQ3BGLFNBQVMsQ0FBQyw0Q0FBNEMsRUFBRSxvQ0FBb0MsQ0FBQyxLQUFLLENBQUMsRUFDbkcsU0FBUyxDQUFDLDRCQUE0QixFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FDOUQsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9
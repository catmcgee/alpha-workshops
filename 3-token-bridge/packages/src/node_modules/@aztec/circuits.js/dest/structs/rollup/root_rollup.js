import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { AggregationObject } from '../aggregation_object.js';
import { Header } from '../header.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export class RootRollupInputs {
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData, 
    /**
     * The original and converted roots of the L1 to L2 messages subtrees.
     */
    l1ToL2Roots, 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessageTreeRootSiblingPath, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessageTreeSnapshot, 
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot, 
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath) {
        this.previousRollupData = previousRollupData;
        this.l1ToL2Roots = l1ToL2Roots;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.newL1ToL2MessageTreeRootSiblingPath = newL1ToL2MessageTreeRootSiblingPath;
        this.startL1ToL2MessageTreeSnapshot = startL1ToL2MessageTreeSnapshot;
        this.startArchiveSnapshot = startArchiveSnapshot;
        this.newArchiveSiblingPath = newArchiveSiblingPath;
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupInputs(...RootRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.l1ToL2Roots,
            fields.newL1ToL2Messages,
            fields.newL1ToL2MessageTreeRootSiblingPath,
            fields.startL1ToL2MessageTreeSnapshot,
            fields.startArchiveSnapshot,
            fields.newArchiveSiblingPath,
        ];
    }
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export class RootRollupPublicInputs {
    constructor(
    /** Native aggregation state at the end of the rollup. */
    aggregationObject, 
    /** Snapshot of archive tree after this block/rollup been processed */
    archive, 
    /** A header of an L2 block. */
    header) {
        this.aggregationObject = aggregationObject;
        this.archive = archive;
        this.header = header;
    }
    static getFields(fields) {
        return [fields.aggregationObject, fields.archive, fields.header];
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupPublicInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupPublicInputs(...RootRollupPublicInputs.getFields(fields));
    }
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupPublicInputs(reader.readObject(AggregationObject), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(Header));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBUyxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBUXJGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFdEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHeEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCO0lBQ0U7Ozs7T0FJRztJQUNJLGtCQUE0RDtJQUNuRTs7T0FFRztJQUNJLFdBQTRCO0lBQ25DOztPQUVHO0lBQ0ksaUJBQXdFO0lBQy9FOztPQUVHO0lBQ0ksbUNBQStGO0lBQ3RHOztPQUVHO0lBQ0ksOEJBQXNEO0lBQzdEOztPQUVHO0lBQ0ksb0JBQTRDO0lBQ25EOztPQUVHO0lBQ0kscUJBQXVEO1FBeEJ2RCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTBDO1FBSTVELGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUk1QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQXVEO1FBSXhFLHdDQUFtQyxHQUFuQyxtQ0FBbUMsQ0FBNEQ7UUFJL0YsbUNBQThCLEdBQTlCLDhCQUE4QixDQUF3QjtRQUl0RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBSTVDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBa0M7SUFDN0QsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBa0M7UUFDNUMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBa0M7UUFDakQsT0FBTztZQUNMLE1BQU0sQ0FBQyxrQkFBa0I7WUFDekIsTUFBTSxDQUFDLFdBQVc7WUFDbEIsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsbUNBQW1DO1lBQzFDLE1BQU0sQ0FBQyw4QkFBOEI7WUFDckMsTUFBTSxDQUFDLG9CQUFvQjtZQUMzQixNQUFNLENBQUMscUJBQXFCO1NBQ3BCLENBQUM7SUFDYixDQUFDO0NBQ0Y7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQztJQUNFLHlEQUF5RDtJQUNsRCxpQkFBb0M7SUFDM0Msc0VBQXNFO0lBQy9ELE9BQStCO0lBQ3RDLCtCQUErQjtJQUN4QixNQUFjO1FBSmQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUVwQyxZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUUvQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3BCLENBQUM7SUFFSixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQXdDO1FBQ3ZELE9BQU8sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFVLENBQUM7SUFDNUUsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBd0M7UUFDbEQsT0FBTyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQ3BELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLHNCQUFzQixDQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDMUIsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9
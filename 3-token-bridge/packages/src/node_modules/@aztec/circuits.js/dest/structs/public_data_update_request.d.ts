/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
/**
 * Write operations on the public data tree including the previous value.
 */
export declare class PublicDataUpdateRequest {
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    readonly leafSlot: Fr;
    /**
     * New value of the leaf.
     */
    readonly newValue: Fr;
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    readonly sideEffectCounter?: number | undefined;
    constructor(
    /**
     * Index of the leaf in the public data tree which is to be updated.
     */
    leafSlot: Fr, 
    /**
     * New value of the leaf.
     */
    newValue: Fr, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter?: number | undefined);
    static from(args: {
        /**
         * Index of the leaf in the public data tree which is to be updated.
         */
        leafIndex: Fr;
        /**
         * New value of the leaf.
         */
        newValue: Fr;
    }): PublicDataUpdateRequest;
    toBuffer(): Buffer;
    isEmpty(): boolean;
    static isEmpty(x: PublicDataUpdateRequest): boolean;
    equals(other: PublicDataUpdateRequest): boolean;
    static fromBuffer(buffer: Buffer | BufferReader): PublicDataUpdateRequest;
    static empty(): PublicDataUpdateRequest;
    toFriendlyJSON(): string;
}
//# sourceMappingURL=public_data_update_request.d.ts.map